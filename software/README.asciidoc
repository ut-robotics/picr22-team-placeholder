:1: https://github.com/ut-robotics/picr22-boot-camp-programming
:2: https://github.com/ut-robotics/robot-basketball-manager
:fn-att: footnote:[After each semi-autonomous throw, the robot keeps the last throw data in memory (basket distance, robot speed and thrower speed) and saves them to a CSV file. This is to help speed up data gathering for thrower calibration.]

   _____ _____ _____ _____ 
  |     |     |     |     |      Team %placeholder% software,
  | %   | p   | l   | a   |        made for our funny basketball robot.
  |_____|_____|_____|_____|      Main programmer: Timo654
  |     |     |     |     |      Platform: Linux
  | h   | o   | l   | d   |      Python version: 3.9
  |_____|_____|_____|_____|      Dependencies: numpy, openCV, pyrealsense2, numba, tomli,
  |     |     |     |     |        websocket_client, pyserial, pyPS4Controller
  | e   | r   | c   | e   |      Amazing logo generated by ChatGPT
  |_____|_____|_____|_____|
  '); DROP TABLE BOT

This code is built on top of {1}[PICR22 Boot Camp code].

== Main modules

[horizontal]
main.py:: Main file, where all the magic happens. Contains states and all the required game logic to bring it all together.
robot_test.py:: Utility for easily testing whether all 3 wheels of the robot move as intended.
config_colors.py:: Utility to configure colors. Check the log for detailed instructions.
      
== Submodules

[horizontal]
Color.py:: Contains data of the colors that are detected. Also contains data used to display the colors in the debug view.

camera.py:: Contains a ICamera interface that describes methods required by the image processing module and a RealsenseCamera implementation. 

image_processor.py:: Main module for image processing. Responsible for image color and feature segmentation. 

motion.py:: Contains  OmniRobot class for moving the motors.

helper.py:: Contains helper functions that are frequently used across modules.

helper_jit.py:: Contains JIT helper functions that are frequently used across modules.

logger.py:: Contains the logger we use to print fancy text to terminal and files to disk.

referee.py:: Module for interacting with the referee command server. Used to save commands to a queue.

states.py:: Contains enums of all possible states. Used in multiple modules, which is why it's split here instead of being in main.

ds4_control.py:: Contains RobotDS4 class, which lets us use a DualShock 4 controller to control the robot.


== Setup

==== Segmentation module installation:

IMPORTANT: Building the Segmentation module requires *python3.9-distutils*.

```
cd modules/segment_module
pip3.9 install .
```

==== Installing required libraries:
```
pip install -r requirements.txt
```

== Configuration

==== Running the color configurator:
```
python3.9 config_colors.py
```

Follow the instructions in the log to calibrate all of the colours.

==== Other configuration

There are various variables exposed in the `config.toml` file that can be edited to adjust the robot's behaviour.

The most important to change would be the robot's `name`, `referee_ip`, `motor_order`, `wheel_radius` and `wheel_distance_from_center`. It's also recommended to enable `debug` when testing for the first time, so you can actually see the camera view.

CAUTION: Having the debug camera turned on is a major performance hit.


== Running the main code

If the colours have been configured using config_colors.py and all desired changes have been done to config.toml, you can now run the main code.

IMPORTANT: Hosting a referee server is required to run this, see {2}[here] for more info.

```
python3.9 main.py
```

TIP: If the program cannot connect to the server, verify that the {1}[referee server] IP in config.toml is correct - the robot will not work otherwise.

After the robot has started, it should've connected to the referee server. 

You can start it from there by sending it a start signal and it should move, as long as everything's been configured correctly.

TIP: If the robot did connect to the referee server, but is not starting, make sure the robot name in the referee software is the same as the one in `config.toml`.

== Remote Control

If you have a DUALSHOCK™4 wireless controller, you can use it to control the robot remotely by just connecting the controller to the robot using Bluetooth®.

=== Controls

[horizontal]
SHARE button:: Toggle Remote Control
PS Button:: Force Shutdown
R1:: Adjust thrower speed based on currently selected basket's distance
L1:: Toggle basket throw mode (No Assist/Slight Assist)
R2:: Reverse
L2:: Accelerate
R3:: Move on the X-axis
L3:: Rotate
Circle:: Semi-autonomous throw
Square:: Debug throw data collection{fn-att}
Triangle:: Toggle thrower
Up DPAD:: Increase thrower speed by 10
Down DPAD:: Decrease thrower speed by 10
