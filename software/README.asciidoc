:1: https://github.com/ut-robotics/picr22-boot-camp-programming
:2: https://github.com/ut-robotics/robot-basketball-manager
   _____ _____ _____ _____ 
  |     |     |     |     |      Team %placeholder% software,
  | %   | p   | l   | a   |        made for our funny basketball robot.
  |_____|_____|_____|_____|      Main programmer: Timo654
  |     |     |     |     |      Platform: Linux
  | h   | o   | l   | d   |      Python version: 3.9
  |_____|_____|_____|_____|      Dependencies: numpy, openCV, pyrealsense2, numba, tomli,
  |     |     |     |     |        websocket_client, pyserial, pyPS4Controller
  | e   | r   | c   | e   |      Amazing logo generated by ChatGPT
  |_____|_____|_____|_____|
  

This code is built on top of {1}[PICR22 Boot Camp code].

Hosting a referee server is required to run this, see {2}[here] for more info.

## Modules in the code

### main.py
Main file, where all the magic happens. Contains states and all the required game logic to bring it all together.

### robot_test.py
Utility for easily testing whether all 3 wheels of the robot move as intended.

### config_colors.py
Utility to configure colors. Check log for detailed instructions.

### Color.py
Contains data of the colors that are detected. Also contains data used to display the colors in the debug view.

### camera.py
Contains a ICamera interface that describes methods required by the image processing module. Also contains an example implementation for Intel RealSense cameras (RealsenseCamera) and OpenCV web cameras (OpenCVCamera).

### image_processor.py 
Main module for image processing. Is responsible for image color and feature segmentation. 

### motion.py
Contains  OmniRobot class for moving the motors.

### helper.py
Contains helper functions that are frequently used across modules.

### helper_jit.py
Contains JIT helper functions that are frequently used across modules.

### logger.py
Contains the logger we use to print fancy text to terminal and files to disk.

### referee.py
Module for interacting with the referee command server. Used to save commands to a queue.

### states.py
Contains enums of all possible states. Used in multiple modules, which is why it's split here instead of being in main.

### ds4_control.py
Contains RobotDS4 class, which lets us use a DualShock 4 controller to control the robot.


## How to use

* Segmentation module installation:
```
cd segment_module
pip3.9 install .
```

* Installing required libraries:
```
pip install -r requirements.txt
```

* Running color configurator:
```
mkdir colors
touch colors/colors.pkl
python3.9 config_colors.py
```

* Running the main code:
```
python3.9 main.py
```

* If the program cannot connect to a server, verify that the {1}[referee server] IP in config.toml is correct - the robot will not work otherwise.
