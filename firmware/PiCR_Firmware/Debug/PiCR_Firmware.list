
PiCR_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a580  0800a580  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a580  0800a580  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a580  0800a580  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  200001e8  0800a770  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800a770  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001666e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037da  00000000  00000000  00036886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218f3  00000000  00000000  0003c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017136  00000000  00000000  0005dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c79c3  00000000  00000000  000750f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013cab4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000591c  00000000  00000000  0013cb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a4a4 	.word	0x0800a4a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800a4a4 	.word	0x0800a4a4

08000218 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000220:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000224:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d013      	beq.n	8000258 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000230:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000234:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000238:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800023c:	2b00      	cmp	r3, #0
 800023e:	d00b      	beq.n	8000258 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000240:	e000      	b.n	8000244 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000242:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000244:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0f9      	beq.n	8000242 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800024e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000258:	687b      	ldr	r3, [r7, #4]
}
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <CDC_On_Receive>:
		return min;
	}
	return value;
}

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b0a      	cmp	r3, #10
 8000278:	d10f      	bne.n	800029a <CDC_On_Receive+0x32>
		memcpy(&command, buffer, sizeof(Command));
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <CDC_On_Receive+0x40>)
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6810      	ldr	r0, [r2, #0]
 8000280:	6851      	ldr	r1, [r2, #4]
 8000282:	c303      	stmia	r3!, {r0, r1}
 8000284:	8912      	ldrh	r2, [r2, #8]
 8000286:	801a      	strh	r2, [r3, #0]

		if (command.delimiter == 0xAAAA) {
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <CDC_On_Receive+0x40>)
 800028a:	891b      	ldrh	r3, [r3, #8]
 800028c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000290:	4293      	cmp	r3, r2
 8000292:	d102      	bne.n	800029a <CDC_On_Receive+0x32>
			isCommandReceived = 1;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <CDC_On_Receive+0x44>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	200003cc 	.word	0x200003cc
 80002ac:	200003d6 	.word	0x200003d6

080002b0 <_write>:
		TIM1->CCR3 = 0;
	}
}

int _write(int file, char *ptr, int len)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]
 80002c4:	e009      	b.n	80002da <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	60ba      	str	r2, [r7, #8]
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ffa2 	bl	8000218 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	3301      	adds	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	697a      	ldr	r2, [r7, #20]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	429a      	cmp	r2, r3
 80002e0:	dbf1      	blt.n	80002c6 <_write+0x16>
  return len;
 80002e2:	687b      	ldr	r3, [r7, #4]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3718      	adds	r7, #24
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fe34 	bl	8000f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f867 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 fb27 	bl	800094c <MX_GPIO_Init>
  MX_USB_Device_Init();
 80002fe:	f008 fe91 	bl	8009024 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000302:	f000 f8ad 	bl	8000460 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000306:	f000 f957 	bl	80005b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800030a:	f000 f9a9 	bl	8000660 <MX_TIM3_Init>
  MX_TIM4_Init();
 800030e:	f000 f9fd 	bl	800070c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000312:	f000 fa87 	bl	8000824 <MX_TIM8_Init>
  MX_TIM6_Init();
 8000316:	f000 fa4f 	bl	80007b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	Feedback feedback = { .speed1 = 0, .speed2 = 0, .speed3 = 0, .delimiter =
 800031a:	2300      	movs	r3, #0
 800031c:	803b      	strh	r3, [r7, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	807b      	strh	r3, [r7, #2]
 8000322:	2300      	movs	r3, #0
 8000324:	80bb      	strh	r3, [r7, #4]
 8000326:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800032a:	80fb      	strh	r3, [r7, #6]
			0xAAAA };

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800032c:	2104      	movs	r1, #4
 800032e:	481b      	ldr	r0, [pc, #108]	; (800039c <main+0xb0>)
 8000330:	f004 f8f0 	bl	8004514 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000334:	2104      	movs	r1, #4
 8000336:	481a      	ldr	r0, [pc, #104]	; (80003a0 <main+0xb4>)
 8000338:	f004 f8ec 	bl	8004514 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800033c:	2104      	movs	r1, #4
 800033e:	4819      	ldr	r0, [pc, #100]	; (80003a4 <main+0xb8>)
 8000340:	f004 f8e8 	bl	8004514 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 8000344:	210c      	movs	r1, #12
 8000346:	4818      	ldr	r0, [pc, #96]	; (80003a8 <main+0xbc>)
 8000348:	f003 ff3e 	bl	80041c8 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 800034c:	4817      	ldr	r0, [pc, #92]	; (80003ac <main+0xc0>)
 800034e:	f003 fe79 	bl	8004044 <HAL_TIM_Base_Start_IT>
	while (1) {
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Test\n");
 8000352:	4817      	ldr	r0, [pc, #92]	; (80003b0 <main+0xc4>)
 8000354:	f009 fc16 	bl	8009b84 <puts>
		if (isCommandReceived) { // (2)
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <main+0xc8>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d018      	beq.n	8000394 <main+0xa8>
			isCommandReceived = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <main+0xc8>)
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036c:	4812      	ldr	r0, [pc, #72]	; (80003b8 <main+0xcc>)
 800036e:	f001 f933 	bl	80015d8 <HAL_GPIO_TogglePin>

			feedback.speed1 = motor1Control.speed;
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <main+0xd0>)
 8000374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000378:	803b      	strh	r3, [r7, #0]
			feedback.speed2 = motor2Control.speed;
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <main+0xd4>)
 800037c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000380:	807b      	strh	r3, [r7, #2]
			feedback.speed3 = motor3Control.speed;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <main+0xd8>)
 8000384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000388:	80bb      	strh	r3, [r7, #4]

			CDC_Transmit_FS((uint8_t*) &feedback, sizeof(feedback));
 800038a:	463b      	mov	r3, r7
 800038c:	2108      	movs	r1, #8
 800038e:	4618      	mov	r0, r3
 8000390:	f008 ff0a 	bl	80091a8 <CDC_Transmit_FS>
		}
		HAL_Delay(250);
 8000394:	20fa      	movs	r0, #250	; 0xfa
 8000396:	f000 fe53 	bl	8001040 <HAL_Delay>
		printf("Test\n");
 800039a:	e7da      	b.n	8000352 <main+0x66>
 800039c:	20000250 	.word	0x20000250
 80003a0:	2000029c 	.word	0x2000029c
 80003a4:	200002e8 	.word	0x200002e8
 80003a8:	20000204 	.word	0x20000204
 80003ac:	20000334 	.word	0x20000334
 80003b0:	0800a4bc 	.word	0x0800a4bc
 80003b4:	200003d6 	.word	0x200003d6
 80003b8:	48000400 	.word	0x48000400
 80003bc:	200003d8 	.word	0x200003d8
 80003c0:	200003e4 	.word	0x200003e4
 80003c4:	200003f0 	.word	0x200003f0

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b094      	sub	sp, #80	; 0x50
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	2238      	movs	r2, #56	; 0x38
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f009 fb5e 	bl	8009a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ee:	f002 fe41 	bl	8003074 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fc:	2340      	movs	r3, #64	; 0x40
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	2302      	movs	r3, #2
 8000406:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000408:	2301      	movs	r3, #1
 800040a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800040c:	230c      	movs	r3, #12
 800040e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000410:	2302      	movs	r3, #2
 8000412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000414:	2304      	movs	r3, #4
 8000416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000418:	2302      	movs	r3, #2
 800041a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	4618      	mov	r0, r3
 8000422:	f002 fecb 	bl	80031bc <HAL_RCC_OscConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800042c:	f000 fb20 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000430:	230f      	movs	r3, #15
 8000432:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000434:	2301      	movs	r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f003 f9cf 	bl	80037ec <HAL_RCC_ClockConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000454:	f000 fb0c 	bl	8000a70 <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3750      	adds	r7, #80	; 0x50
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b098      	sub	sp, #96	; 0x60
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000466:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2234      	movs	r2, #52	; 0x34
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f009 fb03 	bl	8009a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000492:	4b47      	ldr	r3, [pc, #284]	; (80005b0 <MX_TIM1_Init+0x150>)
 8000494:	4a47      	ldr	r2, [pc, #284]	; (80005b4 <MX_TIM1_Init+0x154>)
 8000496:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000498:	4b45      	ldr	r3, [pc, #276]	; (80005b0 <MX_TIM1_Init+0x150>)
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b44      	ldr	r3, [pc, #272]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6535;
 80004a4:	4b42      	ldr	r3, [pc, #264]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004a6:	f641 1287 	movw	r2, #6535	; 0x1987
 80004aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b40      	ldr	r3, [pc, #256]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004b2:	4b3f      	ldr	r3, [pc, #252]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b8:	4b3d      	ldr	r3, [pc, #244]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004be:	483c      	ldr	r0, [pc, #240]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004c0:	f003 fe2a 	bl	8004118 <HAL_TIM_PWM_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f000 fad1 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004de:	4619      	mov	r1, r3
 80004e0:	4833      	ldr	r0, [pc, #204]	; (80005b0 <MX_TIM1_Init+0x150>)
 80004e2:	f004 fd65 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004ec:	f000 fac0 	bl	8000a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f0:	2360      	movs	r3, #96	; 0x60
 80004f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f8:	2300      	movs	r3, #0
 80004fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fc:	2300      	movs	r3, #0
 80004fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000504:	2300      	movs	r3, #0
 8000506:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000508:	2300      	movs	r3, #0
 800050a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000510:	2200      	movs	r2, #0
 8000512:	4619      	mov	r1, r3
 8000514:	4826      	ldr	r0, [pc, #152]	; (80005b0 <MX_TIM1_Init+0x150>)
 8000516:	f004 f88b 	bl	8004630 <HAL_TIM_PWM_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000520:	f000 faa6 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000524:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000528:	2204      	movs	r2, #4
 800052a:	4619      	mov	r1, r3
 800052c:	4820      	ldr	r0, [pc, #128]	; (80005b0 <MX_TIM1_Init+0x150>)
 800052e:	f004 f87f 	bl	8004630 <HAL_TIM_PWM_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000538:	f000 fa9a 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800053c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000540:	2208      	movs	r2, #8
 8000542:	4619      	mov	r1, r3
 8000544:	481a      	ldr	r0, [pc, #104]	; (80005b0 <MX_TIM1_Init+0x150>)
 8000546:	f004 f873 	bl	8004630 <HAL_TIM_PWM_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000550:	f000 fa8e 	bl	8000a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800057a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <MX_TIM1_Init+0x150>)
 8000592:	f004 fd8f 	bl	80050b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800059c:	f000 fa68 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <MX_TIM1_Init+0x150>)
 80005a2:	f000 fb87 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 80005a6:	bf00      	nop
 80005a8:	3760      	adds	r7, #96	; 0x60
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000204 	.word	0x20000204
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2224      	movs	r2, #36	; 0x24
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f009 fa66 	bl	8009a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_TIM2_Init+0xa4>)
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <MX_TIM2_Init+0xa4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_TIM2_Init+0xa4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <MX_TIM2_Init+0xa4>)
 80005ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_TIM2_Init+0xa4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_TIM2_Init+0xa4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005fe:	2303      	movs	r3, #3
 8000600:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000616:	2301      	movs	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <MX_TIM2_Init+0xa4>)
 800062a:	f003 fecd 	bl	80043c8 <HAL_TIM_Encoder_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000634:	f000 fa1c 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_TIM2_Init+0xa4>)
 8000646:	f004 fcb3 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000650:	f000 fa0e 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	3730      	adds	r7, #48	; 0x30
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000250 	.word	0x20000250

08000660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2224      	movs	r2, #36	; 0x24
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f009 fa12 	bl	8009a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_TIM3_Init+0xa4>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <MX_TIM3_Init+0xa8>)
 8000682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_TIM3_Init+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_TIM3_Init+0xa4>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM3_Init+0xa4>)
 8000692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM3_Init+0xa4>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM3_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006a4:	2303      	movs	r3, #3
 80006a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ac:	2301      	movs	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006bc:	2301      	movs	r3, #1
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_TIM3_Init+0xa4>)
 80006d0:	f003 fe7a 	bl	80043c8 <HAL_TIM_Encoder_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006da:	f000 f9c9 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_TIM3_Init+0xa4>)
 80006ec:	f004 fc60 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006f6:	f000 f9bb 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	; 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000029c 	.word	0x2000029c
 8000708:	40000400 	.word	0x40000400

0800070c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2224      	movs	r2, #36	; 0x24
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f009 f9bc 	bl	8009a98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_TIM4_Init+0xa4>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_TIM4_Init+0xa8>)
 800072e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_TIM4_Init+0xa4>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_TIM4_Init+0xa4>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_TIM4_Init+0xa4>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_TIM4_Init+0xa4>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_TIM4_Init+0xa4>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000750:	2303      	movs	r3, #3
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000768:	2301      	movs	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_TIM4_Init+0xa4>)
 800077c:	f003 fe24 	bl	80043c8 <HAL_TIM_Encoder_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000786:	f000 f973 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_TIM4_Init+0xa4>)
 8000798:	f004 fc0a 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80007a2:	f000 f965 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	; 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200002e8 	.word	0x200002e8
 80007b4:	40000800 	.word	0x40000800

080007b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_TIM6_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_TIM6_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_TIM6_Init+0x64>)
 80007d0:	2209      	movs	r2, #9
 80007d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_TIM6_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 39999;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_TIM6_Init+0x64>)
 80007dc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80007e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_TIM6_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM6_Init+0x64>)
 80007ea:	f003 fbd3 	bl	8003f94 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f93c 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM6_Init+0x64>)
 8000806:	f004 fbd3 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f92e 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000334 	.word	0x20000334
 8000820:	40001000 	.word	0x40001000

08000824 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b098      	sub	sp, #96	; 0x60
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2234      	movs	r2, #52	; 0x34
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f009 f921 	bl	8009a98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <MX_TIM8_Init+0x120>)
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <MX_TIM8_Init+0x124>)
 800085a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800085c:	4b39      	ldr	r3, [pc, #228]	; (8000944 <MX_TIM8_Init+0x120>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b38      	ldr	r3, [pc, #224]	; (8000944 <MX_TIM8_Init+0x120>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000868:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_TIM8_Init+0x120>)
 800086a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_TIM8_Init+0x120>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <MX_TIM8_Init+0x120>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MX_TIM8_Init+0x120>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000882:	4830      	ldr	r0, [pc, #192]	; (8000944 <MX_TIM8_Init+0x120>)
 8000884:	f003 fc48 	bl	8004118 <HAL_TIM_PWM_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f8ef 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800089e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a2:	4619      	mov	r1, r3
 80008a4:	4827      	ldr	r0, [pc, #156]	; (8000944 <MX_TIM8_Init+0x120>)
 80008a6:	f004 fb83 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80008b0:	f000 f8de 	bl	8000a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b4:	2360      	movs	r3, #96	; 0x60
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c0:	2300      	movs	r3, #0
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_TIM8_Init+0x120>)
 80008da:	f003 fea9 	bl	8004630 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008e4:	f000 f8c4 	bl	8000a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800090e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM8_Init+0x120>)
 8000926:	f004 fbc5 	bl	80050b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000930:	f000 f89e 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM8_Init+0x120>)
 8000936:	f000 f9bd 	bl	8000cb4 <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3760      	adds	r7, #96	; 0x60
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000380 	.word	0x20000380
 8000948:	40013400 	.word	0x40013400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a3e      	ldr	r2, [pc, #248]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0320 	and.w	r3, r3, #32
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <MX_GPIO_Init+0x114>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a38      	ldr	r2, [pc, #224]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a32      	ldr	r2, [pc, #200]	; (8000a60 <MX_GPIO_Init+0x114>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <MX_GPIO_Init+0x114>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_GPIO_Init+0x114>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <MX_GPIO_Init+0x114>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_GPIO_Init+0x114>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M3_Dir_Pin|M2_Dir_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2103      	movs	r1, #3
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <MX_GPIO_Init+0x118>)
 80009c8:	f000 fdee 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_Sleep_Pin|M1_Dir_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	210c      	movs	r1, #12
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f000 fde8 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009e0:	f000 fde2 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M3_Dir_Pin M2_Dir_Pin */
  GPIO_InitStruct.Pin = M3_Dir_Pin|M2_Dir_Pin;
 80009e4:	2303      	movs	r3, #3
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <MX_GPIO_Init+0x118>)
 80009fc:	f000 fc52 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8000a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <MX_GPIO_Init+0x120>)
 8000a18:	f000 fc44 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_Sleep_Pin M1_Dir_Pin */
  GPIO_InitStruct.Pin = M_Sleep_Pin|M1_Dir_Pin;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fc35 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_GPIO_Init+0x11c>)
 8000a54:	f000 fc26 	bl	80012a4 <HAL_GPIO_Init>

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48001400 	.word	0x48001400
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	48001800 	.word	0x48001800

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10c      	bne.n	8000af0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_TIM_PWM_MspInit+0x60>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_TIM_PWM_MspInit+0x60>)
 8000adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_TIM_PWM_MspInit+0x60>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000aee:	e010      	b.n	8000b12 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_TIM_PWM_MspInit+0x64>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10b      	bne.n	8000b12 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_TIM_PWM_MspInit+0x60>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_TIM_PWM_MspInit+0x60>)
 8000b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b04:	6613      	str	r3, [r2, #96]	; 0x60
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_TIM_PWM_MspInit+0x60>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40013400 	.word	0x40013400

08000b2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	; 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b4c:	d129      	bne.n	8000ba2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b4e:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a44      	ldr	r2, [pc, #272]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f000 fb82 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ba0:	e05b      	b.n	8000c5a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d129      	bne.n	8000c00 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	4a2c      	ldr	r2, [pc, #176]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000bdc:	2350      	movs	r3, #80	; 0x50
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bec:	2302      	movs	r3, #2
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f000 fb53 	bl	80012a4 <HAL_GPIO_Init>
}
 8000bfe:	e02c      	b.n	8000c5a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_TIM_Encoder_MspInit+0x140>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d127      	bne.n	8000c5a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_TIM_Encoder_MspInit+0x138>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c3a:	23c0      	movs	r3, #192	; 0xc0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x144>)
 8000c56:	f000 fb25 	bl	80012a4 <HAL_GPIO_Init>
}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	; 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	40000800 	.word	0x40000800
 8000c70:	48000400 	.word	0x48000400

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_TIM_Base_MspInit+0x38>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10b      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40001000 	.word	0x40001000
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a24      	ldr	r2, [pc, #144]	; (8000d64 <HAL_TIM_MspPostInit+0xb0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d11e      	bne.n	8000d14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000cee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fac9 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000d12:	e022      	b.n	8000d5a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_TIM_MspPostInit+0xb8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11d      	bne.n	8000d5a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_TIM_MspPostInit+0xb4>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f000 faa5 	bl	80012a4 <HAL_GPIO_Init>
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40013400 	.word	0x40013400

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f922 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <USB_LP_IRQHandler+0x10>)
 8000dca:	f000 fd26 	bl	800181a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200010a8 	.word	0x200010a8

08000dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
	}

return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_isatty>:

int _isatty(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f008 fdca 	bl	8009a44 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20008000 	.word	0x20008000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	200003fc 	.word	0x200003fc
 8000ee4:	200015d0 	.word	0x200015d0

08000ee8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopForever+0xe>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopForever+0x16>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f008 fd89 	bl	8009a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f7ff f9d5 	bl	80002ec <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   r0, =_estack
 8000f44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000f50:	0800a588 	.word	0x0800a588
  ldr r2, =_sbss
 8000f54:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000f58:	200015cc 	.word	0x200015cc

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>

08000f5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f95b 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f80e 	bl	8000f90 <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	e001      	b.n	8000f84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f80:	f7ff fd7c 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f84:	79fb      	ldrb	r3, [r7, #7]

}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_InitTick+0x68>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d022      	beq.n	8000fea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_InitTick+0x6c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_InitTick+0x68>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f966 	bl	800128a <HAL_SYSTICK_Config>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10f      	bne.n	8000fe4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d809      	bhi.n	8000fde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd2:	f000 f932 	bl	800123a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_InitTick+0x70>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e007      	b.n	8000fee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e004      	b.n	8000fee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e001      	b.n	8000fee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x1c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x20>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4a03      	ldr	r2, [pc, #12]	; (8001020 <HAL_IncTick+0x1c>)
 8001014:	6013      	str	r3, [r2, #0]
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000400 	.word	0x20000400
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000400 	.word	0x20000400

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d004      	beq.n	8001064 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001064:	bf00      	nop
 8001066:	f7ff ffdf 	bl	8001028 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	429a      	cmp	r2, r3
 8001074:	d8f7      	bhi.n	8001066 <HAL_Delay+0x26>
  {
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000008 	.word	0x20000008

08001084 <__NVIC_SetPriorityGrouping>:
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff29 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff40 	bl	80010cc <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff90 	bl	8001178 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff33 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa4 	bl	80011e0 <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b2:	e15a      	b.n	800156a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145a:	d01f      	beq.n	800149c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x2f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x2f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001484:	2305      	movs	r3, #5
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001488:	2306      	movs	r3, #6
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_GPIO_Init+0x2e8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae9d 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43d9      	mvns	r1, r3
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	400b      	ands	r3, r1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b08b      	sub	sp, #44	; 0x2c
 8001610:	af06      	add	r7, sp, #24
 8001612:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0d7      	b.n	80017ce <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f007 ff00 	bl	8009438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fdec 	bl	8005222 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e04c      	b.n	80016ea <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3301      	adds	r3, #1
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	b298      	uxth	r0, r3
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	3336      	adds	r3, #54	; 0x36
 800168e:	4602      	mov	r2, r0
 8001690:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	3303      	adds	r3, #3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	3338      	adds	r3, #56	; 0x38
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	333c      	adds	r3, #60	; 0x3c
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3340      	adds	r3, #64	; 0x40
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3ad      	bcc.n	8001650 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e044      	b.n	8001784 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	f203 1369 	addw	r3, r3, #361	; 0x169
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3301      	adds	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3b5      	bcc.n	80016fa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	687e      	ldr	r6, [r7, #4]
 8001796:	466d      	mov	r5, sp
 8001798:	f106 0410 	add.w	r4, r6, #16
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	602b      	str	r3, [r5, #0]
 80017a4:	1d33      	adds	r3, r6, #4
 80017a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	f003 fd55 	bl	8005258 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d102      	bne.n	80017cc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 fc29 	bl	800301e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_Start+0x16>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e012      	b.n	8001812 <HAL_PCD_Start+0x3c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fcfb 	bl	80051f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 ff14 	bl	8007630 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f005 ff19 	bl	800765e <USB_ReadInterrupts>
 800182c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fb26 	bl	8001e8a <PCD_EP_ISR_Handler>

    return;
 800183e:	e110      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d013      	beq.n	8001872 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185c:	b292      	uxth	r2, r2
 800185e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f007 fe79 	bl	800955a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8fc 	bl	8001a68 <HAL_PCD_SetAddress>

    return;
 8001870:	e0f7      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001894:	e0e5      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018b8:	e0d3      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d034      	beq.n	800192e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0204 	bic.w	r2, r2, #4
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0208 	bic.w	r2, r2, #8
 80018ee:	b292      	uxth	r2, r2
 80018f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f008 f81b 	bl	8009944 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f007 fe5c 	bl	80095cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001926:	b292      	uxth	r2, r2
 8001928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800192c:	e099      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001934:	2b00      	cmp	r3, #0
 8001936:	d027      	beq.n	8001988 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0208 	orr.w	r2, r2, #8
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001962:	b292      	uxth	r2, r2
 8001964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0204 	orr.w	r2, r2, #4
 800197a:	b292      	uxth	r2, r2
 800197c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f007 fe09 	bl	8009598 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001986:	e06c      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	d040      	beq.n	8001a14 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a4:	b292      	uxth	r2, r2
 80019a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d12b      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0204 	orr.w	r2, r2, #4
 80019c6:	b292      	uxth	r2, r2
 80019c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0208 	orr.w	r2, r2, #8
 80019de:	b292      	uxth	r2, r2
 80019e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a02:	2101      	movs	r1, #1
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f007 ff9d 	bl	8009944 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001a0a:	e02a      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f007 fdc3 	bl	8009598 <HAL_PCD_SuspendCallback>
    return;
 8001a12:	e026      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00f      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f007 fd81 	bl	800953e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a3c:	e011      	b.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00c      	beq.n	8001a62 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a60:	bf00      	nop
  }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_PCD_SetAddress+0x1a>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e013      	b.n	8001aaa <HAL_PCD_SetAddress+0x42>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f005 fdb4 	bl	8007608 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	4608      	mov	r0, r1
 8001abc:	4611      	mov	r1, r2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	70fb      	strb	r3, [r7, #3]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	803b      	strh	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da0e      	bge.n	8001af6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	705a      	strb	r2, [r3, #1]
 8001af4:	e00e      	b.n	8001b14 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0207 	and.w	r2, r3, #7
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b20:	883a      	ldrh	r2, [r7, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	78ba      	ldrb	r2, [r7, #2]
 8001b2a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	785b      	ldrb	r3, [r3, #1]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3e:	78bb      	ldrb	r3, [r7, #2]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d102      	bne.n	8001b4a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_EP_Open+0xa6>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e00e      	b.n	8001b76 <HAL_PCD_EP_Open+0xc4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fb98 	bl	800529c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da0e      	bge.n	8001bb0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00e      	b.n	8001bce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_EP_Close+0x6a>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e00e      	b.n	8001c06 <HAL_PCD_EP_Close+0x88>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fee4 	bl	80059c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f003 0207 	and.w	r2, r3, #7
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f897 	bl	8005d9e <USB_EPStartXfer>
 8001c70:	e005      	b.n	8001c7e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 f890 	bl	8005d9e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 0207 	and.w	r2, r3, #7
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2201      	movs	r2, #1
 8001d02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6979      	ldr	r1, [r7, #20]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 f83c 	bl	8005d9e <USB_EPStartXfer>
 8001d26:	e005      	b.n	8001d34 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6979      	ldr	r1, [r7, #20]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 f835 	bl	8005d9e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0207 	and.w	r2, r3, #7
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d901      	bls.n	8001d5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e03e      	b.n	8001dda <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0e      	bge.n	8001d82 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00c      	b.n	8001d9c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_PCD_EP_SetStall+0x7e>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e00e      	b.n	8001dda <HAL_PCD_EP_SetStall+0x9c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fb1d 	bl	800740a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d901      	bls.n	8001e00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da0e      	bge.n	8001e26 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0207 	and.w	r2, r3, #7
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_EP_ClrStall+0x82>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e00e      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0xa0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f005 fb1a 	bl	80074ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b096      	sub	sp, #88	; 0x58
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e92:	e39c      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ea0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001eae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 815e 	bne.w	8002174 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d150      	bne.n	8001f66 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed4:	81fb      	strh	r3, [r7, #14]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3328      	adds	r3, #40	; 0x28
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	441a      	add	r2, r3
 8001f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f22:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f24:	2100      	movs	r1, #0
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f007 faef 	bl	800950a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 834a 	beq.w	80025ce <PCD_EP_ISR_Handler+0x744>
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8345 	bne.w	80025ce <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f64:	e333      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d032      	beq.n	8001fea <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001faa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f005 fb9f 	bl	8007702 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	823b      	strh	r3, [r7, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	8a3a      	ldrh	r2, [r7, #16]
 8001fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 fa64 	bl	80094b0 <HAL_PCD_SetupStageCallback>
 8001fe8:	e2f1      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fea:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f280 82ed 	bge.w	80025ce <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002000:	4013      	ands	r3, r2
 8002002:	83fb      	strh	r3, [r7, #30]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	8bfa      	ldrh	r2, [r7, #30]
 800200a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200e:	b292      	uxth	r2, r2
 8002010:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	4413      	add	r3, r2
 800202c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002038:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800203a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <PCD_EP_ISR_Handler+0x1ec>
 8002042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d015      	beq.n	8002076 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	6959      	ldr	r1, [r3, #20]
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002058:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800205a:	b29b      	uxth	r3, r3
 800205c:	f005 fb51 	bl	8007702 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	441a      	add	r2, r3
 800206a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800206e:	2100      	movs	r1, #0
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f007 fa2f 	bl	80094d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 82a3 	bne.w	80025ce <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4413      	add	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b3e      	cmp	r3, #62	; 0x3e
 80020ae:	d918      	bls.n	80020e2 <PCD_EP_ISR_Handler+0x258>
 80020b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	647b      	str	r3, [r7, #68]	; 0x44
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <PCD_EP_ISR_Handler+0x240>
 80020c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c6:	3b01      	subs	r3, #1
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020da:	b29a      	uxth	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	801a      	strh	r2, [r3, #0]
 80020e0:	e029      	b.n	8002136 <PCD_EP_ISR_Handler+0x2ac>
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d112      	bne.n	8002110 <PCD_EP_ISR_Handler+0x286>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002108:	b29a      	uxth	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	e012      	b.n	8002136 <PCD_EP_ISR_Handler+0x2ac>
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	647b      	str	r3, [r7, #68]	; 0x44
 8002118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <PCD_EP_ISR_Handler+0x2a0>
 8002124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002126:	3301      	adds	r3, #1
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	b29b      	uxth	r3, r3
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	b29a      	uxth	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	827b      	strh	r3, [r7, #18]
 8002148:	8a7b      	ldrh	r3, [r7, #18]
 800214a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800214e:	827b      	strh	r3, [r7, #18]
 8002150:	8a7b      	ldrh	r3, [r7, #18]
 8002152:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002156:	827b      	strh	r3, [r7, #18]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	8a7b      	ldrh	r3, [r7, #18]
 800215e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216e:	b29b      	uxth	r3, r3
 8002170:	8013      	strh	r3, [r2, #0]
 8002172:	e22c      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002188:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800218c:	2b00      	cmp	r3, #0
 800218e:	f280 80f6 	bge.w	800237e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021a8:	4013      	ands	r3, r2
 80021aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80021c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c4:	b292      	uxth	r2, r2
 80021c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021c8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	7b1b      	ldrb	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d123      	bne.n	800222e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800220e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 808e 	beq.w	8002334 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221e:	6959      	ldr	r1, [r3, #20]
 8002220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002222:	88da      	ldrh	r2, [r3, #6]
 8002224:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002228:	f005 fa6b 	bl	8007702 <USB_ReadPMA>
 800222c:	e082      	b.n	8002334 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800222e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002230:	78db      	ldrb	r3, [r3, #3]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d10a      	bne.n	800224c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002236:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800223a:	461a      	mov	r2, r3
 800223c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9d3 	bl	80025ea <HAL_PCD_EP_DB_Receive>
 8002244:	4603      	mov	r3, r0
 8002246:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800224a:	e073      	b.n	8002334 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800227c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800228c:	b29b      	uxth	r3, r3
 800228e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d022      	beq.n	80022f0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80022d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02c      	beq.n	8002334 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	6959      	ldr	r1, [r3, #20]
 80022e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e4:	891a      	ldrh	r2, [r3, #8]
 80022e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022ea:	f005 fa0a 	bl	8007702 <USB_ReadPMA>
 80022ee:	e021      	b.n	8002334 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	4413      	add	r3, r2
 800230a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002314:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002318:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002326:	6959      	ldr	r1, [r3, #20]
 8002328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232a:	895a      	ldrh	r2, [r3, #10]
 800232c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002330:	f005 f9e7 	bl	8007702 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800233c:	441a      	add	r2, r3
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800234a:	441a      	add	r2, r3
 800234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <PCD_EP_ISR_Handler+0x4da>
 8002358:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d206      	bcs.n	8002372 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f007 f8b2 	bl	80094d4 <HAL_PCD_DataOutStageCallback>
 8002370:	e005      	b.n	800237e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002378:	4618      	mov	r0, r3
 800237a:	f003 fd10 	bl	8005d9e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800237e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8121 	beq.w	80025ce <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800238c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80023d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80023dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023de:	78db      	ldrb	r3, [r3, #3]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	f000 80a2 	beq.w	800252a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80023e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ee:	7b1b      	ldrb	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8093 	beq.w	800251c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d046      	beq.n	8002490 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	785b      	ldrb	r3, [r3, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d126      	bne.n	8002458 <PCD_EP_ISR_Handler+0x5ce>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	4413      	add	r3, r2
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	00da      	lsls	r2, r3, #3
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	4413      	add	r3, r2
 800242c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800243c:	b29a      	uxth	r2, r3
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002450:	b29a      	uxth	r2, r3
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	e061      	b.n	800251c <PCD_EP_ISR_Handler+0x692>
 8002458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245a:	785b      	ldrb	r3, [r3, #1]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d15d      	bne.n	800251c <PCD_EP_ISR_Handler+0x692>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	4413      	add	r3, r2
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00da      	lsls	r2, r3, #3
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	4413      	add	r3, r2
 8002482:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	e045      	b.n	800251c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d126      	bne.n	80024ec <PCD_EP_ISR_Handler+0x662>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	4413      	add	r3, r2
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	00da      	lsls	r2, r3, #3
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	4413      	add	r3, r2
 80024c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e017      	b.n	800251c <PCD_EP_ISR_Handler+0x692>
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d113      	bne.n	800251c <PCD_EP_ISR_Handler+0x692>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002502:	4413      	add	r3, r2
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00da      	lsls	r2, r3, #3
 800250c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250e:	4413      	add	r3, r2
 8002510:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002514:	63bb      	str	r3, [r7, #56]	; 0x38
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2200      	movs	r2, #0
 800251a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f006 fff1 	bl	800950a <HAL_PCD_DataInStageCallback>
 8002528:	e051      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800252a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d144      	bne.n	80025c0 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	4413      	add	r3, r2
 8002550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800255e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002566:	429a      	cmp	r2, r3
 8002568:	d907      	bls.n	800257a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800256a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002576:	619a      	str	r2, [r3, #24]
 8002578:	e002      	b.n	8002580 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f006 ffbb 	bl	800950a <HAL_PCD_DataInStageCallback>
 8002594:	e01b      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800259e:	441a      	add	r2, r3
 80025a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025ac:	441a      	add	r2, r3
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fbf0 	bl	8005d9e <USB_EPStartXfer>
 80025be:	e006      	b.n	80025ce <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025c4:	461a      	mov	r2, r3
 80025c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f917 	bl	80027fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b21b      	sxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f6ff ac5a 	blt.w	8001e94 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3758      	adds	r7, #88	; 0x58
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b088      	sub	sp, #32
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	4613      	mov	r3, r2
 80025f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d07c      	beq.n	80026fc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	4413      	add	r3, r2
 800261c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002626:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	8b7b      	ldrh	r3, [r7, #26]
 800262e:	429a      	cmp	r2, r3
 8002630:	d306      	bcc.n	8002640 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	8b7b      	ldrh	r3, [r7, #26]
 8002638:	1ad2      	subs	r2, r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	619a      	str	r2, [r3, #24]
 800263e:	e002      	b.n	8002646 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d123      	bne.n	8002696 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	833b      	strh	r3, [r7, #24]
 800266a:	8b3b      	ldrh	r3, [r7, #24]
 800266c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002670:	833b      	strh	r3, [r7, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	8b3b      	ldrh	r3, [r7, #24]
 8002682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002692:	b29b      	uxth	r3, r3
 8002694:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01f      	beq.n	80026e0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	82fb      	strh	r3, [r7, #22]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	441a      	add	r2, r3
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026dc:	b29b      	uxth	r3, r3
 80026de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026e0:	8b7b      	ldrh	r3, [r7, #26]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8085 	beq.w	80027f2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	6959      	ldr	r1, [r3, #20]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	891a      	ldrh	r2, [r3, #8]
 80026f4:	8b7b      	ldrh	r3, [r7, #26]
 80026f6:	f005 f804 	bl	8007702 <USB_ReadPMA>
 80026fa:	e07a      	b.n	80027f2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4413      	add	r3, r2
 8002716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002720:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	429a      	cmp	r2, r3
 800272a:	d306      	bcc.n	800273a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	619a      	str	r2, [r3, #24]
 8002738:	e002      	b.n	8002740 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d123      	bne.n	8002790 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	83fb      	strh	r3, [r7, #30]
 8002764:	8bfb      	ldrh	r3, [r7, #30]
 8002766:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800276a:	83fb      	strh	r3, [r7, #30]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	8bfb      	ldrh	r3, [r7, #30]
 800277c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	b29b      	uxth	r3, r3
 800278e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	83bb      	strh	r3, [r7, #28]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8bbb      	ldrh	r3, [r7, #28]
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027da:	8b7b      	ldrh	r3, [r7, #26]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	895a      	ldrh	r2, [r3, #10]
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	f004 ff88 	bl	8007702 <USB_ReadPMA>
    }
  }

  return count;
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a2      	sub	sp, #136	; 0x88
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 81c5 	beq.w	8002ba0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281e:	b29b      	uxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4413      	add	r3, r2
 8002830:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002846:	429a      	cmp	r2, r3
 8002848:	d907      	bls.n	800285a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002852:	1ad2      	subs	r2, r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	e002      	b.n	8002860 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 80b9 	bne.w	80029dc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d126      	bne.n	80028c0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	4413      	add	r3, r2
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00da      	lsls	r2, r3, #3
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	4413      	add	r3, r2
 8002894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e01a      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d116      	bne.n	80028f6 <HAL_PCD_EP_DB_Transmit+0xfa>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	4413      	add	r3, r2
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	00da      	lsls	r2, r3, #3
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d126      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x156>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	00da      	lsls	r2, r3, #3
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002936:	b29a      	uxth	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294a:	b29a      	uxth	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	e017      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x186>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d113      	bne.n	8002982 <HAL_PCD_EP_DB_Transmit+0x186>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	4413      	add	r3, r2
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	4413      	add	r3, r2
 8002976:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f006 fdbe 	bl	800950a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 82d2 	beq.w	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b4:	827b      	strh	r3, [r7, #18]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	441a      	add	r2, r3
 80029c4:	8a7b      	ldrh	r3, [r7, #18]
 80029c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	8013      	strh	r3, [r2, #0]
 80029da:	e2b0      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d021      	beq.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	441a      	add	r2, r3
 8002a12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	f040 8284 	bne.w	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	441a      	add	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d309      	bcc.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	621a      	str	r2, [r3, #32]
 8002a70:	e015      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002a7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a88:	e009      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d155      	bne.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x356>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	4413      	add	r3, r2
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	00da      	lsls	r2, r3, #3
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ad2:	d916      	bls.n	8002b02 <HAL_PCD_EP_DB_Transmit+0x306>
 8002ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	e043      	b.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d112      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x332>
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e02d      	b.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_PCD_EP_DB_Transmit+0x348>
 8002b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b40:	3301      	adds	r3, #1
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	801a      	strh	r2, [r3, #0]
 8002b50:	e01b      	b.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d117      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6e:	4413      	add	r3, r2
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	00da      	lsls	r2, r3, #3
 8002b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6959      	ldr	r1, [r3, #20]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	891a      	ldrh	r2, [r3, #8]
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f004 fd70 	bl	800767e <USB_WritePMA>
 8002b9e:	e1ce      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d307      	bcc.n	8002be4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bdc:	1ad2      	subs	r2, r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	619a      	str	r2, [r3, #24]
 8002be2:	e002      	b.n	8002bea <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 80c4 	bne.w	8002d7c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d126      	bne.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x44e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c10:	4413      	add	r3, r2
 8002c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	00da      	lsls	r2, r3, #3
 8002c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c22:	667b      	str	r3, [r7, #100]	; 0x64
 8002c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c46:	801a      	strh	r2, [r3, #0]
 8002c48:	e01a      	b.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d116      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	673b      	str	r3, [r7, #112]	; 0x70
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c66:	4413      	add	r3, r2
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	00da      	lsls	r2, r3, #3
 8002c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d12f      	bne.n	8002cee <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	00da      	lsls	r2, r3, #3
 8002cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	e017      	b.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x522>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d113      	bne.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x522>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d04:	4413      	add	r3, r2
 8002d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00da      	lsls	r2, r3, #3
 8002d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d10:	4413      	add	r3, r2
 8002d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f006 fbf0 	bl	800950a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 8104 	bne.w	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8013      	strh	r3, [r2, #0]
 8002d7a:	e0e0      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d121      	bne.n	8002dca <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	441a      	add	r2, r3
 8002db2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	f040 80b4 	bne.w	8002f3e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dde:	441a      	add	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dec:	441a      	add	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d309      	bcc.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	621a      	str	r2, [r3, #32]
 8002e10:	e015      	b.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e28:	e009      	b.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2200      	movs	r2, #0
 8002e34:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	663b      	str	r3, [r7, #96]	; 0x60
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	785b      	ldrb	r3, [r3, #1]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d155      	bne.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e60:	4413      	add	r3, r2
 8002e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	00da      	lsls	r2, r3, #3
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
 8002e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e76:	2b3e      	cmp	r3, #62	; 0x3e
 8002e78:	d916      	bls.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x694>
 8002e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	677b      	str	r3, [r7, #116]	; 0x74
 8002e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	e040      	b.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d112      	bne.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	e02a      	b.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	677b      	str	r3, [r7, #116]	; 0x74
 8002eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	677b      	str	r3, [r7, #116]	; 0x74
 8002eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	029b      	lsls	r3, r3, #10
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	e018      	b.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	785b      	ldrb	r3, [r3, #1]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d114      	bne.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f0e:	4413      	add	r3, r2
 8002f10:	663b      	str	r3, [r7, #96]	; 0x60
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6959      	ldr	r1, [r3, #20]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	895a      	ldrh	r2, [r3, #10]
 8002f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f004 fba0 	bl	800767e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f58:	823b      	strh	r3, [r7, #16]
 8002f5a:	8a3b      	ldrh	r3, [r7, #16]
 8002f5c:	f083 0310 	eor.w	r3, r3, #16
 8002f60:	823b      	strh	r3, [r7, #16]
 8002f62:	8a3b      	ldrh	r3, [r7, #16]
 8002f64:	f083 0320 	eor.w	r3, r3, #32
 8002f68:	823b      	strh	r3, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	8a3b      	ldrh	r3, [r7, #16]
 8002f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3788      	adds	r7, #136	; 0x88
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e009      	b.n	8002fe2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fce:	897a      	ldrh	r2, [r7, #10]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fe2:	893b      	ldrh	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2200      	movs	r2, #0
 8002fec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	80da      	strh	r2, [r3, #6]
 8002ff6:	e00b      	b.n	8003010 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	b29a      	uxth	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	b29a      	uxth	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003042:	b29b      	uxth	r3, r3
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003056:	b29b      	uxth	r3, r3
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d141      	bne.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003082:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308e:	d131      	bne.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003096:	4a46      	ldr	r2, [pc, #280]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800309c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a8:	4a41      	ldr	r2, [pc, #260]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030b0:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2232      	movs	r2, #50	; 0x32
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	4a3f      	ldr	r2, [pc, #252]	; (80031b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	0c9b      	lsrs	r3, r3, #18
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c6:	e002      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030da:	d102      	bne.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f2      	bne.n	80030c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d158      	bne.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e057      	b.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f4:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fa:	4a2d      	ldr	r2, [pc, #180]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003104:	e04d      	b.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d141      	bne.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800310e:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d131      	bne.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2232      	movs	r2, #50	; 0x32
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003152:	e002      	b.n	800315a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3b01      	subs	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d102      	bne.n	800316e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f2      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	d112      	bne.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e011      	b.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003190:	e007      	b.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40007000 	.word	0x40007000
 80031b4:	20000000 	.word	0x20000000
 80031b8:	431bde83 	.word	0x431bde83

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e306      	b.n	80037dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b97      	ldr	r3, [pc, #604]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e4:	4b94      	ldr	r3, [pc, #592]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b0c      	cmp	r3, #12
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_OscConfig+0x3e>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e2e1      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b85      	ldr	r3, [pc, #532]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a84      	ldr	r2, [pc, #528]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7e      	ldr	r2, [pc, #504]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7b      	ldr	r2, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b78      	ldr	r3, [pc, #480]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a77      	ldr	r2, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a74      	ldr	r2, [pc, #464]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fed8 	bl	8001028 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd fed4 	bl	8001028 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e2a6      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd fec4 	bl	8001028 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fd fec0 	bl	8001028 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e292      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	4b60      	ldr	r3, [pc, #384]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d075      	beq.n	80033be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d2:	4b59      	ldr	r3, [pc, #356]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032dc:	4b56      	ldr	r3, [pc, #344]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_OscConfig+0x136>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_OscConfig+0x13c>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d11f      	bne.n	8003338 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x154>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e265      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	4946      	ldr	r1, [pc, #280]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003324:	4b45      	ldr	r3, [pc, #276]	; (800343c <HAL_RCC_OscConfig+0x280>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fe31 	bl	8000f90 <HAL_InitTick>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d043      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e251      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d023      	beq.n	8003388 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fd fe6c 	bl	8001028 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003354:	f7fd fe68 	bl	8001028 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e23a      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	061b      	lsls	r3, r3, #24
 8003380:	492d      	ldr	r1, [pc, #180]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
 8003386:	e01a      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 800338e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fe48 	bl	8001028 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fd fe44 	bl	8001028 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e216      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x1e0>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d041      	beq.n	800344e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01c      	beq.n	800340c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fd fe21 	bl	8001028 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fd fe1d 	bl	8001028 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1ef      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ef      	beq.n	80033ea <HAL_RCC_OscConfig+0x22e>
 800340a:	e020      	b.n	800344e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fd fe04 	bl	8001028 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003422:	e00d      	b.n	8003440 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7fd fe00 	bl	8001028 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d906      	bls.n	8003440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1d2      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003440:	4b8c      	ldr	r3, [pc, #560]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ea      	bne.n	8003424 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80a6 	beq.w	80035a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003460:	4b84      	ldr	r3, [pc, #528]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_OscConfig+0x2b4>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x2b6>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003492:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_OscConfig+0x4bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x4bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4bc>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fd fdbd 	bl	8001028 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fd fdb9 	bl	8001028 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e18b      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c4:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x4bc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_RCC_OscConfig+0x32e>
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e8:	e024      	b.n	8003534 <HAL_RCC_OscConfig+0x378>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d110      	bne.n	8003514 <HAL_RCC_OscConfig+0x358>
 80034f2:	4b60      	ldr	r3, [pc, #384]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003512:	e00f      	b.n	8003534 <HAL_RCC_OscConfig+0x378>
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fd fd74 	bl	8001028 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fd fd70 	bl	8001028 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e140      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355a:	4b46      	ldr	r3, [pc, #280]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ed      	beq.n	8003544 <HAL_RCC_OscConfig+0x388>
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356a:	f7fd fd5d 	bl	8001028 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fd fd59 	bl	8001028 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e129      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ed      	bne.n	8003572 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003596:	7ffb      	ldrb	r3, [r7, #31]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	4a34      	ldr	r2, [pc, #208]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03c      	beq.n	800362e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c2:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fd2c 	bl	8001028 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d4:	f7fd fd28 	bl	8001028 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0fa      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <HAL_RCC_OscConfig+0x418>
 80035f4:	e01b      	b.n	800362e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80035f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fd fd0f 	bl	8001028 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800360e:	f7fd fd0b 	bl	8001028 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0dd      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ef      	bne.n	800360e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80d1 	beq.w	80037da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b0c      	cmp	r3, #12
 8003642:	f000 808b 	beq.w	800375c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d15e      	bne.n	800370c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <HAL_RCC_OscConfig+0x4b8>)
 8003654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fd fce5 	bl	8001028 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003660:	e00c      	b.n	800367c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd fce1 	bl	8001028 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d905      	bls.n	800367c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0b3      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ec      	bne.n	8003662 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003688:	4b56      	ldr	r3, [pc, #344]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_RCC_OscConfig+0x62c>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6a11      	ldr	r1, [r2, #32]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003698:	3a01      	subs	r2, #1
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036a2:	0212      	lsls	r2, r2, #8
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036aa:	0852      	lsrs	r2, r2, #1
 80036ac:	3a01      	subs	r2, #1
 80036ae:	0552      	lsls	r2, r2, #21
 80036b0:	4311      	orrs	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036b6:	0852      	lsrs	r2, r2, #1
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0652      	lsls	r2, r2, #25
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036c2:	06d2      	lsls	r2, r2, #27
 80036c4:	430a      	orrs	r2, r1
 80036c6:	4947      	ldr	r1, [pc, #284]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b45      	ldr	r3, [pc, #276]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a44      	ldr	r2, [pc, #272]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 80036d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d8:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a41      	ldr	r2, [pc, #260]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fca0 	bl	8001028 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd fc9c 	bl	8001028 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e06e      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x530>
 800370a:	e066      	b.n	80037da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a34      	ldr	r2, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800372a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800372e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003732:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fc78 	bl	8001028 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fd fc74 	bl	8001028 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e046      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x580>
 800375a:	e03e      	b.n	80037da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e039      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_RCC_OscConfig+0x628>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	429a      	cmp	r2, r3
 800377a:	d12c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	3b01      	subs	r3, #1
 8003788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d123      	bne.n	80037d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d11b      	bne.n	80037d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d113      	bne.n	80037d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	3b01      	subs	r3, #1
 80037d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	019f800c 	.word	0x019f800c

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e11e      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b91      	ldr	r3, [pc, #580]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d910      	bls.n	8003834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b8e      	ldr	r3, [pc, #568]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 020f 	bic.w	r2, r3, #15
 800381a:	498c      	ldr	r1, [pc, #560]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b8a      	ldr	r3, [pc, #552]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e106      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d073      	beq.n	8003928 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d129      	bne.n	800389c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003848:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0f4      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003858:	f000 f966 	bl	8003b28 <RCC_GetSysClockFreqFromPLLSource>
 800385c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4a7c      	ldr	r2, [pc, #496]	; (8003a54 <HAL_RCC_ClockConfig+0x268>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d93f      	bls.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003866:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d033      	beq.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003882:	2b00      	cmp	r3, #0
 8003884:	d12f      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003886:	4b72      	ldr	r3, [pc, #456]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388e:	4a70      	ldr	r2, [pc, #448]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e024      	b.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a4:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0c6      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b4:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0be      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038c4:	f000 f8ce 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a61      	ldr	r2, [pc, #388]	; (8003a54 <HAL_RCC_ClockConfig+0x268>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d909      	bls.n	80038e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038da:	4a5d      	ldr	r2, [pc, #372]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b5a      	ldr	r3, [pc, #360]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4957      	ldr	r1, [pc, #348]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fd fb96 	bl	8001028 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fd fb92 	bl	8001028 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e095      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d023      	beq.n	800397c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a42      	ldr	r2, [pc, #264]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800394a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003960:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4936      	ldr	r1, [pc, #216]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
 800397a:	e008      	b.n	800398e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d105      	bne.n	800398e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398e:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d21d      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 020f 	bic.w	r2, r3, #15
 80039a4:	4929      	ldr	r1, [pc, #164]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039ac:	f7fd fb3c 	bl	8001028 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fd fb38 	bl	8001028 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e03b      	b.n	8003a42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1ed      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4917      	ldr	r1, [pc, #92]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490f      	ldr	r1, [pc, #60]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a16:	f000 f825 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490c      	ldr	r1, [pc, #48]	; (8003a58 <HAL_RCC_ClockConfig+0x26c>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x270>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_RCC_ClockConfig+0x274>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd faa8 	bl	8000f90 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40022000 	.word	0x40022000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	04c4b400 	.word	0x04c4b400
 8003a58:	0800a50c 	.word	0x0800a50c
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d102      	bne.n	8003a7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e047      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a88:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e03e      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d136      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	0a12      	lsrs	r2, r2, #8
 8003ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	0a12      	lsrs	r2, r2, #8
 8003ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
      break;
 8003aea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0e5b      	lsrs	r3, r3, #25
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e001      	b.n	8003b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b0c:	693b      	ldr	r3, [r7, #16]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	00f42400 	.word	0x00f42400
 8003b24:	007a1200 	.word	0x007a1200

08003b28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d10c      	bne.n	8003b66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	0a12      	lsrs	r2, r2, #8
 8003b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	617b      	str	r3, [r7, #20]
    break;
 8003b64:	e00c      	b.n	8003b80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	0a12      	lsrs	r2, r2, #8
 8003b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
    break;
 8003b7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0e5b      	lsrs	r3, r3, #25
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b9a:	687b      	ldr	r3, [r7, #4]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	007a1200 	.word	0x007a1200
 8003bb0:	00f42400 	.word	0x00f42400

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8098 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	4a3f      	ldr	r2, [pc, #252]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	; 0x58
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fa0d 	bl	8001028 <HAL_GetTick>
 8003c0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c10:	e009      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd fa09 	bl	8001028 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	74fb      	strb	r3, [r7, #19]
        break;
 8003c24:	e005      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ef      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d159      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d019      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c54:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd f9c9 	bl	8001028 <HAL_GetTick>
 8003c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd f9c5 	bl	8001028 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d902      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	74fb      	strb	r3, [r7, #19]
            break;
 8003cb0:	e006      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ec      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	74bb      	strb	r3, [r7, #18]
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf0:	7c7b      	ldrb	r3, [r7, #17]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4ba6      	ldr	r3, [pc, #664]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	4aa5      	ldr	r2, [pc, #660]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4ba0      	ldr	r3, [pc, #640]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	499c      	ldr	r1, [pc, #624]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d30:	4b97      	ldr	r3, [pc, #604]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 020c 	bic.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4994      	ldr	r1, [pc, #592]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d52:	4b8f      	ldr	r3, [pc, #572]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	498b      	ldr	r1, [pc, #556]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d74:	4b86      	ldr	r3, [pc, #536]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	4983      	ldr	r1, [pc, #524]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d96:	4b7e      	ldr	r3, [pc, #504]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	497a      	ldr	r1, [pc, #488]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db8:	4b75      	ldr	r3, [pc, #468]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	4972      	ldr	r1, [pc, #456]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dda:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4969      	ldr	r1, [pc, #420]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dfc:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4961      	ldr	r1, [pc, #388]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	4958      	ldr	r1, [pc, #352]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	4950      	ldr	r1, [pc, #320]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a4a      	ldr	r2, [pc, #296]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d015      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	4942      	ldr	r1, [pc, #264]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a3c      	ldr	r2, [pc, #240]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d015      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb0:	4b37      	ldr	r3, [pc, #220]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4934      	ldr	r1, [pc, #208]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ece:	d105      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed0:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a2e      	ldr	r2, [pc, #184]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d015      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee8:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	4926      	ldr	r1, [pc, #152]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f06:	d105      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a20      	ldr	r2, [pc, #128]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	4918      	ldr	r1, [pc, #96]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f58:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	490a      	ldr	r1, [pc, #40]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f76:	d105      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40021000 	.word	0x40021000

08003f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e049      	b.n	800403a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fe5a 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fc40 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d001      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04a      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a21      	ldr	r2, [pc, #132]	; (8004100 <HAL_TIM_Base_Start_IT+0xbc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x6c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d013      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <HAL_TIM_Base_Start_IT+0xc0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <HAL_TIM_Base_Start_IT+0xc4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x6c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1a      	ldr	r2, [pc, #104]	; (800410c <HAL_TIM_Base_Start_IT+0xc8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x6c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_TIM_Base_Start_IT+0xcc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d115      	bne.n	80040dc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_TIM_Base_Start_IT+0xd0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d015      	beq.n	80040ee <HAL_TIM_Base_Start_IT+0xaa>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d011      	beq.n	80040ee <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	e008      	b.n	80040ee <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e000      	b.n	80040f0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40013400 	.word	0x40013400
 8004110:	40014000 	.word	0x40014000
 8004114:	00010007 	.word	0x00010007

08004118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e049      	b.n	80041be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc fcc0 	bl	8000ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fb7e 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_PWM_Start+0x24>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e03c      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_PWM_Start+0x3e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e02f      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start+0x58>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e022      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d109      	bne.n	800423a <HAL_TIM_PWM_Start+0x72>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e015      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d109      	bne.n	8004254 <HAL_TIM_PWM_Start+0x8c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e008      	b.n	8004266 <HAL_TIM_PWM_Start+0x9e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e097      	b.n	800439e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start+0xb6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427c:	e023      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xc6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	e01b      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xd6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429c:	e013      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xe6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	e00b      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xf6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_PWM_Start+0xfe>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fe48 	bl	8004f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <HAL_TIM_PWM_Start+0x1e0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_TIM_PWM_Start+0x13e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_TIM_PWM_Start+0x1e4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIM_PWM_Start+0x13e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <HAL_TIM_PWM_Start+0x1e8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIM_PWM_Start+0x13e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <HAL_TIM_PWM_Start+0x1ec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIM_PWM_Start+0x13e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_TIM_PWM_Start+0x1f0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_Start+0x142>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_TIM_PWM_Start+0x144>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_TIM_PWM_Start+0x1e0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <HAL_TIM_PWM_Start+0x194>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d013      	beq.n	800435c <HAL_TIM_PWM_Start+0x194>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a20      	ldr	r2, [pc, #128]	; (80043bc <HAL_TIM_PWM_Start+0x1f4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <HAL_TIM_PWM_Start+0x194>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <HAL_TIM_PWM_Start+0x1f8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_TIM_PWM_Start+0x194>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_TIM_PWM_Start+0x1e4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_TIM_PWM_Start+0x194>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d115      	bne.n	8004388 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b06      	cmp	r3, #6
 800436c:	d015      	beq.n	800439a <HAL_TIM_PWM_Start+0x1d2>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004374:	d011      	beq.n	800439a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	e008      	b.n	800439a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e000      	b.n	800439c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40013400 	.word	0x40013400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	00010007 	.word	0x00010007

080043c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e097      	b.n	800450c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fc fb9b 	bl	8000b2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f000 fa1b 	bl	8004858 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	4313      	orrs	r3, r2
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004468:	f023 030c 	bic.w	r3, r3, #12
 800446c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	4313      	orrs	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	031b      	lsls	r3, r3, #12
 8004498:	4313      	orrs	r3, r2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4313      	orrs	r3, r2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004524:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800452c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004534:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800453c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d110      	bne.n	8004566 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800454a:	7b7b      	ldrb	r3, [r7, #13]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e069      	b.n	8004628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004564:	e031      	b.n	80045ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d110      	bne.n	800458e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004572:	7b3b      	ldrb	r3, [r7, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e055      	b.n	8004628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458c:	e01d      	b.n	80045ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800459a:	7b7b      	ldrb	r3, [r7, #13]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d102      	bne.n	80045a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045a0:	7b3b      	ldrb	r3, [r7, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03e      	b.n	8004628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_TIM_Encoder_Start+0xc4>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d008      	beq.n	80045e8 <HAL_TIM_Encoder_Start+0xd4>
 80045d6:	e00f      	b.n	80045f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fcbf 	bl	8004f64 <TIM_CCxChannelCmd>
      break;
 80045e6:	e016      	b.n	8004616 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	2104      	movs	r1, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fcb7 	bl	8004f64 <TIM_CCxChannelCmd>
      break;
 80045f6:	e00e      	b.n	8004616 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fcaf 	bl	8004f64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	2104      	movs	r1, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fca8 	bl	8004f64 <TIM_CCxChannelCmd>
      break;
 8004614:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800464a:	2302      	movs	r3, #2
 800464c:	e0ff      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b14      	cmp	r3, #20
 800465a:	f200 80f0 	bhi.w	800483e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	080046b9 	.word	0x080046b9
 8004668:	0800483f 	.word	0x0800483f
 800466c:	0800483f 	.word	0x0800483f
 8004670:	0800483f 	.word	0x0800483f
 8004674:	080046f9 	.word	0x080046f9
 8004678:	0800483f 	.word	0x0800483f
 800467c:	0800483f 	.word	0x0800483f
 8004680:	0800483f 	.word	0x0800483f
 8004684:	0800473b 	.word	0x0800473b
 8004688:	0800483f 	.word	0x0800483f
 800468c:	0800483f 	.word	0x0800483f
 8004690:	0800483f 	.word	0x0800483f
 8004694:	0800477b 	.word	0x0800477b
 8004698:	0800483f 	.word	0x0800483f
 800469c:	0800483f 	.word	0x0800483f
 80046a0:	0800483f 	.word	0x0800483f
 80046a4:	080047bd 	.word	0x080047bd
 80046a8:	0800483f 	.word	0x0800483f
 80046ac:	0800483f 	.word	0x0800483f
 80046b0:	0800483f 	.word	0x0800483f
 80046b4:	080047fd 	.word	0x080047fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f95a 	bl	8004978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
      break;
 80046f6:	e0a5      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f9ca 	bl	8004a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]
      break;
 8004738:	e084      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa33 	bl	8004bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0208 	orr.w	r2, r2, #8
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e064      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fa9b 	bl	8004cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e043      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb04 	bl	8004dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0208 	orr.w	r2, r2, #8
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0204 	bic.w	r2, r2, #4
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047fa:	e023      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fb48 	bl	8004e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004816:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800483c:	e002      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	75fb      	strb	r3, [r7, #23]
      break;
 8004842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3c      	ldr	r2, [pc, #240]	; (800495c <TIM_Base_SetConfig+0x104>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a39      	ldr	r2, [pc, #228]	; (8004960 <TIM_Base_SetConfig+0x108>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a38      	ldr	r2, [pc, #224]	; (8004964 <TIM_Base_SetConfig+0x10c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a37      	ldr	r2, [pc, #220]	; (8004968 <TIM_Base_SetConfig+0x110>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2d      	ldr	r2, [pc, #180]	; (800495c <TIM_Base_SetConfig+0x104>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01b      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d017      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <TIM_Base_SetConfig+0x108>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a29      	ldr	r2, [pc, #164]	; (8004964 <TIM_Base_SetConfig+0x10c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00f      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_Base_SetConfig+0x110>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <TIM_Base_SetConfig+0x114>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a26      	ldr	r2, [pc, #152]	; (8004970 <TIM_Base_SetConfig+0x118>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <TIM_Base_SetConfig+0x11c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d108      	bne.n	80048f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a10      	ldr	r2, [pc, #64]	; (800495c <TIM_Base_SetConfig+0x104>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00f      	beq.n	8004940 <TIM_Base_SetConfig+0xe8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a11      	ldr	r2, [pc, #68]	; (8004968 <TIM_Base_SetConfig+0x110>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_Base_SetConfig+0xe8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <TIM_Base_SetConfig+0x114>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_Base_SetConfig+0xe8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <TIM_Base_SetConfig+0x118>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0xe8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a0e      	ldr	r2, [pc, #56]	; (8004974 <TIM_Base_SetConfig+0x11c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d103      	bne.n	8004948 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	615a      	str	r2, [r3, #20]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40013400 	.word	0x40013400
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800

08004978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 0302 	bic.w	r3, r3, #2
 80049c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <TIM_OC1_SetConfig+0x10c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00f      	beq.n	80049f8 <TIM_OC1_SetConfig+0x80>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <TIM_OC1_SetConfig+0x110>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00b      	beq.n	80049f8 <TIM_OC1_SetConfig+0x80>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <TIM_OC1_SetConfig+0x114>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_OC1_SetConfig+0x80>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <TIM_OC1_SetConfig+0x118>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_OC1_SetConfig+0x80>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <TIM_OC1_SetConfig+0x11c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10c      	bne.n	8004a12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 0308 	bic.w	r3, r3, #8
 80049fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <TIM_OC1_SetConfig+0x10c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_OC1_SetConfig+0xc2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	; (8004a88 <TIM_OC1_SetConfig+0x110>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_OC1_SetConfig+0xc2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <TIM_OC1_SetConfig+0x114>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_OC1_SetConfig+0xc2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <TIM_OC1_SetConfig+0x118>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_OC1_SetConfig+0xc2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <TIM_OC1_SetConfig+0x11c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d111      	bne.n	8004a5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40013400 	.word	0x40013400
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0210 	bic.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0320 	bic.w	r3, r3, #32
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <TIM_OC2_SetConfig+0x100>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC2_SetConfig+0x6c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <TIM_OC2_SetConfig+0x104>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10d      	bne.n	8004b20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <TIM_OC2_SetConfig+0x100>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00f      	beq.n	8004b48 <TIM_OC2_SetConfig+0xb0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <TIM_OC2_SetConfig+0x104>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00b      	beq.n	8004b48 <TIM_OC2_SetConfig+0xb0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <TIM_OC2_SetConfig+0x108>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d007      	beq.n	8004b48 <TIM_OC2_SetConfig+0xb0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <TIM_OC2_SetConfig+0x10c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC2_SetConfig+0xb0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <TIM_OC2_SetConfig+0x110>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d113      	bne.n	8004b70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <TIM_OC3_SetConfig+0xfc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC3_SetConfig+0x6a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a26      	ldr	r2, [pc, #152]	; (8004cac <TIM_OC3_SetConfig+0x100>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10d      	bne.n	8004c32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <TIM_OC3_SetConfig+0xfc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_OC3_SetConfig+0xae>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <TIM_OC3_SetConfig+0x100>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_OC3_SetConfig+0xae>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <TIM_OC3_SetConfig+0x104>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_OC3_SetConfig+0xae>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <TIM_OC3_SetConfig+0x108>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_OC3_SetConfig+0xae>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <TIM_OC3_SetConfig+0x10c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d113      	bne.n	8004c82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40013400 	.word	0x40013400
 8004cb0:	40014000 	.word	0x40014000
 8004cb4:	40014400 	.word	0x40014400
 8004cb8:	40014800 	.word	0x40014800

08004cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	031b      	lsls	r3, r3, #12
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <TIM_OC4_SetConfig+0x100>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_OC4_SetConfig+0x6c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <TIM_OC4_SetConfig+0x104>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d10d      	bne.n	8004d44 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	031b      	lsls	r3, r3, #12
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <TIM_OC4_SetConfig+0x100>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00f      	beq.n	8004d6c <TIM_OC4_SetConfig+0xb0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <TIM_OC4_SetConfig+0x104>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_OC4_SetConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <TIM_OC4_SetConfig+0x108>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_OC4_SetConfig+0xb0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <TIM_OC4_SetConfig+0x10c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_OC4_SetConfig+0xb0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <TIM_OC4_SetConfig+0x110>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d113      	bne.n	8004d94 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	019b      	lsls	r3, r3, #6
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800

08004dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <TIM_OC5_SetConfig+0xb4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_OC5_SetConfig+0x7a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <TIM_OC5_SetConfig+0xb8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_OC5_SetConfig+0x7a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <TIM_OC5_SetConfig+0xbc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_OC5_SetConfig+0x7a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <TIM_OC5_SetConfig+0xc0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_OC5_SetConfig+0x7a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <TIM_OC5_SetConfig+0xc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d109      	bne.n	8004e5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <TIM_OC6_SetConfig+0xb8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00f      	beq.n	8004f14 <TIM_OC6_SetConfig+0x7c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <TIM_OC6_SetConfig+0xbc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <TIM_OC6_SetConfig+0x7c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <TIM_OC6_SetConfig+0xc0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d007      	beq.n	8004f14 <TIM_OC6_SetConfig+0x7c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <TIM_OC6_SetConfig+0xc4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_OC6_SetConfig+0x7c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <TIM_OC6_SetConfig+0xc8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d109      	bne.n	8004f28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800

08004f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2201      	movs	r2, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	401a      	ands	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e065      	b.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d013      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10c      	bne.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40014000 	.word	0x40014000

080050b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e087      	b.n	80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a27      	ldr	r2, [pc, #156]	; (80051ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d106      	bne.n	800516c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d126      	bne.n	80051ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	051b      	lsls	r3, r3, #20
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d106      	bne.n	80051ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40013400 	.word	0x40013400

080051f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005204:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005208:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800522a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800522e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	b29b      	uxth	r3, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	b29b      	uxth	r3, r3
 8005240:	4013      	ands	r3, r2
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005258:	b084      	sub	sp, #16
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	f107 0014 	add.w	r0, r7, #20
 8005266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	b004      	add	sp, #16
 8005298:	4770      	bx	lr
	...

0800529c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800529c:	b480      	push	{r7}
 800529e:	b09d      	sub	sp, #116	; 0x74
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d81f      	bhi.n	800530e <USB_ActivateEndpoint+0x72>
 80052ce:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <USB_ActivateEndpoint+0x38>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005317 	.word	0x08005317
 80052e0:	080052f3 	.word	0x080052f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80052e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80052f0:	e012      	b.n	8005318 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80052f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80052fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80052fe:	e00b      	b.n	8005318 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005300:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005308:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800530c:	e004      	b.n	8005318 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005314:	e000      	b.n	8005318 <USB_ActivateEndpoint+0x7c>
      break;
 8005316:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	b21b      	sxth	r3, r3
 800534a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	b21a      	sxth	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	b21b      	sxth	r3, r3
 800535a:	4313      	orrs	r3, r2
 800535c:	b21b      	sxth	r3, r3
 800535e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	441a      	add	r2, r3
 800536c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005380:	b29b      	uxth	r3, r3
 8005382:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	7b1b      	ldrb	r3, [r3, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 8149 	bne.w	8005620 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8084 	beq.w	80054a0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4413      	add	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	00da      	lsls	r2, r3, #3
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	88db      	ldrh	r3, [r3, #6]
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	827b      	strh	r3, [r7, #18]
 80053da:	8a7b      	ldrh	r3, [r7, #18]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <USB_ActivateEndpoint+0x180>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	823b      	strh	r3, [r7, #16]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	8a3b      	ldrh	r3, [r7, #16]
 8005408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005418:	b29b      	uxth	r3, r3
 800541a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d020      	beq.n	8005466 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543a:	81bb      	strh	r3, [r7, #12]
 800543c:	89bb      	ldrh	r3, [r7, #12]
 800543e:	f083 0320 	eor.w	r3, r3, #32
 8005442:	81bb      	strh	r3, [r7, #12]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	89bb      	ldrh	r3, [r7, #12]
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]
 8005464:	e2a6      	b.n	80059b4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547c:	81fb      	strh	r3, [r7, #14]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	89fb      	ldrh	r3, [r7, #14]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]
 800549e:	e289      	b.n	80059b4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	4413      	add	r3, r2
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	00da      	lsls	r2, r3, #3
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	4413      	add	r3, r2
 80054be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	88db      	ldrh	r3, [r3, #6]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	4413      	add	r3, r2
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	00da      	lsls	r2, r3, #3
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	4413      	add	r3, r2
 80054f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b3e      	cmp	r3, #62	; 0x3e
 80054fe:	d918      	bls.n	8005532 <USB_ActivateEndpoint+0x296>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	66bb      	str	r3, [r7, #104]	; 0x68
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <USB_ActivateEndpoint+0x27e>
 8005514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005516:	3b01      	subs	r3, #1
 8005518:	66bb      	str	r3, [r7, #104]	; 0x68
 800551a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800551c:	b29b      	uxth	r3, r3
 800551e:	029b      	lsls	r3, r3, #10
 8005520:	b29b      	uxth	r3, r3
 8005522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552a:	b29a      	uxth	r2, r3
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e029      	b.n	8005586 <USB_ActivateEndpoint+0x2ea>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d112      	bne.n	8005560 <USB_ActivateEndpoint+0x2c4>
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005544:	b29a      	uxth	r2, r3
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005558:	b29a      	uxth	r2, r3
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	801a      	strh	r2, [r3, #0]
 800555e:	e012      	b.n	8005586 <USB_ActivateEndpoint+0x2ea>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	66bb      	str	r3, [r7, #104]	; 0x68
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <USB_ActivateEndpoint+0x2de>
 8005574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005576:	3301      	adds	r3, #1
 8005578:	66bb      	str	r3, [r7, #104]	; 0x68
 800557a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29a      	uxth	r2, r3
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	847b      	strh	r3, [r7, #34]	; 0x22
 8005594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01b      	beq.n	80055d6 <USB_ActivateEndpoint+0x33a>
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	843b      	strh	r3, [r7, #32]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	8c3b      	ldrh	r3, [r7, #32]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ec:	83fb      	strh	r3, [r7, #30]
 80055ee:	8bfb      	ldrh	r3, [r7, #30]
 80055f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055f4:	83fb      	strh	r3, [r7, #30]
 80055f6:	8bfb      	ldrh	r3, [r7, #30]
 80055f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055fc:	83fb      	strh	r3, [r7, #30]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	441a      	add	r2, r3
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
 800561e:	e1c9      	b.n	80059b4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d11e      	bne.n	8005666 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005658:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
 8005664:	e01d      	b.n	80056a2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b2:	4413      	add	r3, r2
 80056b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	00da      	lsls	r2, r3, #3
 80056bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	891b      	ldrh	r3, [r3, #8]
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	657b      	str	r3, [r7, #84]	; 0x54
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e6:	4413      	add	r3, r2
 80056e8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	00da      	lsls	r2, r3, #3
 80056f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f2:	4413      	add	r3, r2
 80056f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056f8:	653b      	str	r3, [r7, #80]	; 0x50
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	895b      	ldrh	r3, [r3, #10]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	b29b      	uxth	r3, r3
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005708:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 8093 	bne.w	800583a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005724:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <USB_ActivateEndpoint+0x4cc>
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	441a      	add	r2, r3
 8005752:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005764:	b29b      	uxth	r3, r3
 8005766:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005776:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <USB_ActivateEndpoint+0x51c>
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80057d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80057d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057de:	873b      	strh	r3, [r7, #56]	; 0x38
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005816:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
 8005838:	e0bc      	b.n	80059b4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800584a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800584e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01d      	beq.n	8005892 <USB_ActivateEndpoint+0x5f6>
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80058a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01d      	beq.n	80058ea <USB_ActivateEndpoint+0x64e>
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d024      	beq.n	800593c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800590c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005910:	f083 0320 	eor.w	r3, r3, #32
 8005914:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	b29b      	uxth	r3, r3
 8005938:	8013      	strh	r3, [r2, #0]
 800593a:	e01d      	b.n	8005978 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005952:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80059a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80059b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3774      	adds	r7, #116	; 0x74
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b08d      	sub	sp, #52	; 0x34
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	7b1b      	ldrb	r3, [r3, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 808e 	bne.w	8005af4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d044      	beq.n	8005a6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	81bb      	strh	r3, [r7, #12]
 80059ee:	89bb      	ldrh	r3, [r7, #12]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01b      	beq.n	8005a30 <USB_DeactivateEndpoint+0x6c>
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	817b      	strh	r3, [r7, #10]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	897b      	ldrh	r3, [r7, #10]
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a46:	813b      	strh	r3, [r7, #8]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	893b      	ldrh	r3, [r7, #8]
 8005a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	8013      	strh	r3, [r2, #0]
 8005a68:	e192      	b.n	8005d90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	827b      	strh	r3, [r7, #18]
 8005a78:	8a7b      	ldrh	r3, [r7, #18]
 8005a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01b      	beq.n	8005aba <USB_DeactivateEndpoint+0xf6>
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	823b      	strh	r3, [r7, #16]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	441a      	add	r2, r3
 8005aa4:	8a3b      	ldrh	r3, [r7, #16]
 8005aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	81fb      	strh	r3, [r7, #14]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	441a      	add	r2, r3
 8005adc:	89fb      	ldrh	r3, [r7, #14]
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
 8005af2:	e14d      	b.n	8005d90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f040 80a5 	bne.w	8005c48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	843b      	strh	r3, [r7, #32]
 8005b0c:	8c3b      	ldrh	r3, [r7, #32]
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01b      	beq.n	8005b4e <USB_DeactivateEndpoint+0x18a>
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	83fb      	strh	r3, [r7, #30]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8bfb      	ldrh	r3, [r7, #30]
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	83bb      	strh	r3, [r7, #28]
 8005b5c:	8bbb      	ldrh	r3, [r7, #28]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <USB_DeactivateEndpoint+0x1da>
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	837b      	strh	r3, [r7, #26]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	8b7b      	ldrh	r3, [r7, #26]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	833b      	strh	r3, [r7, #24]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	8b3b      	ldrh	r3, [r7, #24]
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bec:	82fb      	strh	r3, [r7, #22]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	441a      	add	r2, r3
 8005bf8:	8afb      	ldrh	r3, [r7, #22]
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c24:	82bb      	strh	r3, [r7, #20]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8abb      	ldrh	r3, [r7, #20]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	e0a3      	b.n	8005d90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <USB_DeactivateEndpoint+0x2d4>
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01b      	beq.n	8005ce8 <USB_DeactivateEndpoint+0x324>
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	441a      	add	r2, r3
 8005cd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3734      	adds	r7, #52	; 0x34
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b0c2      	sub	sp, #264	; 0x108
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dac:	6018      	str	r0, [r3, #0]
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 867b 	bne.w	8006ac0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d908      	bls.n	8005df8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005df6:	e007      	b.n	8005e08 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	7b1b      	ldrb	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13a      	bne.n	8005e8e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6959      	ldr	r1, [r3, #20]
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	88da      	ldrh	r2, [r3, #6]
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e3e:	6800      	ldr	r0, [r0, #0]
 8005e40:	f001 fc1d 	bl	800767e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	00da      	lsls	r2, r3, #3
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	f000 bde3 	b.w	8006a54 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	78db      	ldrb	r3, [r3, #3]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	f040 843a 	bne.w	8006714 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	f240 83b7 	bls.w	800662c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 81b3 	beq.w	80062c6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d16d      	bne.n	8006058 <USB_EPStartXfer+0x2ba>
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	4413      	add	r3, r2
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00da      	lsls	r2, r3, #3
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8005fbe:	d91c      	bls.n	8005ffa <USB_EPStartXfer+0x25c>
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <USB_EPStartXfer+0x242>
 8005fd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fe0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e053      	b.n	80060a2 <USB_EPStartXfer+0x304>
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d112      	bne.n	8006028 <USB_EPStartXfer+0x28a>
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800600c:	b29a      	uxth	r2, r3
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006020:	b29a      	uxth	r2, r3
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	e03c      	b.n	80060a2 <USB_EPStartXfer+0x304>
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <USB_EPStartXfer+0x2aa>
 800603e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006042:	3301      	adds	r3, #1
 8006044:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006048:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800604c:	b29b      	uxth	r3, r3
 800604e:	029b      	lsls	r3, r3, #10
 8006050:	b29a      	uxth	r2, r3
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e024      	b.n	80060a2 <USB_EPStartXfer+0x304>
 8006058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d11c      	bne.n	80060a2 <USB_EPStartXfer+0x304>
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	4413      	add	r3, r2
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
 8006080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00da      	lsls	r2, r3, #3
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	4413      	add	r3, r2
 8006092:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609c:	b29a      	uxth	r2, r3
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	895b      	ldrh	r3, [r3, #10]
 80060ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6959      	ldr	r1, [r3, #20]
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060d0:	6800      	ldr	r0, [r0, #0]
 80060d2:	f001 fad4 	bl	800767e <USB_WritePMA>
            ep->xfer_buff += len;
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e6:	441a      	add	r2, r3
 80060e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d90f      	bls.n	8006130 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	621a      	str	r2, [r3, #32]
 800612e:	e00e      	b.n	800614e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d16d      	bne.n	800623a <USB_EPStartXfer+0x49c>
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	4413      	add	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	4413      	add	r3, r2
 8006194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	2b3e      	cmp	r3, #62	; 0x3e
 80061a0:	d91c      	bls.n	80061dc <USB_EPStartXfer+0x43e>
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <USB_EPStartXfer+0x424>
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061bc:	3b01      	subs	r3, #1
 80061be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	029b      	lsls	r3, r3, #10
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	e059      	b.n	8006290 <USB_EPStartXfer+0x4f2>
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d112      	bne.n	800620a <USB_EPStartXfer+0x46c>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006202:	b29a      	uxth	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e042      	b.n	8006290 <USB_EPStartXfer+0x4f2>
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <USB_EPStartXfer+0x48c>
 8006220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006224:	3301      	adds	r3, #1
 8006226:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800622a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622e:	b29b      	uxth	r3, r3
 8006230:	029b      	lsls	r3, r3, #10
 8006232:	b29a      	uxth	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e02a      	b.n	8006290 <USB_EPStartXfer+0x4f2>
 800623a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d122      	bne.n	8006290 <USB_EPStartXfer+0x4f2>
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	4413      	add	r3, r2
 800626c:	623b      	str	r3, [r7, #32]
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	00da      	lsls	r2, r3, #3
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	4413      	add	r3, r2
 8006280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628a:	b29a      	uxth	r2, r3
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	891b      	ldrh	r3, [r3, #8]
 800629c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6959      	ldr	r1, [r3, #20]
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	f001 f9dd 	bl	800767e <USB_WritePMA>
 80062c4:	e3c6      	b.n	8006a54 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d16d      	bne.n	80063b2 <USB_EPStartXfer+0x614>
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f6:	4413      	add	r3, r2
 80062f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00da      	lsls	r2, r3, #3
 8006308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630a:	4413      	add	r3, r2
 800630c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006316:	2b3e      	cmp	r3, #62	; 0x3e
 8006318:	d91c      	bls.n	8006354 <USB_EPStartXfer+0x5b6>
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <USB_EPStartXfer+0x59c>
 8006330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006334:	3b01      	subs	r3, #1
 8006336:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800633a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e059      	b.n	8006408 <USB_EPStartXfer+0x66a>
 8006354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006358:	2b00      	cmp	r3, #0
 800635a:	d112      	bne.n	8006382 <USB_EPStartXfer+0x5e4>
 800635c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006366:	b29a      	uxth	r2, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637a:	b29a      	uxth	r2, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e042      	b.n	8006408 <USB_EPStartXfer+0x66a>
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <USB_EPStartXfer+0x604>
 8006398:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800639c:	3301      	adds	r3, #1
 800639e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	029b      	lsls	r3, r3, #10
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e02a      	b.n	8006408 <USB_EPStartXfer+0x66a>
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d122      	bne.n	8006408 <USB_EPStartXfer+0x66a>
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	653b      	str	r3, [r7, #80]	; 0x50
 80063ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063dc:	b29b      	uxth	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e2:	4413      	add	r3, r2
 80063e4:	653b      	str	r3, [r7, #80]	; 0x50
 80063e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	00da      	lsls	r2, r3, #3
 80063f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f6:	4413      	add	r3, r2
 80063f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	b29a      	uxth	r2, r3
 8006404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006406:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	891b      	ldrh	r3, [r3, #8]
 8006414:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6959      	ldr	r1, [r3, #20]
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006428:	b29b      	uxth	r3, r3
 800642a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800642e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006432:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	f001 f921 	bl	800767e <USB_WritePMA>
            ep->xfer_buff += len;
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	441a      	add	r2, r3
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800645a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a1a      	ldr	r2, [r3, #32]
 8006466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d90f      	bls.n	8006496 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	621a      	str	r2, [r3, #32]
 8006494:	e00e      	b.n	80064b4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	643b      	str	r3, [r7, #64]	; 0x40
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d16d      	bne.n	80065ac <USB_EPStartXfer+0x80e>
 80064d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	4413      	add	r3, r2
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	00da      	lsls	r2, r3, #3
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	4413      	add	r3, r2
 8006506:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006510:	2b3e      	cmp	r3, #62	; 0x3e
 8006512:	d91c      	bls.n	800654e <USB_EPStartXfer+0x7b0>
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <USB_EPStartXfer+0x796>
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652e:	3b01      	subs	r3, #1
 8006530:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	b29b      	uxth	r3, r3
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	b29b      	uxth	r3, r3
 800653e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006546:	b29a      	uxth	r2, r3
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e053      	b.n	80065f6 <USB_EPStartXfer+0x858>
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006552:	2b00      	cmp	r3, #0
 8006554:	d112      	bne.n	800657c <USB_EPStartXfer+0x7de>
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006560:	b29a      	uxth	r2, r3
 8006562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e03c      	b.n	80065f6 <USB_EPStartXfer+0x858>
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <USB_EPStartXfer+0x7fe>
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	3301      	adds	r3, #1
 8006598:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	029b      	lsls	r3, r3, #10
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	e024      	b.n	80065f6 <USB_EPStartXfer+0x858>
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d11c      	bne.n	80065f6 <USB_EPStartXfer+0x858>
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d0:	4413      	add	r3, r2
 80065d2:	643b      	str	r3, [r7, #64]	; 0x40
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	00da      	lsls	r2, r3, #3
 80065e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	895b      	ldrh	r3, [r3, #10]
 8006602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6959      	ldr	r1, [r3, #20]
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	b29b      	uxth	r3, r3
 8006618:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800661c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006620:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006624:	6800      	ldr	r0, [r0, #0]
 8006626:	f001 f82a 	bl	800767e <USB_WritePMA>
 800662a:	e213      	b.n	8006a54 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800662c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006694:	b29b      	uxth	r3, r3
 8006696:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b8:	4413      	add	r3, r2
 80066ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	00da      	lsls	r2, r3, #3
 80066ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	b29a      	uxth	r2, r3
 80066da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	891b      	ldrh	r3, [r3, #8]
 80066ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6959      	ldr	r1, [r3, #20]
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006704:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006708:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f000 ffb6 	bl	800767e <USB_WritePMA>
 8006712:	e19f      	b.n	8006a54 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1a      	ldr	r2, [r3, #32]
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80bc 	beq.w	80068d2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	673b      	str	r3, [r7, #112]	; 0x70
 8006766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d16d      	bne.n	8006852 <USB_EPStartXfer+0xab4>
 8006776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	66bb      	str	r3, [r7, #104]	; 0x68
 8006782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006796:	4413      	add	r3, r2
 8006798:	66bb      	str	r3, [r7, #104]	; 0x68
 800679a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	00da      	lsls	r2, r3, #3
 80067a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067b0:	667b      	str	r3, [r7, #100]	; 0x64
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b6:	2b3e      	cmp	r3, #62	; 0x3e
 80067b8:	d91c      	bls.n	80067f4 <USB_EPStartXfer+0xa56>
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <USB_EPStartXfer+0xa3c>
 80067d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067d4:	3b01      	subs	r3, #1
 80067d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067de:	b29b      	uxth	r3, r3
 80067e0:	029b      	lsls	r3, r3, #10
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e053      	b.n	800689c <USB_EPStartXfer+0xafe>
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d112      	bne.n	8006822 <USB_EPStartXfer+0xa84>
 80067fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006806:	b29a      	uxth	r2, r3
 8006808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e03c      	b.n	800689c <USB_EPStartXfer+0xafe>
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <USB_EPStartXfer+0xaa4>
 8006838:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800683c:	3301      	adds	r3, #1
 800683e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006846:	b29b      	uxth	r3, r3
 8006848:	029b      	lsls	r3, r3, #10
 800684a:	b29a      	uxth	r2, r3
 800684c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	e024      	b.n	800689c <USB_EPStartXfer+0xafe>
 8006852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d11c      	bne.n	800689c <USB_EPStartXfer+0xafe>
 8006862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006876:	4413      	add	r3, r2
 8006878:	673b      	str	r3, [r7, #112]	; 0x70
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	00da      	lsls	r2, r3, #3
 8006888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800688a:	4413      	add	r3, r2
 800688c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	b29a      	uxth	r2, r3
 8006898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	895b      	ldrh	r3, [r3, #10]
 80068a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6959      	ldr	r1, [r3, #20]
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	f000 fed7 	bl	800767e <USB_WritePMA>
 80068d0:	e0c0      	b.n	8006a54 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d16d      	bne.n	80069be <USB_EPStartXfer+0xc20>
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006902:	4413      	add	r3, r2
 8006904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	00da      	lsls	r2, r3, #3
 8006914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006916:	4413      	add	r3, r2
 8006918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800691c:	67bb      	str	r3, [r7, #120]	; 0x78
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	2b3e      	cmp	r3, #62	; 0x3e
 8006924:	d91c      	bls.n	8006960 <USB_EPStartXfer+0xbc2>
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USB_EPStartXfer+0xba8>
 800693c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006940:	3b01      	subs	r3, #1
 8006942:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800694a:	b29b      	uxth	r3, r3
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	b29b      	uxth	r3, r3
 8006950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006958:	b29a      	uxth	r2, r3
 800695a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	e05f      	b.n	8006a20 <USB_EPStartXfer+0xc82>
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006964:	2b00      	cmp	r3, #0
 8006966:	d112      	bne.n	800698e <USB_EPStartXfer+0xbf0>
 8006968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006972:	b29a      	uxth	r2, r3
 8006974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006986:	b29a      	uxth	r2, r3
 8006988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e048      	b.n	8006a20 <USB_EPStartXfer+0xc82>
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <USB_EPStartXfer+0xc10>
 80069a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069a8:	3301      	adds	r3, #1
 80069aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e030      	b.n	8006a20 <USB_EPStartXfer+0xc82>
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d128      	bne.n	8006a20 <USB_EPStartXfer+0xc82>
 80069ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069f2:	4413      	add	r3, r2
 80069f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	00da      	lsls	r2, r3, #3
 8006a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	891b      	ldrh	r3, [r3, #8]
 8006a2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6959      	ldr	r1, [r3, #20]
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a4e:	6800      	ldr	r0, [r0, #0]
 8006a50:	f000 fe15 	bl	800767e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7a:	817b      	strh	r3, [r7, #10]
 8006a7c:	897b      	ldrh	r3, [r7, #10]
 8006a7e:	f083 0310 	eor.w	r3, r3, #16
 8006a82:	817b      	strh	r3, [r7, #10]
 8006a84:	897b      	ldrh	r3, [r7, #10]
 8006a86:	f083 0320 	eor.w	r3, r3, #32
 8006a8a:	817b      	strh	r3, [r7, #10]
 8006a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]
 8006abc:	f000 bc9f 	b.w	80073fe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	7b1b      	ldrb	r3, [r3, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 80ae 	bne.w	8006c2e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d917      	bls.n	8006b1e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	619a      	str	r2, [r3, #24]
 8006b1c:	e00e      	b.n	8006b3c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b60:	4413      	add	r3, r2
 8006b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	00da      	lsls	r2, r3, #3
 8006b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	2b3e      	cmp	r3, #62	; 0x3e
 8006b88:	d91d      	bls.n	8006bc6 <USB_EPStartXfer+0xe28>
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <USB_EPStartXfer+0xe0c>
 8006ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e3e1      	b.n	800738a <USB_EPStartXfer+0x15ec>
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d116      	bne.n	8006bfc <USB_EPStartXfer+0xe5e>
 8006bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e3c6      	b.n	800738a <USB_EPStartXfer+0x15ec>
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USB_EPStartXfer+0xe7e>
 8006c12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c16:	3301      	adds	r3, #1
 8006c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e3ad      	b.n	800738a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	78db      	ldrb	r3, [r3, #3]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	f040 8200 	bne.w	8007040 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 8091 	bne.w	8006d74 <USB_EPStartXfer+0xfd6>
 8006c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c76:	4413      	add	r3, r2
 8006c78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	00da      	lsls	r2, r3, #3
 8006c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c8e:	4413      	add	r3, r2
 8006c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca6:	d925      	bls.n	8006cf4 <USB_EPStartXfer+0xf56>
 8006ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <USB_EPStartXfer+0xf3a>
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	029b      	lsls	r3, r3, #10
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e074      	b.n	8006dde <USB_EPStartXfer+0x1040>
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d116      	bne.n	8006d32 <USB_EPStartXfer+0xf94>
 8006d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e055      	b.n	8006dde <USB_EPStartXfer+0x1040>
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <USB_EPStartXfer+0xfc4>
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e034      	b.n	8006dde <USB_EPStartXfer+0x1040>
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d12c      	bne.n	8006dde <USB_EPStartXfer+0x1040>
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006da8:	4413      	add	r3, r2
 8006daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	00da      	lsls	r2, r3, #3
 8006dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 8091 	bne.w	8006f20 <USB_EPStartXfer+0x1182>
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e22:	4413      	add	r3, r2
 8006e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	00da      	lsls	r2, r3, #3
 8006e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b3e      	cmp	r3, #62	; 0x3e
 8006e52:	d925      	bls.n	8006ea0 <USB_EPStartXfer+0x1102>
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <USB_EPStartXfer+0x10e6>
 8006e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	029b      	lsls	r3, r3, #10
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	e06d      	b.n	8006f7c <USB_EPStartXfer+0x11de>
 8006ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d116      	bne.n	8006ede <USB_EPStartXfer+0x1140>
 8006eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e04e      	b.n	8006f7c <USB_EPStartXfer+0x11de>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <USB_EPStartXfer+0x1170>
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	029b      	lsls	r3, r3, #10
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e02d      	b.n	8006f7c <USB_EPStartXfer+0x11de>
 8006f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d125      	bne.n	8006f7c <USB_EPStartXfer+0x11de>
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f46:	4413      	add	r3, r2
 8006f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	00da      	lsls	r2, r3, #3
 8006f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f5e:	4413      	add	r3, r2
 8006f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f7a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 81fe 	beq.w	800738a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <USB_EPStartXfer+0x1228>
 8006fba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10d      	bne.n	8006fe2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 81db 	bne.w	800738a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f040 81d4 	bne.w	800738a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007008:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
 800703e:	e1a4      	b.n	800738a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	78db      	ldrb	r3, [r3, #3]
 800704c:	2b01      	cmp	r3, #1
 800704e:	f040 819a 	bne.w	8007386 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d917      	bls.n	800709e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	619a      	str	r2, [r3, #24]
 800709c:	e00e      	b.n	80070bc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800709e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d178      	bne.n	80071be <USB_EPStartXfer+0x1420>
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070f0:	4413      	add	r3, r2
 80070f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	00da      	lsls	r2, r3, #3
 8007104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007108:	4413      	add	r3, r2
 800710a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800710e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	2b3e      	cmp	r3, #62	; 0x3e
 8007118:	d91d      	bls.n	8007156 <USB_EPStartXfer+0x13b8>
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <USB_EPStartXfer+0x139c>
 8007130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007134:	3b01      	subs	r3, #1
 8007136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800713a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713e:	b29b      	uxth	r3, r3
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714c:	b29a      	uxth	r2, r3
 800714e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	e064      	b.n	8007220 <USB_EPStartXfer+0x1482>
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715a:	2b00      	cmp	r3, #0
 800715c:	d116      	bne.n	800718c <USB_EPStartXfer+0x13ee>
 800715e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800716a:	b29a      	uxth	r2, r3
 800716c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007170:	801a      	strh	r2, [r3, #0]
 8007172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e049      	b.n	8007220 <USB_EPStartXfer+0x1482>
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	085b      	lsrs	r3, r3, #1
 8007192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <USB_EPStartXfer+0x140e>
 80071a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a6:	3301      	adds	r3, #1
 80071a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e030      	b.n	8007220 <USB_EPStartXfer+0x1482>
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d128      	bne.n	8007220 <USB_EPStartXfer+0x1482>
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071f2:	4413      	add	r3, r2
 80071f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	00da      	lsls	r2, r3, #3
 8007206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800720a:	4413      	add	r3, r2
 800720c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007218:	b29a      	uxth	r2, r3
 800721a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800722e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d178      	bne.n	8007330 <USB_EPStartXfer+0x1592>
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725a:	b29b      	uxth	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007262:	4413      	add	r3, r2
 8007264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800727a:	4413      	add	r3, r2
 800727c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007288:	2b3e      	cmp	r3, #62	; 0x3e
 800728a:	d91d      	bls.n	80072c8 <USB_EPStartXfer+0x152a>
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729a:	f003 031f 	and.w	r3, r3, #31
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <USB_EPStartXfer+0x150e>
 80072a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072a6:	3b01      	subs	r3, #1
 80072a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	029b      	lsls	r3, r3, #10
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e060      	b.n	800738a <USB_EPStartXfer+0x15ec>
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d116      	bne.n	80072fe <USB_EPStartXfer+0x1560>
 80072d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e045      	b.n	800738a <USB_EPStartXfer+0x15ec>
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <USB_EPStartXfer+0x1580>
 8007314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800731e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e02c      	b.n	800738a <USB_EPStartXfer+0x15ec>
 8007330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d124      	bne.n	800738a <USB_EPStartXfer+0x15ec>
 8007340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734e:	b29b      	uxth	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007356:	4413      	add	r3, r2
 8007358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	00da      	lsls	r2, r3, #3
 800736a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800736e:	4413      	add	r3, r2
 8007370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737c:	b29a      	uxth	r2, r3
 800737e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	e001      	b.n	800738a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e03a      	b.n	8007400 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80073b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80073b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80073c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80073c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80073cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	441a      	add	r2, r3
 80073e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d020      	beq.n	800745e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007432:	81bb      	strh	r3, [r7, #12]
 8007434:	89bb      	ldrh	r3, [r7, #12]
 8007436:	f083 0310 	eor.w	r3, r3, #16
 800743a:	81bb      	strh	r3, [r7, #12]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	89bb      	ldrh	r3, [r7, #12]
 8007448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007458:	b29b      	uxth	r3, r3
 800745a:	8013      	strh	r3, [r2, #0]
 800745c:	e01f      	b.n	800749e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	81fb      	strh	r3, [r7, #14]
 8007476:	89fb      	ldrh	r3, [r7, #14]
 8007478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800747c:	81fb      	strh	r3, [r7, #14]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	441a      	add	r2, r3
 8007488:	89fb      	ldrh	r3, [r7, #14]
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	7b1b      	ldrb	r3, [r3, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f040 809d 	bne.w	80075fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d04c      	beq.n	8007562 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	823b      	strh	r3, [r7, #16]
 80074d6:	8a3b      	ldrh	r3, [r7, #16]
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01b      	beq.n	8007518 <USB_EPClearStall+0x6c>
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	81fb      	strh	r3, [r7, #14]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	78db      	ldrb	r3, [r3, #3]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d06c      	beq.n	80075fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007536:	81bb      	strh	r3, [r7, #12]
 8007538:	89bb      	ldrh	r3, [r7, #12]
 800753a:	f083 0320 	eor.w	r3, r3, #32
 800753e:	81bb      	strh	r3, [r7, #12]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	89bb      	ldrh	r3, [r7, #12]
 800754c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755c:	b29b      	uxth	r3, r3
 800755e:	8013      	strh	r3, [r2, #0]
 8007560:	e04b      	b.n	80075fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	82fb      	strh	r3, [r7, #22]
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01b      	beq.n	80075b2 <USB_EPClearStall+0x106>
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007590:	82bb      	strh	r3, [r7, #20]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	441a      	add	r2, r3
 800759c:	8abb      	ldrh	r3, [r7, #20]
 800759e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c8:	827b      	strh	r3, [r7, #18]
 80075ca:	8a7b      	ldrh	r3, [r7, #18]
 80075cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075d0:	827b      	strh	r3, [r7, #18]
 80075d2:	8a7b      	ldrh	r3, [r7, #18]
 80075d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075d8:	827b      	strh	r3, [r7, #18]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8a7b      	ldrh	r3, [r7, #18]
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2280      	movs	r2, #128	; 0x80
 800761e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800763e:	b29b      	uxth	r3, r3
 8007640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800766c:	b29b      	uxth	r3, r3
 800766e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007670:	68fb      	ldr	r3, [r7, #12]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800767e:	b480      	push	{r7}
 8007680:	b08d      	sub	sp, #52	; 0x34
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	4611      	mov	r1, r2
 800768a:	461a      	mov	r2, r3
 800768c:	460b      	mov	r3, r1
 800768e:	80fb      	strh	r3, [r7, #6]
 8007690:	4613      	mov	r3, r2
 8007692:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007694:	88bb      	ldrh	r3, [r7, #4]
 8007696:	3301      	adds	r3, #1
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b4:	e01b      	b.n	80076ee <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	3301      	adds	r3, #1
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	3302      	adds	r3, #2
 80076e0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	3301      	adds	r3, #1
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	3b01      	subs	r3, #1
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e0      	bne.n	80076b6 <USB_WritePMA+0x38>
  }
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	3734      	adds	r7, #52	; 0x34
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007702:	b480      	push	{r7}
 8007704:	b08b      	sub	sp, #44	; 0x2c
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	4611      	mov	r1, r2
 800770e:	461a      	mov	r2, r3
 8007710:	460b      	mov	r3, r1
 8007712:	80fb      	strh	r3, [r7, #6]
 8007714:	4613      	mov	r3, r2
 8007716:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007718:	88bb      	ldrh	r3, [r7, #4]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	b29b      	uxth	r3, r3
 800771e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007732:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
 8007738:	e018      	b.n	800776c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	3302      	adds	r3, #2
 8007746:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	0a1b      	lsrs	r3, r3, #8
 800775a:	b2da      	uxtb	r2, r3
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	3b01      	subs	r3, #1
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007772:	88bb      	ldrh	r3, [r7, #4]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	701a      	strb	r2, [r3, #0]
  }
}
 800778e:	bf00      	nop
 8007790:	372c      	adds	r7, #44	; 0x2c
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077aa:	f002 f901 	bl	80099b0 <USBD_static_malloc>
 80077ae:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077be:	2302      	movs	r3, #2
 80077c0:	e066      	b.n	8007890 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7c1b      	ldrb	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d119      	bne.n	8007806 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077d6:	2202      	movs	r2, #2
 80077d8:	2181      	movs	r1, #129	; 0x81
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 ff8d 	bl	80096fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ea:	2202      	movs	r2, #2
 80077ec:	2101      	movs	r1, #1
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 ff83 	bl	80096fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2210      	movs	r2, #16
 8007800:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007804:	e016      	b.n	8007834 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007806:	2340      	movs	r3, #64	; 0x40
 8007808:	2202      	movs	r2, #2
 800780a:	2181      	movs	r1, #129	; 0x81
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 ff74 	bl	80096fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007818:	2340      	movs	r3, #64	; 0x40
 800781a:	2202      	movs	r2, #2
 800781c:	2101      	movs	r1, #1
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 ff6b 	bl	80096fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2210      	movs	r2, #16
 8007830:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007834:	2308      	movs	r3, #8
 8007836:	2203      	movs	r2, #3
 8007838:	2182      	movs	r1, #130	; 0x82
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 ff5d 	bl	80096fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c1b      	ldrb	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007874:	2101      	movs	r1, #1
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f002 f82f 	bl	80098da <USBD_LL_PrepareReceive>
 800787c:	e007      	b.n	800788e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007884:	2340      	movs	r3, #64	; 0x40
 8007886:	2101      	movs	r1, #1
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f002 f826 	bl	80098da <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078a4:	2181      	movs	r1, #129	; 0x81
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 ff4d 	bl	8009746 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078b2:	2101      	movs	r1, #1
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 ff46 	bl	8009746 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078c2:	2182      	movs	r1, #130	; 0x82
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 ff3e 	bl	8009746 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00e      	beq.n	8007902 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 f869 	bl	80099cc <USBD_static_free>
    pdev->pClassData = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007930:	2303      	movs	r3, #3
 8007932:	e0af      	b.n	8007a94 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800793c:	2b00      	cmp	r3, #0
 800793e:	d03f      	beq.n	80079c0 <USBD_CDC_Setup+0xb4>
 8007940:	2b20      	cmp	r3, #32
 8007942:	f040 809f 	bne.w	8007a84 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	88db      	ldrh	r3, [r3, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d02e      	beq.n	80079ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b25b      	sxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	da16      	bge.n	8007986 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007964:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	88d2      	ldrh	r2, [r2, #6]
 800796a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b07      	cmp	r3, #7
 8007972:	bf28      	it	cs
 8007974:	2307      	movcs	r3, #7
 8007976:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	89fa      	ldrh	r2, [r7, #14]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 facf 	bl	8008f22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007984:	e085      	b.n	8007a92 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785a      	ldrb	r2, [r3, #1]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	b2da      	uxtb	r2, r3
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800799c:	6939      	ldr	r1, [r7, #16]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88db      	ldrh	r3, [r3, #6]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 fae8 	bl	8008f7a <USBD_CtlPrepareRx>
      break;
 80079aa:	e072      	b.n	8007a92 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	7850      	ldrb	r0, [r2, #1]
 80079b8:	2200      	movs	r2, #0
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	4798      	blx	r3
      break;
 80079be:	e068      	b.n	8007a92 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	785b      	ldrb	r3, [r3, #1]
 80079c4:	2b0b      	cmp	r3, #11
 80079c6:	d852      	bhi.n	8007a6e <USBD_CDC_Setup+0x162>
 80079c8:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <USBD_CDC_Setup+0xc4>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	08007a7d 	.word	0x08007a7d
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007a6f 	.word	0x08007a6f
 80079e0:	08007a6f 	.word	0x08007a6f
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007a6f 	.word	0x08007a6f
 80079ec:	08007a6f 	.word	0x08007a6f
 80079f0:	08007a6f 	.word	0x08007a6f
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a55 	.word	0x08007a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d107      	bne.n	8007a1c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a0c:	f107 030a 	add.w	r3, r7, #10
 8007a10:	2202      	movs	r2, #2
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fa84 	bl	8008f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a1a:	e032      	b.n	8007a82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fa0e 	bl	8008e40 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a24:	2303      	movs	r3, #3
 8007a26:	75fb      	strb	r3, [r7, #23]
          break;
 8007a28:	e02b      	b.n	8007a82 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d107      	bne.n	8007a46 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a36:	f107 030d 	add.w	r3, r7, #13
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fa6f 	bl	8008f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a44:	e01d      	b.n	8007a82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f9f9 	bl	8008e40 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	75fb      	strb	r3, [r7, #23]
          break;
 8007a52:	e016      	b.n	8007a82 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d00f      	beq.n	8007a80 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 f9ec 	bl	8008e40 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a6c:	e008      	b.n	8007a80 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f9e5 	bl	8008e40 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	e002      	b.n	8007a82 <USBD_CDC_Setup+0x176>
          break;
 8007a7c:	bf00      	nop
 8007a7e:	e008      	b.n	8007a92 <USBD_CDC_Setup+0x186>
          break;
 8007a80:	bf00      	nop
      }
      break;
 8007a82:	e006      	b.n	8007a92 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 f9da 	bl	8008e40 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e04f      	b.n	8007b5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ac6:	78fa      	ldrb	r2, [r7, #3]
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d029      	beq.n	8007b30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	3318      	adds	r3, #24
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	78f9      	ldrb	r1, [r7, #3]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	460b      	mov	r3, r1
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	440b      	add	r3, r1
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4403      	add	r3, r0
 8007afc:	3338      	adds	r3, #56	; 0x38
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d110      	bne.n	8007b30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	3318      	adds	r3, #24
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b22:	78f9      	ldrb	r1, [r7, #3]
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 feb5 	bl	8009898 <USBD_LL_Transmit>
 8007b2e:	e015      	b.n	8007b5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e015      	b.n	8007bb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fec5 	bl	800991c <USBD_LL_GetRxDataSize>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e01b      	b.n	8007c0e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d015      	beq.n	8007c0c <USBD_CDC_EP0_RxReady+0x50>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007be6:	2bff      	cmp	r3, #255	; 0xff
 8007be8:	d010      	beq.n	8007c0c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007bf8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c00:	b292      	uxth	r2, r2
 8007c02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	22ff      	movs	r2, #255	; 0xff
 8007c08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2243      	movs	r2, #67	; 0x43
 8007c24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c26:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20000094 	.word	0x20000094

08007c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2243      	movs	r2, #67	; 0x43
 8007c44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c46:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	20000050 	.word	0x20000050

08007c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2243      	movs	r2, #67	; 0x43
 8007c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c66:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	200000d8 	.word	0x200000d8

08007c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	220a      	movs	r2, #10
 8007c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c86:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	2000000c 	.word	0x2000000c

08007c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e004      	b.n	8007cb6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cd4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e008      	b.n	8007cf2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e004      	b.n	8007d24 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d40:	2301      	movs	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e01a      	b.n	8007d88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d114      	bne.n	8007d86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d7a:	2181      	movs	r1, #129	; 0x81
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 fd8b 	bl	8009898 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e016      	b.n	8007ddc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7c1b      	ldrb	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fd89 	bl	80098da <USBD_LL_PrepareReceive>
 8007dc8:	e007      	b.n	8007dda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fd80 	bl	80098da <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e01f      	b.n	8007e3c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	79fa      	ldrb	r2, [r7, #7]
 8007e2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 fbe7 	bl	8009604 <USBD_LL_Init>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e016      	b.n	8007e8a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	f107 020e 	add.w	r2, r7, #14
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	4602      	mov	r2, r0
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 fc12 	bl	80096c4 <USBD_LL_Start>
 8007ea0:	4603      	mov	r3, r0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
  }

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 ff46 	bl	8008dcc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d01a      	beq.n	8007f9a <USBD_LL_SetupStage+0x72>
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d822      	bhi.n	8007fae <USBD_LL_SetupStage+0x86>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <USBD_LL_SetupStage+0x4a>
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d00a      	beq.n	8007f86 <USBD_LL_SetupStage+0x5e>
 8007f70:	e01d      	b.n	8007fae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9ee 	bl	800835c <USBD_StdDevReq>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e020      	b.n	8007fc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa52 	bl	8008438 <USBD_StdItfReq>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	e016      	b.n	8007fc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa91 	bl	80084ca <USBD_StdEPReq>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
      break;
 8007fac:	e00c      	b.n	8007fc8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 fbe1 	bl	8009784 <USBD_LL_StallEP>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc6:	bf00      	nop
  }

  return ret;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b086      	sub	sp, #24
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d138      	bne.n	8008058 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d14a      	bne.n	800808e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	429a      	cmp	r2, r3
 8008002:	d913      	bls.n	800802c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	4293      	cmp	r3, r2
 800801c:	bf28      	it	cs
 800801e:	4613      	movcs	r3, r2
 8008020:	461a      	mov	r2, r3
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 ffc5 	bl	8008fb4 <USBD_CtlContinueRx>
 800802a:	e030      	b.n	800808e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b03      	cmp	r3, #3
 8008036:	d10b      	bne.n	8008050 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 ffc0 	bl	8008fd6 <USBD_CtlSendStatus>
 8008056:	e01a      	b.n	800808e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b03      	cmp	r3, #3
 8008062:	d114      	bne.n	800808e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00e      	beq.n	800808e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	7afa      	ldrb	r2, [r7, #11]
 800807a:	4611      	mov	r1, r2
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	4798      	blx	r3
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	e000      	b.n	8008090 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	460b      	mov	r3, r1
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d16b      	bne.n	8008184 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3314      	adds	r3, #20
 80080b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d156      	bne.n	800816a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d914      	bls.n	80080f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	461a      	mov	r2, r3
 80080dc:	6879      	ldr	r1, [r7, #4]
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 ff3a 	bl	8008f58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e4:	2300      	movs	r3, #0
 80080e6:	2200      	movs	r2, #0
 80080e8:	2100      	movs	r1, #0
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 fbf5 	bl	80098da <USBD_LL_PrepareReceive>
 80080f0:	e03b      	b.n	800816a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d11c      	bne.n	8008138 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008106:	429a      	cmp	r2, r3
 8008108:	d316      	bcc.n	8008138 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008114:	429a      	cmp	r2, r3
 8008116:	d20f      	bcs.n	8008138 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008118:	2200      	movs	r2, #0
 800811a:	2100      	movs	r1, #0
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 ff1b 	bl	8008f58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800812a:	2300      	movs	r3, #0
 800812c:	2200      	movs	r2, #0
 800812e:	2100      	movs	r1, #0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f001 fbd2 	bl	80098da <USBD_LL_PrepareReceive>
 8008136:	e018      	b.n	800816a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b03      	cmp	r3, #3
 8008142:	d10b      	bne.n	800815c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f001 fb10 	bl	8009784 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 ff49 	bl	8008ffc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d122      	bne.n	80081ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fe98 	bl	8007eaa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008182:	e01a      	b.n	80081ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b03      	cmp	r3, #3
 800818e:	d114      	bne.n	80081ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00e      	beq.n	80081ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	7afa      	ldrb	r2, [r7, #11]
 80081a6:	4611      	mov	r1, r2
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	4798      	blx	r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	e000      	b.n	80081bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e02f      	b.n	8008258 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6852      	ldr	r2, [r2, #4]
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	4611      	mov	r1, r2
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008222:	2340      	movs	r3, #64	; 0x40
 8008224:	2200      	movs	r2, #0
 8008226:	2100      	movs	r1, #0
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fa66 	bl	80096fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2240      	movs	r2, #64	; 0x40
 800823a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	2200      	movs	r2, #0
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 fa58 	bl	80096fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2240      	movs	r2, #64	; 0x40
 8008254:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828e:	b2da      	uxtb	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2204      	movs	r2, #4
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d106      	bne.n	80082ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e012      	b.n	8008318 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d10b      	bne.n	8008316 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	3301      	adds	r3, #1
 8008336:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800833e:	8a3b      	ldrh	r3, [r7, #16]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	b21a      	sxth	r2, r3
 8008344:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008348:	4313      	orrs	r3, r2
 800834a:	b21b      	sxth	r3, r3
 800834c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800834e:	89fb      	ldrh	r3, [r7, #14]
}
 8008350:	4618      	mov	r0, r3
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	d005      	beq.n	8008382 <USBD_StdDevReq+0x26>
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d853      	bhi.n	8008422 <USBD_StdDevReq+0xc6>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <USBD_StdDevReq+0x3a>
 800837e:	2b20      	cmp	r3, #32
 8008380:	d14f      	bne.n	8008422 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	4798      	blx	r3
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
      break;
 8008394:	e04a      	b.n	800842c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b09      	cmp	r3, #9
 800839c:	d83b      	bhi.n	8008416 <USBD_StdDevReq+0xba>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <USBD_StdDevReq+0x48>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083f9 	.word	0x080083f9
 80083a8:	0800840d 	.word	0x0800840d
 80083ac:	08008417 	.word	0x08008417
 80083b0:	08008403 	.word	0x08008403
 80083b4:	08008417 	.word	0x08008417
 80083b8:	080083d7 	.word	0x080083d7
 80083bc:	080083cd 	.word	0x080083cd
 80083c0:	08008417 	.word	0x08008417
 80083c4:	080083ef 	.word	0x080083ef
 80083c8:	080083e1 	.word	0x080083e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f9de 	bl	8008790 <USBD_GetDescriptor>
          break;
 80083d4:	e024      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fb6d 	bl	8008ab8 <USBD_SetAddress>
          break;
 80083de:	e01f      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fbac 	bl	8008b40 <USBD_SetConfig>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
          break;
 80083ec:	e018      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc4b 	bl	8008c8c <USBD_GetConfig>
          break;
 80083f6:	e013      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fc7c 	bl	8008cf8 <USBD_GetStatus>
          break;
 8008400:	e00e      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fcab 	bl	8008d60 <USBD_SetFeature>
          break;
 800840a:	e009      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fcba 	bl	8008d88 <USBD_ClrFeature>
          break;
 8008414:	e004      	b.n	8008420 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fd11 	bl	8008e40 <USBD_CtlError>
          break;
 800841e:	bf00      	nop
      }
      break;
 8008420:	e004      	b.n	800842c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fd0b 	bl	8008e40 <USBD_CtlError>
      break;
 800842a:	bf00      	nop
  }

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800844e:	2b40      	cmp	r3, #64	; 0x40
 8008450:	d005      	beq.n	800845e <USBD_StdItfReq+0x26>
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d82f      	bhi.n	80084b6 <USBD_StdItfReq+0x7e>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <USBD_StdItfReq+0x26>
 800845a:	2b20      	cmp	r3, #32
 800845c:	d12b      	bne.n	80084b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	2b02      	cmp	r3, #2
 800846a:	d81d      	bhi.n	80084a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	889b      	ldrh	r3, [r3, #4]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b01      	cmp	r3, #1
 8008474:	d813      	bhi.n	800849e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	88db      	ldrh	r3, [r3, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d110      	bne.n	80084b2 <USBD_StdItfReq+0x7a>
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10d      	bne.n	80084b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fd9d 	bl	8008fd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800849c:	e009      	b.n	80084b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fccd 	bl	8008e40 <USBD_CtlError>
          break;
 80084a6:	e004      	b.n	80084b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fcc8 	bl	8008e40 <USBD_CtlError>
          break;
 80084b0:	e000      	b.n	80084b4 <USBD_StdItfReq+0x7c>
          break;
 80084b2:	bf00      	nop
      }
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fcc1 	bl	8008e40 <USBD_CtlError>
      break;
 80084be:	bf00      	nop
  }

  return ret;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	889b      	ldrh	r3, [r3, #4]
 80084dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d007      	beq.n	80084fa <USBD_StdEPReq+0x30>
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	f200 8145 	bhi.w	800877a <USBD_StdEPReq+0x2b0>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <USBD_StdEPReq+0x44>
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	f040 8140 	bne.w	800877a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
      break;
 800850c:	e13a      	b.n	8008784 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d007      	beq.n	8008526 <USBD_StdEPReq+0x5c>
 8008516:	2b03      	cmp	r3, #3
 8008518:	f300 8129 	bgt.w	800876e <USBD_StdEPReq+0x2a4>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d07f      	beq.n	8008620 <USBD_StdEPReq+0x156>
 8008520:	2b01      	cmp	r3, #1
 8008522:	d03c      	beq.n	800859e <USBD_StdEPReq+0xd4>
 8008524:	e123      	b.n	800876e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d002      	beq.n	8008538 <USBD_StdEPReq+0x6e>
 8008532:	2b03      	cmp	r3, #3
 8008534:	d016      	beq.n	8008564 <USBD_StdEPReq+0x9a>
 8008536:	e02c      	b.n	8008592 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <USBD_StdEPReq+0x90>
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b80      	cmp	r3, #128	; 0x80
 8008542:	d00a      	beq.n	800855a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f91b 	bl	8009784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800854e:	2180      	movs	r1, #128	; 0x80
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f917 	bl	8009784 <USBD_LL_StallEP>
 8008556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008558:	e020      	b.n	800859c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fc6f 	bl	8008e40 <USBD_CtlError>
              break;
 8008562:	e01b      	b.n	800859c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10e      	bne.n	800858a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <USBD_StdEPReq+0xc0>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d008      	beq.n	800858a <USBD_StdEPReq+0xc0>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	88db      	ldrh	r3, [r3, #6]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f8fd 	bl	8009784 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fd23 	bl	8008fd6 <USBD_CtlSendStatus>

              break;
 8008590:	e004      	b.n	800859c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fc53 	bl	8008e40 <USBD_CtlError>
              break;
 800859a:	bf00      	nop
          }
          break;
 800859c:	e0ec      	b.n	8008778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d002      	beq.n	80085b0 <USBD_StdEPReq+0xe6>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d016      	beq.n	80085dc <USBD_StdEPReq+0x112>
 80085ae:	e030      	b.n	8008612 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <USBD_StdEPReq+0x108>
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b80      	cmp	r3, #128	; 0x80
 80085ba:	d00a      	beq.n	80085d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f8df 	bl	8009784 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c6:	2180      	movs	r1, #128	; 0x80
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f8db 	bl	8009784 <USBD_LL_StallEP>
 80085ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d0:	e025      	b.n	800861e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fc33 	bl	8008e40 <USBD_CtlError>
              break;
 80085da:	e020      	b.n	800861e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	885b      	ldrh	r3, [r3, #2]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d11b      	bne.n	800861c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 f8e5 	bl	80097c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fcec 	bl	8008fd6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008610:	e004      	b.n	800861c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc13 	bl	8008e40 <USBD_CtlError>
              break;
 800861a:	e000      	b.n	800861e <USBD_StdEPReq+0x154>
              break;
 800861c:	bf00      	nop
          }
          break;
 800861e:	e0ab      	b.n	8008778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d002      	beq.n	8008632 <USBD_StdEPReq+0x168>
 800862c:	2b03      	cmp	r3, #3
 800862e:	d032      	beq.n	8008696 <USBD_StdEPReq+0x1cc>
 8008630:	e097      	b.n	8008762 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <USBD_StdEPReq+0x17e>
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d004      	beq.n	8008648 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fbfd 	bl	8008e40 <USBD_CtlError>
                break;
 8008646:	e091      	b.n	800876c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	da0b      	bge.n	8008668 <USBD_StdEPReq+0x19e>
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	3310      	adds	r3, #16
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	3304      	adds	r3, #4
 8008666:	e00b      	b.n	8008680 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	3304      	adds	r3, #4
 8008680:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2202      	movs	r2, #2
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fc47 	bl	8008f22 <USBD_CtlSendData>
              break;
 8008694:	e06a      	b.n	800876c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	da11      	bge.n	80086c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	f003 020f 	and.w	r2, r3, #15
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	3324      	adds	r3, #36	; 0x24
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d117      	bne.n	80086e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fbc0 	bl	8008e40 <USBD_CtlError>
                  break;
 80086c0:	e054      	b.n	800876c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	f003 020f 	and.w	r2, r3, #15
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbad 	bl	8008e40 <USBD_CtlError>
                  break;
 80086e6:	e041      	b.n	800876c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0b      	bge.n	8008708 <USBD_StdEPReq+0x23e>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3310      	adds	r3, #16
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	e00b      	b.n	8008720 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <USBD_StdEPReq+0x264>
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b80      	cmp	r3, #128	; 0x80
 800872c:	d103      	bne.n	8008736 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e00e      	b.n	8008754 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 f860 	bl	8009800 <USBD_LL_IsStallEP>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e002      	b.n	8008754 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2202      	movs	r2, #2
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fbe1 	bl	8008f22 <USBD_CtlSendData>
              break;
 8008760:	e004      	b.n	800876c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb6b 	bl	8008e40 <USBD_CtlError>
              break;
 800876a:	bf00      	nop
          }
          break;
 800876c:	e004      	b.n	8008778 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fb65 	bl	8008e40 <USBD_CtlError>
          break;
 8008776:	bf00      	nop
      }
      break;
 8008778:	e004      	b.n	8008784 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fb5f 	bl	8008e40 <USBD_CtlError>
      break;
 8008782:	bf00      	nop
  }

  return ret;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b0e      	cmp	r3, #14
 80087b2:	f200 8152 	bhi.w	8008a5a <USBD_GetDescriptor+0x2ca>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <USBD_GetDescriptor+0x2c>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	0800882d 	.word	0x0800882d
 80087c0:	08008845 	.word	0x08008845
 80087c4:	08008885 	.word	0x08008885
 80087c8:	08008a5b 	.word	0x08008a5b
 80087cc:	08008a5b 	.word	0x08008a5b
 80087d0:	080089fb 	.word	0x080089fb
 80087d4:	08008a27 	.word	0x08008a27
 80087d8:	08008a5b 	.word	0x08008a5b
 80087dc:	08008a5b 	.word	0x08008a5b
 80087e0:	08008a5b 	.word	0x08008a5b
 80087e4:	08008a5b 	.word	0x08008a5b
 80087e8:	08008a5b 	.word	0x08008a5b
 80087ec:	08008a5b 	.word	0x08008a5b
 80087f0:	08008a5b 	.word	0x08008a5b
 80087f4:	080087f9 	.word	0x080087f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	f107 0108 	add.w	r1, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800881a:	e126      	b.n	8008a6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fb0e 	bl	8008e40 <USBD_CtlError>
        err++;
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	3301      	adds	r3, #1
 8008828:	72fb      	strb	r3, [r7, #11]
      break;
 800882a:	e11e      	b.n	8008a6a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
      break;
 8008842:	e112      	b.n	8008a6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7c1b      	ldrb	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10d      	bne.n	8008868 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	f107 0208 	add.w	r2, r7, #8
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
 800885c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	2202      	movs	r2, #2
 8008864:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008866:	e100      	b.n	8008a6a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	f107 0208 	add.w	r2, r7, #8
 8008874:	4610      	mov	r0, r2
 8008876:	4798      	blx	r3
 8008878:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	2202      	movs	r2, #2
 8008880:	701a      	strb	r2, [r3, #0]
      break;
 8008882:	e0f2      	b.n	8008a6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	885b      	ldrh	r3, [r3, #2]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b05      	cmp	r3, #5
 800888c:	f200 80ac 	bhi.w	80089e8 <USBD_GetDescriptor+0x258>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <USBD_GetDescriptor+0x108>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088b1 	.word	0x080088b1
 800889c:	080088e5 	.word	0x080088e5
 80088a0:	08008919 	.word	0x08008919
 80088a4:	0800894d 	.word	0x0800894d
 80088a8:	08008981 	.word	0x08008981
 80088ac:	080089b5 	.word	0x080089b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7c12      	ldrb	r2, [r2, #16]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088d2:	e091      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fab2 	bl	8008e40 <USBD_CtlError>
            err++;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	3301      	adds	r3, #1
 80088e0:	72fb      	strb	r3, [r7, #11]
          break;
 80088e2:	e089      	b.n	80089f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008906:	e077      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa98 	bl	8008e40 <USBD_CtlError>
            err++;
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	3301      	adds	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
          break;
 8008916:	e06f      	b.n	80089f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800893a:	e05d      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa7e 	bl	8008e40 <USBD_CtlError>
            err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
          break;
 800894a:	e055      	b.n	80089f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896e:	e043      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa64 	bl	8008e40 <USBD_CtlError>
            err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
          break;
 800897e:	e03b      	b.n	80089f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e029      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa4a 	bl	8008e40 <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e021      	b.n	80089f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d6:	e00f      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa30 	bl	8008e40 <USBD_CtlError>
            err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
          break;
 80089e6:	e007      	b.n	80089f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa28 	bl	8008e40 <USBD_CtlError>
          err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80089f6:	bf00      	nop
      }
      break;
 80089f8:	e037      	b.n	8008a6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7c1b      	ldrb	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	f107 0208 	add.w	r2, r7, #8
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4798      	blx	r3
 8008a12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a14:	e029      	b.n	8008a6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa11 	bl	8008e40 <USBD_CtlError>
        err++;
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	3301      	adds	r3, #1
 8008a22:	72fb      	strb	r3, [r7, #11]
      break;
 8008a24:	e021      	b.n	8008a6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7c1b      	ldrb	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f107 0208 	add.w	r2, r7, #8
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4798      	blx	r3
 8008a3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	2207      	movs	r2, #7
 8008a46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a48:	e00f      	b.n	8008a6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f9f7 	bl	8008e40 <USBD_CtlError>
        err++;
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	3301      	adds	r3, #1
 8008a56:	72fb      	strb	r3, [r7, #11]
      break;
 8008a58:	e007      	b.n	8008a6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9ef 	bl	8008e40 <USBD_CtlError>
      err++;
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	3301      	adds	r3, #1
 8008a66:	72fb      	strb	r3, [r7, #11]
      break;
 8008a68:	bf00      	nop
  }

  if (err != 0U)
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d11e      	bne.n	8008aae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	88db      	ldrh	r3, [r3, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d016      	beq.n	8008aa6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88da      	ldrh	r2, [r3, #6]
 8008a82:	893b      	ldrh	r3, [r7, #8]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	bf28      	it	cs
 8008a88:	4613      	movcs	r3, r2
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	461a      	mov	r2, r3
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa44 	bl	8008f22 <USBD_CtlSendData>
 8008a9a:	e009      	b.n	8008ab0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f9ce 	bl	8008e40 <USBD_CtlError>
 8008aa4:	e004      	b.n	8008ab0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa95 	bl	8008fd6 <USBD_CtlSendStatus>
 8008aac:	e000      	b.n	8008ab0 <USBD_GetDescriptor+0x320>
    return;
 8008aae:	bf00      	nop
  }
}
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop

08008ab8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d131      	bne.n	8008b2e <USBD_SetAddress+0x76>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d12d      	bne.n	8008b2e <USBD_SetAddress+0x76>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ad8:	d829      	bhi.n	8008b2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d104      	bne.n	8008afc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f9a3 	bl	8008e40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	e01d      	b.n	8008b38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fea6 	bl	800985a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa61 	bl	8008fd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	e009      	b.n	8008b38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2c:	e004      	b.n	8008b38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f985 	bl	8008e40 <USBD_CtlError>
  }
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	4b4c      	ldr	r3, [pc, #304]	; (8008c88 <USBD_SetConfig+0x148>)
 8008b56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b58:	4b4b      	ldr	r3, [pc, #300]	; (8008c88 <USBD_SetConfig+0x148>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d905      	bls.n	8008b6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f96c 	bl	8008e40 <USBD_CtlError>
    return USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e088      	b.n	8008c7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d002      	beq.n	8008b7e <USBD_SetConfig+0x3e>
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d025      	beq.n	8008bc8 <USBD_SetConfig+0x88>
 8008b7c:	e071      	b.n	8008c62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b7e:	4b42      	ldr	r3, [pc, #264]	; (8008c88 <USBD_SetConfig+0x148>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d01c      	beq.n	8008bc0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008b86:	4b40      	ldr	r3, [pc, #256]	; (8008c88 <USBD_SetConfig+0x148>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b90:	4b3d      	ldr	r3, [pc, #244]	; (8008c88 <USBD_SetConfig+0x148>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff f992 	bl	8007ec0 <USBD_SetClassConfig>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f949 	bl	8008e40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bae:	e065      	b.n	8008c7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fa10 	bl	8008fd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bbe:	e05d      	b.n	8008c7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fa08 	bl	8008fd6 <USBD_CtlSendStatus>
      break;
 8008bc6:	e059      	b.n	8008c7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bc8:	4b2f      	ldr	r3, [pc, #188]	; (8008c88 <USBD_SetConfig+0x148>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d112      	bne.n	8008bf6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bd8:	4b2b      	ldr	r3, [pc, #172]	; (8008c88 <USBD_SetConfig+0x148>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008be2:	4b29      	ldr	r3, [pc, #164]	; (8008c88 <USBD_SetConfig+0x148>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff f985 	bl	8007ef8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9f1 	bl	8008fd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bf4:	e042      	b.n	8008c7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008bf6:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <USBD_SetConfig+0x148>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d02a      	beq.n	8008c5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff f973 	bl	8007ef8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c12:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <USBD_SetConfig+0x148>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <USBD_SetConfig+0x148>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff f94c 	bl	8007ec0 <USBD_SetClassConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00f      	beq.n	8008c52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f903 	bl	8008e40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff f958 	bl	8007ef8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c50:	e014      	b.n	8008c7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9bf 	bl	8008fd6 <USBD_CtlSendStatus>
      break;
 8008c58:	e010      	b.n	8008c7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9bb 	bl	8008fd6 <USBD_CtlSendStatus>
      break;
 8008c60:	e00c      	b.n	8008c7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8eb 	bl	8008e40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <USBD_SetConfig+0x148>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff f941 	bl	8007ef8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c76:	2303      	movs	r3, #3
 8008c78:	73fb      	strb	r3, [r7, #15]
      break;
 8008c7a:	bf00      	nop
  }

  return ret;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000404 	.word	0x20000404

08008c8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	88db      	ldrh	r3, [r3, #6]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d004      	beq.n	8008ca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f8cd 	bl	8008e40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ca6:	e023      	b.n	8008cf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	dc02      	bgt.n	8008cba <USBD_GetConfig+0x2e>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dc03      	bgt.n	8008cc0 <USBD_GetConfig+0x34>
 8008cb8:	e015      	b.n	8008ce6 <USBD_GetConfig+0x5a>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d00b      	beq.n	8008cd6 <USBD_GetConfig+0x4a>
 8008cbe:	e012      	b.n	8008ce6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	2201      	movs	r2, #1
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f927 	bl	8008f22 <USBD_CtlSendData>
        break;
 8008cd4:	e00c      	b.n	8008cf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f91f 	bl	8008f22 <USBD_CtlSendData>
        break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f8a9 	bl	8008e40 <USBD_CtlError>
        break;
 8008cee:	bf00      	nop
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d81e      	bhi.n	8008d4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	88db      	ldrh	r3, [r3, #6]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d004      	beq.n	8008d22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f890 	bl	8008e40 <USBD_CtlError>
        break;
 8008d20:	e01a      	b.n	8008d58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f043 0202 	orr.w	r2, r3, #2
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	330c      	adds	r3, #12
 8008d42:	2202      	movs	r2, #2
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f8eb 	bl	8008f22 <USBD_CtlSendData>
      break;
 8008d4c:	e004      	b.n	8008d58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f875 	bl	8008e40 <USBD_CtlError>
      break;
 8008d56:	bf00      	nop
  }
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d106      	bne.n	8008d80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f92b 	bl	8008fd6 <USBD_CtlSendStatus>
  }
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d80b      	bhi.n	8008db8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	885b      	ldrh	r3, [r3, #2]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10c      	bne.n	8008dc2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f910 	bl	8008fd6 <USBD_CtlSendStatus>
      }
      break;
 8008db6:	e004      	b.n	8008dc2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f840 	bl	8008e40 <USBD_CtlError>
      break;
 8008dc0:	e000      	b.n	8008dc4 <USBD_ClrFeature+0x3c>
      break;
 8008dc2:	bf00      	nop
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7ff fa92 	bl	8008320 <SWAPBYTE>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff fa85 	bl	8008320 <SWAPBYTE>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fa78 	bl	8008320 <SWAPBYTE>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	80da      	strh	r2, [r3, #6]
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4a:	2180      	movs	r1, #128	; 0x80
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fc99 	bl	8009784 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e52:	2100      	movs	r1, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc95 	bl	8009784 <USBD_LL_StallEP>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d036      	beq.n	8008ee6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e7c:	6938      	ldr	r0, [r7, #16]
 8008e7e:	f000 f836 	bl	8008eee <USBD_GetLen>
 8008e82:	4603      	mov	r3, r0
 8008e84:	3301      	adds	r3, #1
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	7812      	ldrb	r2, [r2, #0]
 8008e9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eb2:	e013      	b.n	8008edc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	613b      	str	r3, [r7, #16]
    idx++;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e7      	bne.n	8008eb4 <USBD_GetString+0x52>
 8008ee4:	e000      	b.n	8008ee8 <USBD_GetString+0x86>
    return;
 8008ee6:	bf00      	nop
  }
}
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008efe:	e005      	b.n	8008f0c <USBD_GetLen+0x1e>
  {
    len++;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	3301      	adds	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f5      	bne.n	8008f00 <USBD_GetLen+0x12>
  }

  return len;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fca5 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fc94 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2203      	movs	r2, #3
 8008f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fc98 	bl	80098da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fc87 	bl	80098da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc53 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2205      	movs	r2, #5
 8009008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800900c:	2300      	movs	r3, #0
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fc61 	bl	80098da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009028:	2200      	movs	r2, #0
 800902a:	4912      	ldr	r1, [pc, #72]	; (8009074 <MX_USB_Device_Init+0x50>)
 800902c:	4812      	ldr	r0, [pc, #72]	; (8009078 <MX_USB_Device_Init+0x54>)
 800902e:	f7fe fed9 	bl	8007de4 <USBD_Init>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009038:	f7f7 fd1a 	bl	8000a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800903c:	490f      	ldr	r1, [pc, #60]	; (800907c <MX_USB_Device_Init+0x58>)
 800903e:	480e      	ldr	r0, [pc, #56]	; (8009078 <MX_USB_Device_Init+0x54>)
 8009040:	f7fe ff00 	bl	8007e44 <USBD_RegisterClass>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800904a:	f7f7 fd11 	bl	8000a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800904e:	490c      	ldr	r1, [pc, #48]	; (8009080 <MX_USB_Device_Init+0x5c>)
 8009050:	4809      	ldr	r0, [pc, #36]	; (8009078 <MX_USB_Device_Init+0x54>)
 8009052:	f7fe fe21 	bl	8007c98 <USBD_CDC_RegisterInterface>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800905c:	f7f7 fd08 	bl	8000a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009060:	4805      	ldr	r0, [pc, #20]	; (8009078 <MX_USB_Device_Init+0x54>)
 8009062:	f7fe ff16 	bl	8007e92 <USBD_Start>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800906c:	f7f7 fd00 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009070:	bf00      	nop
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000130 	.word	0x20000130
 8009078:	20000408 	.word	0x20000408
 800907c:	20000018 	.word	0x20000018
 8009080:	2000011c 	.word	0x2000011c

08009084 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009088:	2200      	movs	r2, #0
 800908a:	4905      	ldr	r1, [pc, #20]	; (80090a0 <CDC_Init_FS+0x1c>)
 800908c:	4805      	ldr	r0, [pc, #20]	; (80090a4 <CDC_Init_FS+0x20>)
 800908e:	f7fe fe18 	bl	8007cc2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009092:	4905      	ldr	r1, [pc, #20]	; (80090a8 <CDC_Init_FS+0x24>)
 8009094:	4803      	ldr	r0, [pc, #12]	; (80090a4 <CDC_Init_FS+0x20>)
 8009096:	f7fe fe32 	bl	8007cfe <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800909a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800909c:	4618      	mov	r0, r3
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000ac0 	.word	0x20000ac0
 80090a4:	20000408 	.word	0x20000408
 80090a8:	200006d8 	.word	0x200006d8

080090ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80090b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
 80090c8:	4613      	mov	r3, r2
 80090ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b23      	cmp	r3, #35	; 0x23
 80090d0:	d84a      	bhi.n	8009168 <CDC_Control_FS+0xac>
 80090d2:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <CDC_Control_FS+0x1c>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	08009169 	.word	0x08009169
 80090dc:	08009169 	.word	0x08009169
 80090e0:	08009169 	.word	0x08009169
 80090e4:	08009169 	.word	0x08009169
 80090e8:	08009169 	.word	0x08009169
 80090ec:	08009169 	.word	0x08009169
 80090f0:	08009169 	.word	0x08009169
 80090f4:	08009169 	.word	0x08009169
 80090f8:	08009169 	.word	0x08009169
 80090fc:	08009169 	.word	0x08009169
 8009100:	08009169 	.word	0x08009169
 8009104:	08009169 	.word	0x08009169
 8009108:	08009169 	.word	0x08009169
 800910c:	08009169 	.word	0x08009169
 8009110:	08009169 	.word	0x08009169
 8009114:	08009169 	.word	0x08009169
 8009118:	08009169 	.word	0x08009169
 800911c:	08009169 	.word	0x08009169
 8009120:	08009169 	.word	0x08009169
 8009124:	08009169 	.word	0x08009169
 8009128:	08009169 	.word	0x08009169
 800912c:	08009169 	.word	0x08009169
 8009130:	08009169 	.word	0x08009169
 8009134:	08009169 	.word	0x08009169
 8009138:	08009169 	.word	0x08009169
 800913c:	08009169 	.word	0x08009169
 8009140:	08009169 	.word	0x08009169
 8009144:	08009169 	.word	0x08009169
 8009148:	08009169 	.word	0x08009169
 800914c:	08009169 	.word	0x08009169
 8009150:	08009169 	.word	0x08009169
 8009154:	08009169 	.word	0x08009169
 8009158:	08009169 	.word	0x08009169
 800915c:	08009169 	.word	0x08009169
 8009160:	08009169 	.word	0x08009169
 8009164:	08009169 	.word	0x08009169
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009168:	bf00      	nop
	}

	return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7f7 f86f 	bl	8000268 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <CDC_Receive_FS+0x2c>)
 800918e:	f7fe fdb6 	bl	8007cfe <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009192:	4804      	ldr	r0, [pc, #16]	; (80091a4 <CDC_Receive_FS+0x2c>)
 8009194:	f7fe fdfc 	bl	8007d90 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009198:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000408 	.word	0x20000408

080091a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 80091b8:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <CDC_Transmit_FS+0x48>)
 80091ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091be:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e00b      	b.n	80091e6 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091ce:	887b      	ldrh	r3, [r7, #2]
 80091d0:	461a      	mov	r2, r3
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4806      	ldr	r0, [pc, #24]	; (80091f0 <CDC_Transmit_FS+0x48>)
 80091d6:	f7fe fd74 	bl	8007cc2 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091da:	4805      	ldr	r0, [pc, #20]	; (80091f0 <CDC_Transmit_FS+0x48>)
 80091dc:	f7fe fda8 	bl	8007d30 <USBD_CDC_TransmitPacket>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	20000408 	.word	0x20000408

080091f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800920a:	4618      	mov	r0, r3
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
	...

08009218 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	6039      	str	r1, [r7, #0]
 8009222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2212      	movs	r2, #18
 8009228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800922a:	4b03      	ldr	r3, [pc, #12]	; (8009238 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20000150 	.word	0x20000150

0800923c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2204      	movs	r2, #4
 800924c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800924e:	4b03      	ldr	r3, [pc, #12]	; (800925c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	20000164 	.word	0x20000164

08009260 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	6039      	str	r1, [r7, #0]
 800926a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d105      	bne.n	800927e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	4907      	ldr	r1, [pc, #28]	; (8009294 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009276:	4808      	ldr	r0, [pc, #32]	; (8009298 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009278:	f7ff fdf3 	bl	8008e62 <USBD_GetString>
 800927c:	e004      	b.n	8009288 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	4904      	ldr	r1, [pc, #16]	; (8009294 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009282:	4805      	ldr	r0, [pc, #20]	; (8009298 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009284:	f7ff fded 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009288:	4b02      	ldr	r3, [pc, #8]	; (8009294 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20000ea8 	.word	0x20000ea8
 8009298:	0800a4c4 	.word	0x0800a4c4

0800929c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	6039      	str	r1, [r7, #0]
 80092a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	4904      	ldr	r1, [pc, #16]	; (80092bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80092ac:	4804      	ldr	r0, [pc, #16]	; (80092c0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80092ae:	f7ff fdd8 	bl	8008e62 <USBD_GetString>
  return USBD_StrDesc;
 80092b2:	4b02      	ldr	r3, [pc, #8]	; (80092bc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000ea8 	.word	0x20000ea8
 80092c0:	0800a4dc 	.word	0x0800a4dc

080092c4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	221a      	movs	r2, #26
 80092d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092d6:	f000 f843 	bl	8009360 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80092da:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000168 	.word	0x20000168

080092e8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4907      	ldr	r1, [pc, #28]	; (800931c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092fe:	4808      	ldr	r0, [pc, #32]	; (8009320 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009300:	f7ff fdaf 	bl	8008e62 <USBD_GetString>
 8009304:	e004      	b.n	8009310 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4904      	ldr	r1, [pc, #16]	; (800931c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800930a:	4805      	ldr	r0, [pc, #20]	; (8009320 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800930c:	f7ff fda9 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009310:	4b02      	ldr	r3, [pc, #8]	; (800931c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	20000ea8 	.word	0x20000ea8
 8009320:	0800a4f0 	.word	0x0800a4f0

08009324 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4907      	ldr	r1, [pc, #28]	; (8009358 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800933a:	4808      	ldr	r0, [pc, #32]	; (800935c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800933c:	f7ff fd91 	bl	8008e62 <USBD_GetString>
 8009340:	e004      	b.n	800934c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4904      	ldr	r1, [pc, #16]	; (8009358 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009346:	4805      	ldr	r0, [pc, #20]	; (800935c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009348:	f7ff fd8b 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000ea8 	.word	0x20000ea8
 800935c:	0800a4fc 	.word	0x0800a4fc

08009360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009366:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <Get_SerialNum+0x44>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800936c:	4b0e      	ldr	r3, [pc, #56]	; (80093a8 <Get_SerialNum+0x48>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009372:	4b0e      	ldr	r3, [pc, #56]	; (80093ac <Get_SerialNum+0x4c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4413      	add	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009386:	2208      	movs	r2, #8
 8009388:	4909      	ldr	r1, [pc, #36]	; (80093b0 <Get_SerialNum+0x50>)
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f814 	bl	80093b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009390:	2204      	movs	r2, #4
 8009392:	4908      	ldr	r1, [pc, #32]	; (80093b4 <Get_SerialNum+0x54>)
 8009394:	68b8      	ldr	r0, [r7, #8]
 8009396:	f000 f80f 	bl	80093b8 <IntToUnicode>
  }
}
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	1fff7590 	.word	0x1fff7590
 80093a8:	1fff7594 	.word	0x1fff7594
 80093ac:	1fff7598 	.word	0x1fff7598
 80093b0:	2000016a 	.word	0x2000016a
 80093b4:	2000017a 	.word	0x2000017a

080093b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
 80093ce:	e027      	b.n	8009420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	0f1b      	lsrs	r3, r3, #28
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	d80b      	bhi.n	80093f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0f1b      	lsrs	r3, r3, #28
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	440b      	add	r3, r1
 80093e8:	3230      	adds	r2, #48	; 0x30
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	e00a      	b.n	8009406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	0f1b      	lsrs	r3, r3, #28
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	4619      	mov	r1, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	440b      	add	r3, r1
 8009400:	3237      	adds	r2, #55	; 0x37
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	3301      	adds	r3, #1
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	3301      	adds	r3, #1
 800941e:	75fb      	strb	r3, [r7, #23]
 8009420:	7dfa      	ldrb	r2, [r7, #23]
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	429a      	cmp	r2, r3
 8009426:	d3d3      	bcc.n	80093d0 <IntToUnicode+0x18>
  }
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
	...

08009438 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b094      	sub	sp, #80	; 0x50
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	2244      	movs	r2, #68	; 0x44
 8009446:	2100      	movs	r1, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fb25 	bl	8009a98 <memset>
  if(pcdHandle->Instance==USB)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a15      	ldr	r2, [pc, #84]	; (80094a8 <HAL_PCD_MspInit+0x70>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d123      	bne.n	80094a0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800945c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800945e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009462:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009464:	f107 030c 	add.w	r3, r7, #12
 8009468:	4618      	mov	r0, r3
 800946a:	f7fa fba3 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009474:	f7f7 fafc 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009478:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <HAL_PCD_MspInit+0x74>)
 800947a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947c:	4a0b      	ldr	r2, [pc, #44]	; (80094ac <HAL_PCD_MspInit+0x74>)
 800947e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009482:	6593      	str	r3, [r2, #88]	; 0x58
 8009484:	4b09      	ldr	r3, [pc, #36]	; (80094ac <HAL_PCD_MspInit+0x74>)
 8009486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	2014      	movs	r0, #20
 8009496:	f7f7 fed0 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800949a:	2014      	movs	r0, #20
 800949c:	f7f7 fee7 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094a0:	bf00      	nop
 80094a2:	3750      	adds	r7, #80	; 0x50
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	40005c00 	.word	0x40005c00
 80094ac:	40021000 	.word	0x40021000

080094b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7fe fd2e 	bl	8007f28 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	440b      	add	r3, r1
 80094f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	4619      	mov	r1, r3
 80094fe:	f7fe fd68 	bl	8007fd2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	440b      	add	r3, r1
 800952a:	333c      	adds	r3, #60	; 0x3c
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	4619      	mov	r1, r3
 8009532:	f7fe fdb1 	bl	8008098 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fec5 	bl	80082dc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009562:	2301      	movs	r3, #1
 8009564:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d001      	beq.n	8009572 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800956e:	f7f7 fa7f 	bl	8000a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009578:	7bfa      	ldrb	r2, [r7, #15]
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fe6f 	bl	8008260 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fe1b 	bl	80081c4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fe6a 	bl	8008280 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095b4:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <HAL_PCD_SuspendCallback+0x30>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	4a03      	ldr	r2, [pc, #12]	; (80095c8 <HAL_PCD_SuspendCallback+0x30>)
 80095ba:	f043 0306 	orr.w	r3, r3, #6
 80095be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	e000ed00 	.word	0xe000ed00

080095cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095dc:	4b08      	ldr	r3, [pc, #32]	; (8009600 <HAL_PCD_ResumeCallback+0x34>)
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	4a07      	ldr	r2, [pc, #28]	; (8009600 <HAL_PCD_ResumeCallback+0x34>)
 80095e2:	f023 0306 	bic.w	r3, r3, #6
 80095e6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80095e8:	f000 f9fa 	bl	80099e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fe5a 	bl	80082ac <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	e000ed00 	.word	0xe000ed00

08009604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800960c:	4a2b      	ldr	r2, [pc, #172]	; (80096bc <USBD_LL_Init+0xb8>)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a29      	ldr	r2, [pc, #164]	; (80096bc <USBD_LL_Init+0xb8>)
 8009618:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800961c:	4b27      	ldr	r3, [pc, #156]	; (80096bc <USBD_LL_Init+0xb8>)
 800961e:	4a28      	ldr	r2, [pc, #160]	; (80096c0 <USBD_LL_Init+0xbc>)
 8009620:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009622:	4b26      	ldr	r3, [pc, #152]	; (80096bc <USBD_LL_Init+0xb8>)
 8009624:	2208      	movs	r2, #8
 8009626:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009628:	4b24      	ldr	r3, [pc, #144]	; (80096bc <USBD_LL_Init+0xb8>)
 800962a:	2202      	movs	r2, #2
 800962c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800962e:	4b23      	ldr	r3, [pc, #140]	; (80096bc <USBD_LL_Init+0xb8>)
 8009630:	2202      	movs	r2, #2
 8009632:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009634:	4b21      	ldr	r3, [pc, #132]	; (80096bc <USBD_LL_Init+0xb8>)
 8009636:	2200      	movs	r2, #0
 8009638:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800963a:	4b20      	ldr	r3, [pc, #128]	; (80096bc <USBD_LL_Init+0xb8>)
 800963c:	2200      	movs	r2, #0
 800963e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009640:	4b1e      	ldr	r3, [pc, #120]	; (80096bc <USBD_LL_Init+0xb8>)
 8009642:	2200      	movs	r2, #0
 8009644:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009646:	4b1d      	ldr	r3, [pc, #116]	; (80096bc <USBD_LL_Init+0xb8>)
 8009648:	2200      	movs	r2, #0
 800964a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800964c:	481b      	ldr	r0, [pc, #108]	; (80096bc <USBD_LL_Init+0xb8>)
 800964e:	f7f7 ffdd 	bl	800160c <HAL_PCD_Init>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009658:	f7f7 fa0a 	bl	8000a70 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009662:	2318      	movs	r3, #24
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	f7f9 fc96 	bl	8002f98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009672:	2358      	movs	r3, #88	; 0x58
 8009674:	2200      	movs	r2, #0
 8009676:	2180      	movs	r1, #128	; 0x80
 8009678:	f7f9 fc8e 	bl	8002f98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009682:	23c0      	movs	r3, #192	; 0xc0
 8009684:	2200      	movs	r2, #0
 8009686:	2181      	movs	r1, #129	; 0x81
 8009688:	f7f9 fc86 	bl	8002f98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009692:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009696:	2200      	movs	r2, #0
 8009698:	2101      	movs	r1, #1
 800969a:	f7f9 fc7d 	bl	8002f98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a8:	2200      	movs	r2, #0
 80096aa:	2182      	movs	r1, #130	; 0x82
 80096ac:	f7f9 fc74 	bl	8002f98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200010a8 	.word	0x200010a8
 80096c0:	40005c00 	.word	0x40005c00

080096c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096da:	4618      	mov	r0, r3
 80096dc:	f7f8 f87b 	bl	80017d6 <HAL_PCD_Start>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f980 	bl	80099ec <USBD_Get_USB_Status>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	4608      	mov	r0, r1
 8009704:	4611      	mov	r1, r2
 8009706:	461a      	mov	r2, r3
 8009708:	4603      	mov	r3, r0
 800970a:	70fb      	strb	r3, [r7, #3]
 800970c:	460b      	mov	r3, r1
 800970e:	70bb      	strb	r3, [r7, #2]
 8009710:	4613      	mov	r3, r2
 8009712:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009722:	78bb      	ldrb	r3, [r7, #2]
 8009724:	883a      	ldrh	r2, [r7, #0]
 8009726:	78f9      	ldrb	r1, [r7, #3]
 8009728:	f7f8 f9c3 	bl	8001ab2 <HAL_PCD_EP_Open>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f95a 	bl	80099ec <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	4611      	mov	r1, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f7f8 fa0a 	bl	8001b7e <HAL_PCD_EP_Close>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f93b 	bl	80099ec <USBD_Get_USB_Status>
 8009776:	4603      	mov	r3, r0
 8009778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977a:	7bbb      	ldrb	r3, [r7, #14]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800979e:	78fa      	ldrb	r2, [r7, #3]
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f8 facb 	bl	8001d3e <HAL_PCD_EP_SetStall>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f91c 	bl	80099ec <USBD_Get_USB_Status>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f8 fafe 	bl	8001de2 <HAL_PCD_EP_ClrStall>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 f8fd 	bl	80099ec <USBD_Get_USB_Status>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009812:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009818:	2b00      	cmp	r3, #0
 800981a:	da0c      	bge.n	8009836 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800981c:	78fb      	ldrb	r3, [r7, #3]
 800981e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009822:	68f9      	ldr	r1, [r7, #12]
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	440b      	add	r3, r1
 8009830:	3302      	adds	r3, #2
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	e00b      	b.n	800984e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800983c:	68f9      	ldr	r1, [r7, #12]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	440b      	add	r3, r1
 8009848:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800984c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7f8 f8f5 	bl	8001a68 <HAL_PCD_SetAddress>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f8b1 	bl	80099ec <USBD_Get_USB_Status>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	460b      	mov	r3, r1
 80098a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098b6:	7af9      	ldrb	r1, [r7, #11]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	f7f8 f9fc 	bl	8001cb8 <HAL_PCD_EP_Transmit>
 80098c0:	4603      	mov	r3, r0
 80098c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f890 	bl	80099ec <USBD_Get_USB_Status>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
 80098e6:	460b      	mov	r3, r1
 80098e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098f8:	7af9      	ldrb	r1, [r7, #11]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	f7f8 f986 	bl	8001c0e <HAL_PCD_EP_Receive>
 8009902:	4603      	mov	r3, r0
 8009904:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f86f 	bl	80099ec <USBD_Get_USB_Status>
 800990e:	4603      	mov	r3, r0
 8009910:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009912:	7dbb      	ldrb	r3, [r7, #22]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7f8 f9a8 	bl	8001c88 <HAL_PCD_EP_GetRxCount>
 8009938:	4603      	mov	r3, r0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <HAL_PCDEx_LPM_Callback+0x18>
 8009956:	2b01      	cmp	r3, #1
 8009958:	d013      	beq.n	8009982 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800995a:	e023      	b.n	80099a4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d007      	beq.n	8009974 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009964:	f000 f83c 	bl	80099e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009968:	4b10      	ldr	r3, [pc, #64]	; (80099ac <HAL_PCDEx_LPM_Callback+0x68>)
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	4a0f      	ldr	r2, [pc, #60]	; (80099ac <HAL_PCDEx_LPM_Callback+0x68>)
 800996e:	f023 0306 	bic.w	r3, r3, #6
 8009972:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fc96 	bl	80082ac <USBD_LL_Resume>
    break;
 8009980:	e010      	b.n	80099a4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe fc79 	bl	8008280 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <HAL_PCDEx_LPM_Callback+0x68>)
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	4a04      	ldr	r2, [pc, #16]	; (80099ac <HAL_PCDEx_LPM_Callback+0x68>)
 800999c:	f043 0306 	orr.w	r3, r3, #6
 80099a0:	6113      	str	r3, [r2, #16]
    break;
 80099a2:	bf00      	nop
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	e000ed00 	.word	0xe000ed00

080099b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099b8:	4b03      	ldr	r3, [pc, #12]	; (80099c8 <USBD_static_malloc+0x18>)
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	2000139c 	.word	0x2000139c

080099cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]

}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80099e4:	f7f6 fcf0 	bl	80003c8 <SystemClock_Config>
}
 80099e8:	bf00      	nop
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d817      	bhi.n	8009a30 <USBD_Get_USB_Status+0x44>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <USBD_Get_USB_Status+0x1c>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a19 	.word	0x08009a19
 8009a0c:	08009a1f 	.word	0x08009a1f
 8009a10:	08009a25 	.word	0x08009a25
 8009a14:	08009a2b 	.word	0x08009a2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1c:	e00b      	b.n	8009a36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	73fb      	strb	r3, [r7, #15]
    break;
 8009a22:	e008      	b.n	8009a36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	e005      	b.n	8009a36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2e:	e002      	b.n	8009a36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a30:	2303      	movs	r3, #3
 8009a32:	73fb      	strb	r3, [r7, #15]
    break;
 8009a34:	bf00      	nop
  }
  return usb_status;
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <__errno>:
 8009a44:	4b01      	ldr	r3, [pc, #4]	; (8009a4c <__errno+0x8>)
 8009a46:	6818      	ldr	r0, [r3, #0]
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000184 	.word	0x20000184

08009a50 <__libc_init_array>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	4d0d      	ldr	r5, [pc, #52]	; (8009a88 <__libc_init_array+0x38>)
 8009a54:	4c0d      	ldr	r4, [pc, #52]	; (8009a8c <__libc_init_array+0x3c>)
 8009a56:	1b64      	subs	r4, r4, r5
 8009a58:	10a4      	asrs	r4, r4, #2
 8009a5a:	2600      	movs	r6, #0
 8009a5c:	42a6      	cmp	r6, r4
 8009a5e:	d109      	bne.n	8009a74 <__libc_init_array+0x24>
 8009a60:	4d0b      	ldr	r5, [pc, #44]	; (8009a90 <__libc_init_array+0x40>)
 8009a62:	4c0c      	ldr	r4, [pc, #48]	; (8009a94 <__libc_init_array+0x44>)
 8009a64:	f000 fd1e 	bl	800a4a4 <_init>
 8009a68:	1b64      	subs	r4, r4, r5
 8009a6a:	10a4      	asrs	r4, r4, #2
 8009a6c:	2600      	movs	r6, #0
 8009a6e:	42a6      	cmp	r6, r4
 8009a70:	d105      	bne.n	8009a7e <__libc_init_array+0x2e>
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a78:	4798      	blx	r3
 8009a7a:	3601      	adds	r6, #1
 8009a7c:	e7ee      	b.n	8009a5c <__libc_init_array+0xc>
 8009a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a82:	4798      	blx	r3
 8009a84:	3601      	adds	r6, #1
 8009a86:	e7f2      	b.n	8009a6e <__libc_init_array+0x1e>
 8009a88:	0800a580 	.word	0x0800a580
 8009a8c:	0800a580 	.word	0x0800a580
 8009a90:	0800a580 	.word	0x0800a580
 8009a94:	0800a584 	.word	0x0800a584

08009a98 <memset>:
 8009a98:	4402      	add	r2, r0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d100      	bne.n	8009aa2 <memset+0xa>
 8009aa0:	4770      	bx	lr
 8009aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa6:	e7f9      	b.n	8009a9c <memset+0x4>

08009aa8 <_puts_r>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	460e      	mov	r6, r1
 8009aac:	4605      	mov	r5, r0
 8009aae:	b118      	cbz	r0, 8009ab8 <_puts_r+0x10>
 8009ab0:	6983      	ldr	r3, [r0, #24]
 8009ab2:	b90b      	cbnz	r3, 8009ab8 <_puts_r+0x10>
 8009ab4:	f000 fa48 	bl	8009f48 <__sinit>
 8009ab8:	69ab      	ldr	r3, [r5, #24]
 8009aba:	68ac      	ldr	r4, [r5, #8]
 8009abc:	b913      	cbnz	r3, 8009ac4 <_puts_r+0x1c>
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 fa42 	bl	8009f48 <__sinit>
 8009ac4:	4b2c      	ldr	r3, [pc, #176]	; (8009b78 <_puts_r+0xd0>)
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	d120      	bne.n	8009b0c <_puts_r+0x64>
 8009aca:	686c      	ldr	r4, [r5, #4]
 8009acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ace:	07db      	lsls	r3, r3, #31
 8009ad0:	d405      	bmi.n	8009ade <_puts_r+0x36>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	0598      	lsls	r0, r3, #22
 8009ad6:	d402      	bmi.n	8009ade <_puts_r+0x36>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ada:	f000 fad3 	bl	800a084 <__retarget_lock_acquire_recursive>
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	0719      	lsls	r1, r3, #28
 8009ae2:	d51d      	bpl.n	8009b20 <_puts_r+0x78>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	b1db      	cbz	r3, 8009b20 <_puts_r+0x78>
 8009ae8:	3e01      	subs	r6, #1
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009af0:	3b01      	subs	r3, #1
 8009af2:	60a3      	str	r3, [r4, #8]
 8009af4:	bb39      	cbnz	r1, 8009b46 <_puts_r+0x9e>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	da38      	bge.n	8009b6c <_puts_r+0xc4>
 8009afa:	4622      	mov	r2, r4
 8009afc:	210a      	movs	r1, #10
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 f848 	bl	8009b94 <__swbuf_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d011      	beq.n	8009b2c <_puts_r+0x84>
 8009b08:	250a      	movs	r5, #10
 8009b0a:	e011      	b.n	8009b30 <_puts_r+0x88>
 8009b0c:	4b1b      	ldr	r3, [pc, #108]	; (8009b7c <_puts_r+0xd4>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d101      	bne.n	8009b16 <_puts_r+0x6e>
 8009b12:	68ac      	ldr	r4, [r5, #8]
 8009b14:	e7da      	b.n	8009acc <_puts_r+0x24>
 8009b16:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <_puts_r+0xd8>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	bf08      	it	eq
 8009b1c:	68ec      	ldreq	r4, [r5, #12]
 8009b1e:	e7d5      	b.n	8009acc <_puts_r+0x24>
 8009b20:	4621      	mov	r1, r4
 8009b22:	4628      	mov	r0, r5
 8009b24:	f000 f888 	bl	8009c38 <__swsetup_r>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d0dd      	beq.n	8009ae8 <_puts_r+0x40>
 8009b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b32:	07da      	lsls	r2, r3, #31
 8009b34:	d405      	bmi.n	8009b42 <_puts_r+0x9a>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	059b      	lsls	r3, r3, #22
 8009b3a:	d402      	bmi.n	8009b42 <_puts_r+0x9a>
 8009b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b3e:	f000 faa2 	bl	800a086 <__retarget_lock_release_recursive>
 8009b42:	4628      	mov	r0, r5
 8009b44:	bd70      	pop	{r4, r5, r6, pc}
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da04      	bge.n	8009b54 <_puts_r+0xac>
 8009b4a:	69a2      	ldr	r2, [r4, #24]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	dc06      	bgt.n	8009b5e <_puts_r+0xb6>
 8009b50:	290a      	cmp	r1, #10
 8009b52:	d004      	beq.n	8009b5e <_puts_r+0xb6>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	7019      	strb	r1, [r3, #0]
 8009b5c:	e7c5      	b.n	8009aea <_puts_r+0x42>
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4628      	mov	r0, r5
 8009b62:	f000 f817 	bl	8009b94 <__swbuf_r>
 8009b66:	3001      	adds	r0, #1
 8009b68:	d1bf      	bne.n	8009aea <_puts_r+0x42>
 8009b6a:	e7df      	b.n	8009b2c <_puts_r+0x84>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	250a      	movs	r5, #10
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	6022      	str	r2, [r4, #0]
 8009b74:	701d      	strb	r5, [r3, #0]
 8009b76:	e7db      	b.n	8009b30 <_puts_r+0x88>
 8009b78:	0800a540 	.word	0x0800a540
 8009b7c:	0800a560 	.word	0x0800a560
 8009b80:	0800a520 	.word	0x0800a520

08009b84 <puts>:
 8009b84:	4b02      	ldr	r3, [pc, #8]	; (8009b90 <puts+0xc>)
 8009b86:	4601      	mov	r1, r0
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	f7ff bf8d 	b.w	8009aa8 <_puts_r>
 8009b8e:	bf00      	nop
 8009b90:	20000184 	.word	0x20000184

08009b94 <__swbuf_r>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	460e      	mov	r6, r1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	b118      	cbz	r0, 8009ba6 <__swbuf_r+0x12>
 8009b9e:	6983      	ldr	r3, [r0, #24]
 8009ba0:	b90b      	cbnz	r3, 8009ba6 <__swbuf_r+0x12>
 8009ba2:	f000 f9d1 	bl	8009f48 <__sinit>
 8009ba6:	4b21      	ldr	r3, [pc, #132]	; (8009c2c <__swbuf_r+0x98>)
 8009ba8:	429c      	cmp	r4, r3
 8009baa:	d12b      	bne.n	8009c04 <__swbuf_r+0x70>
 8009bac:	686c      	ldr	r4, [r5, #4]
 8009bae:	69a3      	ldr	r3, [r4, #24]
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	071a      	lsls	r2, r3, #28
 8009bb6:	d52f      	bpl.n	8009c18 <__swbuf_r+0x84>
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	b36b      	cbz	r3, 8009c18 <__swbuf_r+0x84>
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	1ac0      	subs	r0, r0, r3
 8009bc2:	6963      	ldr	r3, [r4, #20]
 8009bc4:	b2f6      	uxtb	r6, r6
 8009bc6:	4283      	cmp	r3, r0
 8009bc8:	4637      	mov	r7, r6
 8009bca:	dc04      	bgt.n	8009bd6 <__swbuf_r+0x42>
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 f926 	bl	8009e20 <_fflush_r>
 8009bd4:	bb30      	cbnz	r0, 8009c24 <__swbuf_r+0x90>
 8009bd6:	68a3      	ldr	r3, [r4, #8]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	60a3      	str	r3, [r4, #8]
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	6022      	str	r2, [r4, #0]
 8009be2:	701e      	strb	r6, [r3, #0]
 8009be4:	6963      	ldr	r3, [r4, #20]
 8009be6:	3001      	adds	r0, #1
 8009be8:	4283      	cmp	r3, r0
 8009bea:	d004      	beq.n	8009bf6 <__swbuf_r+0x62>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	07db      	lsls	r3, r3, #31
 8009bf0:	d506      	bpl.n	8009c00 <__swbuf_r+0x6c>
 8009bf2:	2e0a      	cmp	r6, #10
 8009bf4:	d104      	bne.n	8009c00 <__swbuf_r+0x6c>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f000 f911 	bl	8009e20 <_fflush_r>
 8009bfe:	b988      	cbnz	r0, 8009c24 <__swbuf_r+0x90>
 8009c00:	4638      	mov	r0, r7
 8009c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c04:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <__swbuf_r+0x9c>)
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d101      	bne.n	8009c0e <__swbuf_r+0x7a>
 8009c0a:	68ac      	ldr	r4, [r5, #8]
 8009c0c:	e7cf      	b.n	8009bae <__swbuf_r+0x1a>
 8009c0e:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <__swbuf_r+0xa0>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	bf08      	it	eq
 8009c14:	68ec      	ldreq	r4, [r5, #12]
 8009c16:	e7ca      	b.n	8009bae <__swbuf_r+0x1a>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 f80c 	bl	8009c38 <__swsetup_r>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d0cb      	beq.n	8009bbc <__swbuf_r+0x28>
 8009c24:	f04f 37ff 	mov.w	r7, #4294967295
 8009c28:	e7ea      	b.n	8009c00 <__swbuf_r+0x6c>
 8009c2a:	bf00      	nop
 8009c2c:	0800a540 	.word	0x0800a540
 8009c30:	0800a560 	.word	0x0800a560
 8009c34:	0800a520 	.word	0x0800a520

08009c38 <__swsetup_r>:
 8009c38:	4b32      	ldr	r3, [pc, #200]	; (8009d04 <__swsetup_r+0xcc>)
 8009c3a:	b570      	push	{r4, r5, r6, lr}
 8009c3c:	681d      	ldr	r5, [r3, #0]
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	b125      	cbz	r5, 8009c4e <__swsetup_r+0x16>
 8009c44:	69ab      	ldr	r3, [r5, #24]
 8009c46:	b913      	cbnz	r3, 8009c4e <__swsetup_r+0x16>
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 f97d 	bl	8009f48 <__sinit>
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <__swsetup_r+0xd0>)
 8009c50:	429c      	cmp	r4, r3
 8009c52:	d10f      	bne.n	8009c74 <__swsetup_r+0x3c>
 8009c54:	686c      	ldr	r4, [r5, #4]
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c5c:	0719      	lsls	r1, r3, #28
 8009c5e:	d42c      	bmi.n	8009cba <__swsetup_r+0x82>
 8009c60:	06dd      	lsls	r5, r3, #27
 8009c62:	d411      	bmi.n	8009c88 <__swsetup_r+0x50>
 8009c64:	2309      	movs	r3, #9
 8009c66:	6033      	str	r3, [r6, #0]
 8009c68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c72:	e03e      	b.n	8009cf2 <__swsetup_r+0xba>
 8009c74:	4b25      	ldr	r3, [pc, #148]	; (8009d0c <__swsetup_r+0xd4>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	d101      	bne.n	8009c7e <__swsetup_r+0x46>
 8009c7a:	68ac      	ldr	r4, [r5, #8]
 8009c7c:	e7eb      	b.n	8009c56 <__swsetup_r+0x1e>
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <__swsetup_r+0xd8>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	bf08      	it	eq
 8009c84:	68ec      	ldreq	r4, [r5, #12]
 8009c86:	e7e6      	b.n	8009c56 <__swsetup_r+0x1e>
 8009c88:	0758      	lsls	r0, r3, #29
 8009c8a:	d512      	bpl.n	8009cb2 <__swsetup_r+0x7a>
 8009c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8e:	b141      	cbz	r1, 8009ca2 <__swsetup_r+0x6a>
 8009c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c94:	4299      	cmp	r1, r3
 8009c96:	d002      	beq.n	8009c9e <__swsetup_r+0x66>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 fa5b 	bl	800a154 <_free_r>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	6363      	str	r3, [r4, #52]	; 0x34
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	2300      	movs	r3, #0
 8009cac:	6063      	str	r3, [r4, #4]
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f043 0308 	orr.w	r3, r3, #8
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	b94b      	cbnz	r3, 8009cd2 <__swsetup_r+0x9a>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc8:	d003      	beq.n	8009cd2 <__swsetup_r+0x9a>
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f000 fa01 	bl	800a0d4 <__smakebuf_r>
 8009cd2:	89a0      	ldrh	r0, [r4, #12]
 8009cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cd8:	f010 0301 	ands.w	r3, r0, #1
 8009cdc:	d00a      	beq.n	8009cf4 <__swsetup_r+0xbc>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	6963      	ldr	r3, [r4, #20]
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	61a3      	str	r3, [r4, #24]
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	b943      	cbnz	r3, 8009cfe <__swsetup_r+0xc6>
 8009cec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cf0:	d1ba      	bne.n	8009c68 <__swsetup_r+0x30>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	0781      	lsls	r1, r0, #30
 8009cf6:	bf58      	it	pl
 8009cf8:	6963      	ldrpl	r3, [r4, #20]
 8009cfa:	60a3      	str	r3, [r4, #8]
 8009cfc:	e7f4      	b.n	8009ce8 <__swsetup_r+0xb0>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e7f7      	b.n	8009cf2 <__swsetup_r+0xba>
 8009d02:	bf00      	nop
 8009d04:	20000184 	.word	0x20000184
 8009d08:	0800a540 	.word	0x0800a540
 8009d0c:	0800a560 	.word	0x0800a560
 8009d10:	0800a520 	.word	0x0800a520

08009d14 <__sflush_r>:
 8009d14:	898a      	ldrh	r2, [r1, #12]
 8009d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	0710      	lsls	r0, r2, #28
 8009d1e:	460c      	mov	r4, r1
 8009d20:	d458      	bmi.n	8009dd4 <__sflush_r+0xc0>
 8009d22:	684b      	ldr	r3, [r1, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc05      	bgt.n	8009d34 <__sflush_r+0x20>
 8009d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc02      	bgt.n	8009d34 <__sflush_r+0x20>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	d0f9      	beq.n	8009d2e <__sflush_r+0x1a>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d40:	682f      	ldr	r7, [r5, #0]
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	d032      	beq.n	8009dac <__sflush_r+0x98>
 8009d46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	075a      	lsls	r2, r3, #29
 8009d4c:	d505      	bpl.n	8009d5a <__sflush_r+0x46>
 8009d4e:	6863      	ldr	r3, [r4, #4]
 8009d50:	1ac0      	subs	r0, r0, r3
 8009d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d54:	b10b      	cbz	r3, 8009d5a <__sflush_r+0x46>
 8009d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d58:	1ac0      	subs	r0, r0, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b0      	blx	r6
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	d106      	bne.n	8009d7a <__sflush_r+0x66>
 8009d6c:	6829      	ldr	r1, [r5, #0]
 8009d6e:	291d      	cmp	r1, #29
 8009d70:	d82c      	bhi.n	8009dcc <__sflush_r+0xb8>
 8009d72:	4a2a      	ldr	r2, [pc, #168]	; (8009e1c <__sflush_r+0x108>)
 8009d74:	40ca      	lsrs	r2, r1
 8009d76:	07d6      	lsls	r6, r2, #31
 8009d78:	d528      	bpl.n	8009dcc <__sflush_r+0xb8>
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	6062      	str	r2, [r4, #4]
 8009d7e:	04d9      	lsls	r1, r3, #19
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	6022      	str	r2, [r4, #0]
 8009d84:	d504      	bpl.n	8009d90 <__sflush_r+0x7c>
 8009d86:	1c42      	adds	r2, r0, #1
 8009d88:	d101      	bne.n	8009d8e <__sflush_r+0x7a>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	b903      	cbnz	r3, 8009d90 <__sflush_r+0x7c>
 8009d8e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d92:	602f      	str	r7, [r5, #0]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	d0ca      	beq.n	8009d2e <__sflush_r+0x1a>
 8009d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d002      	beq.n	8009da6 <__sflush_r+0x92>
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f9d7 	bl	800a154 <_free_r>
 8009da6:	2000      	movs	r0, #0
 8009da8:	6360      	str	r0, [r4, #52]	; 0x34
 8009daa:	e7c1      	b.n	8009d30 <__sflush_r+0x1c>
 8009dac:	6a21      	ldr	r1, [r4, #32]
 8009dae:	2301      	movs	r3, #1
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b0      	blx	r6
 8009db4:	1c41      	adds	r1, r0, #1
 8009db6:	d1c7      	bne.n	8009d48 <__sflush_r+0x34>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0c4      	beq.n	8009d48 <__sflush_r+0x34>
 8009dbe:	2b1d      	cmp	r3, #29
 8009dc0:	d001      	beq.n	8009dc6 <__sflush_r+0xb2>
 8009dc2:	2b16      	cmp	r3, #22
 8009dc4:	d101      	bne.n	8009dca <__sflush_r+0xb6>
 8009dc6:	602f      	str	r7, [r5, #0]
 8009dc8:	e7b1      	b.n	8009d2e <__sflush_r+0x1a>
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	e7ad      	b.n	8009d30 <__sflush_r+0x1c>
 8009dd4:	690f      	ldr	r7, [r1, #16]
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	d0a9      	beq.n	8009d2e <__sflush_r+0x1a>
 8009dda:	0793      	lsls	r3, r2, #30
 8009ddc:	680e      	ldr	r6, [r1, #0]
 8009dde:	bf08      	it	eq
 8009de0:	694b      	ldreq	r3, [r1, #20]
 8009de2:	600f      	str	r7, [r1, #0]
 8009de4:	bf18      	it	ne
 8009de6:	2300      	movne	r3, #0
 8009de8:	eba6 0807 	sub.w	r8, r6, r7
 8009dec:	608b      	str	r3, [r1, #8]
 8009dee:	f1b8 0f00 	cmp.w	r8, #0
 8009df2:	dd9c      	ble.n	8009d2e <__sflush_r+0x1a>
 8009df4:	6a21      	ldr	r1, [r4, #32]
 8009df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009df8:	4643      	mov	r3, r8
 8009dfa:	463a      	mov	r2, r7
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b0      	blx	r6
 8009e00:	2800      	cmp	r0, #0
 8009e02:	dc06      	bgt.n	8009e12 <__sflush_r+0xfe>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e78e      	b.n	8009d30 <__sflush_r+0x1c>
 8009e12:	4407      	add	r7, r0
 8009e14:	eba8 0800 	sub.w	r8, r8, r0
 8009e18:	e7e9      	b.n	8009dee <__sflush_r+0xda>
 8009e1a:	bf00      	nop
 8009e1c:	20400001 	.word	0x20400001

08009e20 <_fflush_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	4605      	mov	r5, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	b913      	cbnz	r3, 8009e30 <_fflush_r+0x10>
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	b118      	cbz	r0, 8009e3a <_fflush_r+0x1a>
 8009e32:	6983      	ldr	r3, [r0, #24]
 8009e34:	b90b      	cbnz	r3, 8009e3a <_fflush_r+0x1a>
 8009e36:	f000 f887 	bl	8009f48 <__sinit>
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <_fflush_r+0x6c>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d11b      	bne.n	8009e78 <_fflush_r+0x58>
 8009e40:	686c      	ldr	r4, [r5, #4]
 8009e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0ef      	beq.n	8009e2a <_fflush_r+0xa>
 8009e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e4c:	07d0      	lsls	r0, r2, #31
 8009e4e:	d404      	bmi.n	8009e5a <_fflush_r+0x3a>
 8009e50:	0599      	lsls	r1, r3, #22
 8009e52:	d402      	bmi.n	8009e5a <_fflush_r+0x3a>
 8009e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e56:	f000 f915 	bl	800a084 <__retarget_lock_acquire_recursive>
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	f7ff ff59 	bl	8009d14 <__sflush_r>
 8009e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e64:	07da      	lsls	r2, r3, #31
 8009e66:	4605      	mov	r5, r0
 8009e68:	d4e0      	bmi.n	8009e2c <_fflush_r+0xc>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	059b      	lsls	r3, r3, #22
 8009e6e:	d4dd      	bmi.n	8009e2c <_fflush_r+0xc>
 8009e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e72:	f000 f908 	bl	800a086 <__retarget_lock_release_recursive>
 8009e76:	e7d9      	b.n	8009e2c <_fflush_r+0xc>
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <_fflush_r+0x70>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d101      	bne.n	8009e82 <_fflush_r+0x62>
 8009e7e:	68ac      	ldr	r4, [r5, #8]
 8009e80:	e7df      	b.n	8009e42 <_fflush_r+0x22>
 8009e82:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <_fflush_r+0x74>)
 8009e84:	429c      	cmp	r4, r3
 8009e86:	bf08      	it	eq
 8009e88:	68ec      	ldreq	r4, [r5, #12]
 8009e8a:	e7da      	b.n	8009e42 <_fflush_r+0x22>
 8009e8c:	0800a540 	.word	0x0800a540
 8009e90:	0800a560 	.word	0x0800a560
 8009e94:	0800a520 	.word	0x0800a520

08009e98 <std>:
 8009e98:	2300      	movs	r3, #0
 8009e9a:	b510      	push	{r4, lr}
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8009ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ea6:	6083      	str	r3, [r0, #8]
 8009ea8:	8181      	strh	r1, [r0, #12]
 8009eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8009eac:	81c2      	strh	r2, [r0, #14]
 8009eae:	6183      	str	r3, [r0, #24]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	2208      	movs	r2, #8
 8009eb4:	305c      	adds	r0, #92	; 0x5c
 8009eb6:	f7ff fdef 	bl	8009a98 <memset>
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <std+0x38>)
 8009ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ebe:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <std+0x3c>)
 8009ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <std+0x40>)
 8009ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ec6:	4b05      	ldr	r3, [pc, #20]	; (8009edc <std+0x44>)
 8009ec8:	6224      	str	r4, [r4, #32]
 8009eca:	6323      	str	r3, [r4, #48]	; 0x30
 8009ecc:	bd10      	pop	{r4, pc}
 8009ece:	bf00      	nop
 8009ed0:	0800a335 	.word	0x0800a335
 8009ed4:	0800a357 	.word	0x0800a357
 8009ed8:	0800a38f 	.word	0x0800a38f
 8009edc:	0800a3b3 	.word	0x0800a3b3

08009ee0 <_cleanup_r>:
 8009ee0:	4901      	ldr	r1, [pc, #4]	; (8009ee8 <_cleanup_r+0x8>)
 8009ee2:	f000 b8af 	b.w	800a044 <_fwalk_reent>
 8009ee6:	bf00      	nop
 8009ee8:	08009e21 	.word	0x08009e21

08009eec <__sfmoreglue>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	2268      	movs	r2, #104	; 0x68
 8009ef0:	1e4d      	subs	r5, r1, #1
 8009ef2:	4355      	muls	r5, r2
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009efa:	f000 f997 	bl	800a22c <_malloc_r>
 8009efe:	4604      	mov	r4, r0
 8009f00:	b140      	cbz	r0, 8009f14 <__sfmoreglue+0x28>
 8009f02:	2100      	movs	r1, #0
 8009f04:	e9c0 1600 	strd	r1, r6, [r0]
 8009f08:	300c      	adds	r0, #12
 8009f0a:	60a0      	str	r0, [r4, #8]
 8009f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f10:	f7ff fdc2 	bl	8009a98 <memset>
 8009f14:	4620      	mov	r0, r4
 8009f16:	bd70      	pop	{r4, r5, r6, pc}

08009f18 <__sfp_lock_acquire>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__sfp_lock_acquire+0x8>)
 8009f1a:	f000 b8b3 	b.w	800a084 <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	200015bd 	.word	0x200015bd

08009f24 <__sfp_lock_release>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__sfp_lock_release+0x8>)
 8009f26:	f000 b8ae 	b.w	800a086 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	200015bd 	.word	0x200015bd

08009f30 <__sinit_lock_acquire>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__sinit_lock_acquire+0x8>)
 8009f32:	f000 b8a7 	b.w	800a084 <__retarget_lock_acquire_recursive>
 8009f36:	bf00      	nop
 8009f38:	200015be 	.word	0x200015be

08009f3c <__sinit_lock_release>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__sinit_lock_release+0x8>)
 8009f3e:	f000 b8a2 	b.w	800a086 <__retarget_lock_release_recursive>
 8009f42:	bf00      	nop
 8009f44:	200015be 	.word	0x200015be

08009f48 <__sinit>:
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	f7ff fff0 	bl	8009f30 <__sinit_lock_acquire>
 8009f50:	69a3      	ldr	r3, [r4, #24]
 8009f52:	b11b      	cbz	r3, 8009f5c <__sinit+0x14>
 8009f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f58:	f7ff bff0 	b.w	8009f3c <__sinit_lock_release>
 8009f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f60:	6523      	str	r3, [r4, #80]	; 0x50
 8009f62:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <__sinit+0x68>)
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <__sinit+0x6c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f6a:	42a3      	cmp	r3, r4
 8009f6c:	bf04      	itt	eq
 8009f6e:	2301      	moveq	r3, #1
 8009f70:	61a3      	streq	r3, [r4, #24]
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 f820 	bl	8009fb8 <__sfp>
 8009f78:	6060      	str	r0, [r4, #4]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 f81c 	bl	8009fb8 <__sfp>
 8009f80:	60a0      	str	r0, [r4, #8]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f818 	bl	8009fb8 <__sfp>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	60e0      	str	r0, [r4, #12]
 8009f8c:	2104      	movs	r1, #4
 8009f8e:	6860      	ldr	r0, [r4, #4]
 8009f90:	f7ff ff82 	bl	8009e98 <std>
 8009f94:	68a0      	ldr	r0, [r4, #8]
 8009f96:	2201      	movs	r2, #1
 8009f98:	2109      	movs	r1, #9
 8009f9a:	f7ff ff7d 	bl	8009e98 <std>
 8009f9e:	68e0      	ldr	r0, [r4, #12]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	2112      	movs	r1, #18
 8009fa4:	f7ff ff78 	bl	8009e98 <std>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	61a3      	str	r3, [r4, #24]
 8009fac:	e7d2      	b.n	8009f54 <__sinit+0xc>
 8009fae:	bf00      	nop
 8009fb0:	0800a51c 	.word	0x0800a51c
 8009fb4:	08009ee1 	.word	0x08009ee1

08009fb8 <__sfp>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	4607      	mov	r7, r0
 8009fbc:	f7ff ffac 	bl	8009f18 <__sfp_lock_acquire>
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	; (800a03c <__sfp+0x84>)
 8009fc2:	681e      	ldr	r6, [r3, #0]
 8009fc4:	69b3      	ldr	r3, [r6, #24]
 8009fc6:	b913      	cbnz	r3, 8009fce <__sfp+0x16>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff ffbd 	bl	8009f48 <__sinit>
 8009fce:	3648      	adds	r6, #72	; 0x48
 8009fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	d503      	bpl.n	8009fe0 <__sfp+0x28>
 8009fd8:	6833      	ldr	r3, [r6, #0]
 8009fda:	b30b      	cbz	r3, 800a020 <__sfp+0x68>
 8009fdc:	6836      	ldr	r6, [r6, #0]
 8009fde:	e7f7      	b.n	8009fd0 <__sfp+0x18>
 8009fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fe4:	b9d5      	cbnz	r5, 800a01c <__sfp+0x64>
 8009fe6:	4b16      	ldr	r3, [pc, #88]	; (800a040 <__sfp+0x88>)
 8009fe8:	60e3      	str	r3, [r4, #12]
 8009fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fee:	6665      	str	r5, [r4, #100]	; 0x64
 8009ff0:	f000 f847 	bl	800a082 <__retarget_lock_init_recursive>
 8009ff4:	f7ff ff96 	bl	8009f24 <__sfp_lock_release>
 8009ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a000:	6025      	str	r5, [r4, #0]
 800a002:	61a5      	str	r5, [r4, #24]
 800a004:	2208      	movs	r2, #8
 800a006:	4629      	mov	r1, r5
 800a008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a00c:	f7ff fd44 	bl	8009a98 <memset>
 800a010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a018:	4620      	mov	r0, r4
 800a01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01c:	3468      	adds	r4, #104	; 0x68
 800a01e:	e7d9      	b.n	8009fd4 <__sfp+0x1c>
 800a020:	2104      	movs	r1, #4
 800a022:	4638      	mov	r0, r7
 800a024:	f7ff ff62 	bl	8009eec <__sfmoreglue>
 800a028:	4604      	mov	r4, r0
 800a02a:	6030      	str	r0, [r6, #0]
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d1d5      	bne.n	8009fdc <__sfp+0x24>
 800a030:	f7ff ff78 	bl	8009f24 <__sfp_lock_release>
 800a034:	230c      	movs	r3, #12
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	e7ee      	b.n	800a018 <__sfp+0x60>
 800a03a:	bf00      	nop
 800a03c:	0800a51c 	.word	0x0800a51c
 800a040:	ffff0001 	.word	0xffff0001

0800a044 <_fwalk_reent>:
 800a044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a048:	4606      	mov	r6, r0
 800a04a:	4688      	mov	r8, r1
 800a04c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a050:	2700      	movs	r7, #0
 800a052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a056:	f1b9 0901 	subs.w	r9, r9, #1
 800a05a:	d505      	bpl.n	800a068 <_fwalk_reent+0x24>
 800a05c:	6824      	ldr	r4, [r4, #0]
 800a05e:	2c00      	cmp	r4, #0
 800a060:	d1f7      	bne.n	800a052 <_fwalk_reent+0xe>
 800a062:	4638      	mov	r0, r7
 800a064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d907      	bls.n	800a07e <_fwalk_reent+0x3a>
 800a06e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a072:	3301      	adds	r3, #1
 800a074:	d003      	beq.n	800a07e <_fwalk_reent+0x3a>
 800a076:	4629      	mov	r1, r5
 800a078:	4630      	mov	r0, r6
 800a07a:	47c0      	blx	r8
 800a07c:	4307      	orrs	r7, r0
 800a07e:	3568      	adds	r5, #104	; 0x68
 800a080:	e7e9      	b.n	800a056 <_fwalk_reent+0x12>

0800a082 <__retarget_lock_init_recursive>:
 800a082:	4770      	bx	lr

0800a084 <__retarget_lock_acquire_recursive>:
 800a084:	4770      	bx	lr

0800a086 <__retarget_lock_release_recursive>:
 800a086:	4770      	bx	lr

0800a088 <__swhatbuf_r>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	460e      	mov	r6, r1
 800a08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a090:	2900      	cmp	r1, #0
 800a092:	b096      	sub	sp, #88	; 0x58
 800a094:	4614      	mov	r4, r2
 800a096:	461d      	mov	r5, r3
 800a098:	da08      	bge.n	800a0ac <__swhatbuf_r+0x24>
 800a09a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	061a      	lsls	r2, r3, #24
 800a0a4:	d410      	bmi.n	800a0c8 <__swhatbuf_r+0x40>
 800a0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0aa:	e00e      	b.n	800a0ca <__swhatbuf_r+0x42>
 800a0ac:	466a      	mov	r2, sp
 800a0ae:	f000 f9a7 	bl	800a400 <_fstat_r>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	dbf1      	blt.n	800a09a <__swhatbuf_r+0x12>
 800a0b6:	9a01      	ldr	r2, [sp, #4]
 800a0b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0c0:	425a      	negs	r2, r3
 800a0c2:	415a      	adcs	r2, r3
 800a0c4:	602a      	str	r2, [r5, #0]
 800a0c6:	e7ee      	b.n	800a0a6 <__swhatbuf_r+0x1e>
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	b016      	add	sp, #88	; 0x58
 800a0d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0d4 <__smakebuf_r>:
 800a0d4:	898b      	ldrh	r3, [r1, #12]
 800a0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0d8:	079d      	lsls	r5, r3, #30
 800a0da:	4606      	mov	r6, r0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	d507      	bpl.n	800a0f0 <__smakebuf_r+0x1c>
 800a0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	6163      	str	r3, [r4, #20]
 800a0ec:	b002      	add	sp, #8
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	ab01      	add	r3, sp, #4
 800a0f2:	466a      	mov	r2, sp
 800a0f4:	f7ff ffc8 	bl	800a088 <__swhatbuf_r>
 800a0f8:	9900      	ldr	r1, [sp, #0]
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f000 f895 	bl	800a22c <_malloc_r>
 800a102:	b948      	cbnz	r0, 800a118 <__smakebuf_r+0x44>
 800a104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a108:	059a      	lsls	r2, r3, #22
 800a10a:	d4ef      	bmi.n	800a0ec <__smakebuf_r+0x18>
 800a10c:	f023 0303 	bic.w	r3, r3, #3
 800a110:	f043 0302 	orr.w	r3, r3, #2
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	e7e3      	b.n	800a0e0 <__smakebuf_r+0xc>
 800a118:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <__smakebuf_r+0x7c>)
 800a11a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	6020      	str	r0, [r4, #0]
 800a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	9b00      	ldr	r3, [sp, #0]
 800a128:	6163      	str	r3, [r4, #20]
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	6120      	str	r0, [r4, #16]
 800a12e:	b15b      	cbz	r3, 800a148 <__smakebuf_r+0x74>
 800a130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a134:	4630      	mov	r0, r6
 800a136:	f000 f975 	bl	800a424 <_isatty_r>
 800a13a:	b128      	cbz	r0, 800a148 <__smakebuf_r+0x74>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	f043 0301 	orr.w	r3, r3, #1
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	89a0      	ldrh	r0, [r4, #12]
 800a14a:	4305      	orrs	r5, r0
 800a14c:	81a5      	strh	r5, [r4, #12]
 800a14e:	e7cd      	b.n	800a0ec <__smakebuf_r+0x18>
 800a150:	08009ee1 	.word	0x08009ee1

0800a154 <_free_r>:
 800a154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a156:	2900      	cmp	r1, #0
 800a158:	d044      	beq.n	800a1e4 <_free_r+0x90>
 800a15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15e:	9001      	str	r0, [sp, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f1a1 0404 	sub.w	r4, r1, #4
 800a166:	bfb8      	it	lt
 800a168:	18e4      	addlt	r4, r4, r3
 800a16a:	f000 f97d 	bl	800a468 <__malloc_lock>
 800a16e:	4a1e      	ldr	r2, [pc, #120]	; (800a1e8 <_free_r+0x94>)
 800a170:	9801      	ldr	r0, [sp, #4]
 800a172:	6813      	ldr	r3, [r2, #0]
 800a174:	b933      	cbnz	r3, 800a184 <_free_r+0x30>
 800a176:	6063      	str	r3, [r4, #4]
 800a178:	6014      	str	r4, [r2, #0]
 800a17a:	b003      	add	sp, #12
 800a17c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a180:	f000 b978 	b.w	800a474 <__malloc_unlock>
 800a184:	42a3      	cmp	r3, r4
 800a186:	d908      	bls.n	800a19a <_free_r+0x46>
 800a188:	6825      	ldr	r5, [r4, #0]
 800a18a:	1961      	adds	r1, r4, r5
 800a18c:	428b      	cmp	r3, r1
 800a18e:	bf01      	itttt	eq
 800a190:	6819      	ldreq	r1, [r3, #0]
 800a192:	685b      	ldreq	r3, [r3, #4]
 800a194:	1949      	addeq	r1, r1, r5
 800a196:	6021      	streq	r1, [r4, #0]
 800a198:	e7ed      	b.n	800a176 <_free_r+0x22>
 800a19a:	461a      	mov	r2, r3
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	b10b      	cbz	r3, 800a1a4 <_free_r+0x50>
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	d9fa      	bls.n	800a19a <_free_r+0x46>
 800a1a4:	6811      	ldr	r1, [r2, #0]
 800a1a6:	1855      	adds	r5, r2, r1
 800a1a8:	42a5      	cmp	r5, r4
 800a1aa:	d10b      	bne.n	800a1c4 <_free_r+0x70>
 800a1ac:	6824      	ldr	r4, [r4, #0]
 800a1ae:	4421      	add	r1, r4
 800a1b0:	1854      	adds	r4, r2, r1
 800a1b2:	42a3      	cmp	r3, r4
 800a1b4:	6011      	str	r1, [r2, #0]
 800a1b6:	d1e0      	bne.n	800a17a <_free_r+0x26>
 800a1b8:	681c      	ldr	r4, [r3, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	6053      	str	r3, [r2, #4]
 800a1be:	4421      	add	r1, r4
 800a1c0:	6011      	str	r1, [r2, #0]
 800a1c2:	e7da      	b.n	800a17a <_free_r+0x26>
 800a1c4:	d902      	bls.n	800a1cc <_free_r+0x78>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	6003      	str	r3, [r0, #0]
 800a1ca:	e7d6      	b.n	800a17a <_free_r+0x26>
 800a1cc:	6825      	ldr	r5, [r4, #0]
 800a1ce:	1961      	adds	r1, r4, r5
 800a1d0:	428b      	cmp	r3, r1
 800a1d2:	bf04      	itt	eq
 800a1d4:	6819      	ldreq	r1, [r3, #0]
 800a1d6:	685b      	ldreq	r3, [r3, #4]
 800a1d8:	6063      	str	r3, [r4, #4]
 800a1da:	bf04      	itt	eq
 800a1dc:	1949      	addeq	r1, r1, r5
 800a1de:	6021      	streq	r1, [r4, #0]
 800a1e0:	6054      	str	r4, [r2, #4]
 800a1e2:	e7ca      	b.n	800a17a <_free_r+0x26>
 800a1e4:	b003      	add	sp, #12
 800a1e6:	bd30      	pop	{r4, r5, pc}
 800a1e8:	200015c0 	.word	0x200015c0

0800a1ec <sbrk_aligned>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	4e0e      	ldr	r6, [pc, #56]	; (800a228 <sbrk_aligned+0x3c>)
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	6831      	ldr	r1, [r6, #0]
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	b911      	cbnz	r1, 800a1fe <sbrk_aligned+0x12>
 800a1f8:	f000 f88c 	bl	800a314 <_sbrk_r>
 800a1fc:	6030      	str	r0, [r6, #0]
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f000 f887 	bl	800a314 <_sbrk_r>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	d00a      	beq.n	800a220 <sbrk_aligned+0x34>
 800a20a:	1cc4      	adds	r4, r0, #3
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	42a0      	cmp	r0, r4
 800a212:	d007      	beq.n	800a224 <sbrk_aligned+0x38>
 800a214:	1a21      	subs	r1, r4, r0
 800a216:	4628      	mov	r0, r5
 800a218:	f000 f87c 	bl	800a314 <_sbrk_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d101      	bne.n	800a224 <sbrk_aligned+0x38>
 800a220:	f04f 34ff 	mov.w	r4, #4294967295
 800a224:	4620      	mov	r0, r4
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	200015c4 	.word	0x200015c4

0800a22c <_malloc_r>:
 800a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a230:	1ccd      	adds	r5, r1, #3
 800a232:	f025 0503 	bic.w	r5, r5, #3
 800a236:	3508      	adds	r5, #8
 800a238:	2d0c      	cmp	r5, #12
 800a23a:	bf38      	it	cc
 800a23c:	250c      	movcc	r5, #12
 800a23e:	2d00      	cmp	r5, #0
 800a240:	4607      	mov	r7, r0
 800a242:	db01      	blt.n	800a248 <_malloc_r+0x1c>
 800a244:	42a9      	cmp	r1, r5
 800a246:	d905      	bls.n	800a254 <_malloc_r+0x28>
 800a248:	230c      	movs	r3, #12
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	2600      	movs	r6, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a254:	4e2e      	ldr	r6, [pc, #184]	; (800a310 <_malloc_r+0xe4>)
 800a256:	f000 f907 	bl	800a468 <__malloc_lock>
 800a25a:	6833      	ldr	r3, [r6, #0]
 800a25c:	461c      	mov	r4, r3
 800a25e:	bb34      	cbnz	r4, 800a2ae <_malloc_r+0x82>
 800a260:	4629      	mov	r1, r5
 800a262:	4638      	mov	r0, r7
 800a264:	f7ff ffc2 	bl	800a1ec <sbrk_aligned>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	4604      	mov	r4, r0
 800a26c:	d14d      	bne.n	800a30a <_malloc_r+0xde>
 800a26e:	6834      	ldr	r4, [r6, #0]
 800a270:	4626      	mov	r6, r4
 800a272:	2e00      	cmp	r6, #0
 800a274:	d140      	bne.n	800a2f8 <_malloc_r+0xcc>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	4631      	mov	r1, r6
 800a27a:	4638      	mov	r0, r7
 800a27c:	eb04 0803 	add.w	r8, r4, r3
 800a280:	f000 f848 	bl	800a314 <_sbrk_r>
 800a284:	4580      	cmp	r8, r0
 800a286:	d13a      	bne.n	800a2fe <_malloc_r+0xd2>
 800a288:	6821      	ldr	r1, [r4, #0]
 800a28a:	3503      	adds	r5, #3
 800a28c:	1a6d      	subs	r5, r5, r1
 800a28e:	f025 0503 	bic.w	r5, r5, #3
 800a292:	3508      	adds	r5, #8
 800a294:	2d0c      	cmp	r5, #12
 800a296:	bf38      	it	cc
 800a298:	250c      	movcc	r5, #12
 800a29a:	4629      	mov	r1, r5
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff ffa5 	bl	800a1ec <sbrk_aligned>
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	d02b      	beq.n	800a2fe <_malloc_r+0xd2>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	442b      	add	r3, r5
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	e00e      	b.n	800a2cc <_malloc_r+0xa0>
 800a2ae:	6822      	ldr	r2, [r4, #0]
 800a2b0:	1b52      	subs	r2, r2, r5
 800a2b2:	d41e      	bmi.n	800a2f2 <_malloc_r+0xc6>
 800a2b4:	2a0b      	cmp	r2, #11
 800a2b6:	d916      	bls.n	800a2e6 <_malloc_r+0xba>
 800a2b8:	1961      	adds	r1, r4, r5
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	6025      	str	r5, [r4, #0]
 800a2be:	bf18      	it	ne
 800a2c0:	6059      	strne	r1, [r3, #4]
 800a2c2:	6863      	ldr	r3, [r4, #4]
 800a2c4:	bf08      	it	eq
 800a2c6:	6031      	streq	r1, [r6, #0]
 800a2c8:	5162      	str	r2, [r4, r5]
 800a2ca:	604b      	str	r3, [r1, #4]
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f104 060b 	add.w	r6, r4, #11
 800a2d2:	f000 f8cf 	bl	800a474 <__malloc_unlock>
 800a2d6:	f026 0607 	bic.w	r6, r6, #7
 800a2da:	1d23      	adds	r3, r4, #4
 800a2dc:	1af2      	subs	r2, r6, r3
 800a2de:	d0b6      	beq.n	800a24e <_malloc_r+0x22>
 800a2e0:	1b9b      	subs	r3, r3, r6
 800a2e2:	50a3      	str	r3, [r4, r2]
 800a2e4:	e7b3      	b.n	800a24e <_malloc_r+0x22>
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	bf0c      	ite	eq
 800a2ec:	6032      	streq	r2, [r6, #0]
 800a2ee:	605a      	strne	r2, [r3, #4]
 800a2f0:	e7ec      	b.n	800a2cc <_malloc_r+0xa0>
 800a2f2:	4623      	mov	r3, r4
 800a2f4:	6864      	ldr	r4, [r4, #4]
 800a2f6:	e7b2      	b.n	800a25e <_malloc_r+0x32>
 800a2f8:	4634      	mov	r4, r6
 800a2fa:	6876      	ldr	r6, [r6, #4]
 800a2fc:	e7b9      	b.n	800a272 <_malloc_r+0x46>
 800a2fe:	230c      	movs	r3, #12
 800a300:	603b      	str	r3, [r7, #0]
 800a302:	4638      	mov	r0, r7
 800a304:	f000 f8b6 	bl	800a474 <__malloc_unlock>
 800a308:	e7a1      	b.n	800a24e <_malloc_r+0x22>
 800a30a:	6025      	str	r5, [r4, #0]
 800a30c:	e7de      	b.n	800a2cc <_malloc_r+0xa0>
 800a30e:	bf00      	nop
 800a310:	200015c0 	.word	0x200015c0

0800a314 <_sbrk_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d06      	ldr	r5, [pc, #24]	; (800a330 <_sbrk_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f6 fdac 	bl	8000e7c <_sbrk>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_sbrk_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_sbrk_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200015c8 	.word	0x200015c8

0800a334 <__sread>:
 800a334:	b510      	push	{r4, lr}
 800a336:	460c      	mov	r4, r1
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	f000 f8a0 	bl	800a480 <_read_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	bfab      	itete	ge
 800a344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a346:	89a3      	ldrhlt	r3, [r4, #12]
 800a348:	181b      	addge	r3, r3, r0
 800a34a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a34e:	bfac      	ite	ge
 800a350:	6563      	strge	r3, [r4, #84]	; 0x54
 800a352:	81a3      	strhlt	r3, [r4, #12]
 800a354:	bd10      	pop	{r4, pc}

0800a356 <__swrite>:
 800a356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	461f      	mov	r7, r3
 800a35c:	898b      	ldrh	r3, [r1, #12]
 800a35e:	05db      	lsls	r3, r3, #23
 800a360:	4605      	mov	r5, r0
 800a362:	460c      	mov	r4, r1
 800a364:	4616      	mov	r6, r2
 800a366:	d505      	bpl.n	800a374 <__swrite+0x1e>
 800a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36c:	2302      	movs	r3, #2
 800a36e:	2200      	movs	r2, #0
 800a370:	f000 f868 	bl	800a444 <_lseek_r>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	4632      	mov	r2, r6
 800a382:	463b      	mov	r3, r7
 800a384:	4628      	mov	r0, r5
 800a386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a38a:	f000 b817 	b.w	800a3bc <_write_r>

0800a38e <__sseek>:
 800a38e:	b510      	push	{r4, lr}
 800a390:	460c      	mov	r4, r1
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 f855 	bl	800a444 <_lseek_r>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	bf15      	itete	ne
 800a3a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3aa:	81a3      	strheq	r3, [r4, #12]
 800a3ac:	bf18      	it	ne
 800a3ae:	81a3      	strhne	r3, [r4, #12]
 800a3b0:	bd10      	pop	{r4, pc}

0800a3b2 <__sclose>:
 800a3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b6:	f000 b813 	b.w	800a3e0 <_close_r>
	...

0800a3bc <_write_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_write_r+0x20>)
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7f5 ff70 	bl	80002b0 <_write>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_write_r+0x1e>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_write_r+0x1e>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	200015c8 	.word	0x200015c8

0800a3e0 <_close_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d06      	ldr	r5, [pc, #24]	; (800a3fc <_close_r+0x1c>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	602b      	str	r3, [r5, #0]
 800a3ec:	f7f6 fd11 	bl	8000e12 <_close>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d102      	bne.n	800a3fa <_close_r+0x1a>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	b103      	cbz	r3, 800a3fa <_close_r+0x1a>
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	bd38      	pop	{r3, r4, r5, pc}
 800a3fc:	200015c8 	.word	0x200015c8

0800a400 <_fstat_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	; (800a420 <_fstat_r+0x20>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	f7f6 fd0c 	bl	8000e2a <_fstat>
 800a412:	1c43      	adds	r3, r0, #1
 800a414:	d102      	bne.n	800a41c <_fstat_r+0x1c>
 800a416:	682b      	ldr	r3, [r5, #0]
 800a418:	b103      	cbz	r3, 800a41c <_fstat_r+0x1c>
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	bf00      	nop
 800a420:	200015c8 	.word	0x200015c8

0800a424 <_isatty_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d06      	ldr	r5, [pc, #24]	; (800a440 <_isatty_r+0x1c>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	f7f6 fd0b 	bl	8000e4a <_isatty>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_isatty_r+0x1a>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_isatty_r+0x1a>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	200015c8 	.word	0x200015c8

0800a444 <_lseek_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d07      	ldr	r5, [pc, #28]	; (800a464 <_lseek_r+0x20>)
 800a448:	4604      	mov	r4, r0
 800a44a:	4608      	mov	r0, r1
 800a44c:	4611      	mov	r1, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f7f6 fd04 	bl	8000e60 <_lseek>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_lseek_r+0x1e>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_lseek_r+0x1e>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	200015c8 	.word	0x200015c8

0800a468 <__malloc_lock>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__malloc_lock+0x8>)
 800a46a:	f7ff be0b 	b.w	800a084 <__retarget_lock_acquire_recursive>
 800a46e:	bf00      	nop
 800a470:	200015bc 	.word	0x200015bc

0800a474 <__malloc_unlock>:
 800a474:	4801      	ldr	r0, [pc, #4]	; (800a47c <__malloc_unlock+0x8>)
 800a476:	f7ff be06 	b.w	800a086 <__retarget_lock_release_recursive>
 800a47a:	bf00      	nop
 800a47c:	200015bc 	.word	0x200015bc

0800a480 <_read_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d07      	ldr	r5, [pc, #28]	; (800a4a0 <_read_r+0x20>)
 800a484:	4604      	mov	r4, r0
 800a486:	4608      	mov	r0, r1
 800a488:	4611      	mov	r1, r2
 800a48a:	2200      	movs	r2, #0
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	f7f6 fca2 	bl	8000dd8 <_read>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_read_r+0x1e>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_read_r+0x1e>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	200015c8 	.word	0x200015c8

0800a4a4 <_init>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr

0800a4b0 <_fini>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr
