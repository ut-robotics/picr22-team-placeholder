
PiCR_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d04  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f34  08009f34  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009f34  08009f34  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f34  08009f34  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  20000184  0800a0c0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  0800a0c0  00021558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167a4  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d3  00000000  00000000  00036958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bbb  00000000  00000000  0003c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164a2  00000000  00000000  0005cff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c631f  00000000  00000000  00073495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001397b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  00139804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ec4 	.word	0x08009ec4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009ec4 	.word	0x08009ec4

08000218 <clamp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int32_t clamp(int32_t value, int32_t min, int32_t max) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	if (value > max) {
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	dd01      	ble.n	8000230 <clamp+0x18>
		return max;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	e006      	b.n	800023e <clamp+0x26>
	}

	if (value < min) {
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	429a      	cmp	r2, r3
 8000236:	da01      	bge.n	800023c <clamp+0x24>
		return min;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	e000      	b.n	800023e <clamp+0x26>
	}
	return value;
 800023c:	68fb      	ldr	r3, [r7, #12]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <CDC_On_Receive>:

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	d10f      	bne.n	800027e <CDC_On_Receive+0x32>
		memcpy(&command, buffer, sizeof(Command));
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <CDC_On_Receive+0x40>)
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	6810      	ldr	r0, [r2, #0]
 8000264:	6851      	ldr	r1, [r2, #4]
 8000266:	c303      	stmia	r3!, {r0, r1}
 8000268:	8912      	ldrh	r2, [r2, #8]
 800026a:	801a      	strh	r2, [r3, #0]

		if (command.delimiter == 0xAAAA) {
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <CDC_On_Receive+0x40>)
 800026e:	891b      	ldrh	r3, [r3, #8]
 8000270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000274:	4293      	cmp	r3, r2
 8000276:	d102      	bne.n	800027e <CDC_On_Receive+0x32>
			isCommandReceived = 1;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <CDC_On_Receive+0x44>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	2000036c 	.word	0x2000036c
 8000290:	20000376 	.word	0x20000376

08000294 <CalculatePID>:

int16_t CalculatePID(int16_t motorPosition, MotorControl *motorControl,
		int16_t targetSpeed) {
 8000294:	b480      	push	{r7}
 8000296:	b089      	sub	sp, #36	; 0x24
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	80fb      	strh	r3, [r7, #6]
 80002a0:	4613      	mov	r3, r2
 80002a2:	80bb      	strh	r3, [r7, #4]
	float Kp = 3000;
 80002a4:	4b28      	ldr	r3, [pc, #160]	; (8000348 <CalculatePID+0xb4>)
 80002a6:	61fb      	str	r3, [r7, #28]
	float Ki = 675;
 80002a8:	4b28      	ldr	r3, [pc, #160]	; (800034c <CalculatePID+0xb8>)
 80002aa:	61bb      	str	r3, [r7, #24]
	float Kd = 0;
 80002ac:	f04f 0300 	mov.w	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

	int32_t motorPositionDelta = motorPosition - motorControl->prevPosition;
 80002b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80002bc:	1a9b      	subs	r3, r3, r2
 80002be:	613b      	str	r3, [r7, #16]
	motorControl->speed = motorPositionDelta;
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	b21a      	sxth	r2, r3
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	801a      	strh	r2, [r3, #0]
	motorControl->prevPosition = motorPosition;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	88fa      	ldrh	r2, [r7, #6]
 80002cc:	805a      	strh	r2, [r3, #2]

	int32_t motorSpeedError = targetSpeed - motorPositionDelta;
 80002ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]

	motorControl->integral += motorSpeedError;
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	441a      	add	r2, r3
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	605a      	str	r2, [r3, #4]

	int32_t motorDerivative = motorControl->prevError - motorSpeedError;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	60bb      	str	r3, [r7, #8]

	return motorSpeedError * Kp + motorControl->integral * Ki
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	ee07 3a90 	vmov	s15, r3
 80002f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	ee07 3a90 	vmov	s15, r3
 800030c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000310:	edd7 7a06 	vldr	s15, [r7, #24]
 8000314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000318:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ motorDerivative * Kd;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	ee07 3a90 	vmov	s15, r3
 8000322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000326:	edd7 7a05 	vldr	s15, [r7, #20]
 800032a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800032e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000336:	ee17 3a90 	vmov	r3, s15
 800033a:	b21b      	sxth	r3, r3
}
 800033c:	4618      	mov	r0, r3
 800033e:	3724      	adds	r7, #36	; 0x24
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	453b8000 	.word	0x453b8000
 800034c:	4428c000 	.word	0x4428c000

08000350 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	int32_t motor1PWM = CalculatePID((int16_t) TIM2->CNT, &motor1Control,
 8000358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035e:	b21b      	sxth	r3, r3
 8000360:	4a50      	ldr	r2, [pc, #320]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000362:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000366:	4950      	ldr	r1, [pc, #320]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff93 	bl	8000294 <CalculatePID>
 800036e:	4603      	mov	r3, r0
 8000370:	617b      	str	r3, [r7, #20]
			command.speed1);
	int32_t motor2PWM = CalculatePID((int16_t) TIM3->CNT, &motor2Control,
 8000372:	4b4e      	ldr	r3, [pc, #312]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000376:	b21b      	sxth	r3, r3
 8000378:	4a4a      	ldr	r2, [pc, #296]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800037a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800037e:	494c      	ldr	r1, [pc, #304]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff87 	bl	8000294 <CalculatePID>
 8000386:	4603      	mov	r3, r0
 8000388:	613b      	str	r3, [r7, #16]
			command.speed2);
	int32_t motor3PWM = CalculatePID((int16_t) TIM4->CNT, &motor3Control,
 800038a:	4b4a      	ldr	r3, [pc, #296]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800038c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038e:	b21b      	sxth	r3, r3
 8000390:	4a44      	ldr	r2, [pc, #272]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000392:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000396:	4948      	ldr	r1, [pc, #288]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff7b 	bl	8000294 <CalculatePID>
 800039e:	4603      	mov	r3, r0
 80003a0:	60fb      	str	r3, [r7, #12]
			command.speed3);

	HAL_GPIO_WritePin(M1_Dir_GPIO_Port, M1_Dir_Pin,
			(motor1PWM < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	0fdb      	lsrs	r3, r3, #31
	HAL_GPIO_WritePin(M1_Dir_GPIO_Port, M1_Dir_Pin,
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2108      	movs	r1, #8
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f001 f98c 	bl	80016cc <HAL_GPIO_WritePin>
	TIM1->CCR1 = (uint16_t) clamp((motor1PWM < 0) ? -motor1PWM : motor1PWM, 0,
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	bfb8      	it	lt
 80003ba:	425b      	neglt	r3, r3
 80003bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff28 	bl	8000218 <clamp>
 80003c8:	4603      	mov	r3, r0
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
			65535);

	HAL_GPIO_WritePin(M2_Dir_GPIO_Port, M2_Dir_Pin,
			(motor2PWM < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	0fdb      	lsrs	r3, r3, #31
	HAL_GPIO_WritePin(M2_Dir_GPIO_Port, M2_Dir_Pin,
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	2102      	movs	r1, #2
 80003da:	4839      	ldr	r0, [pc, #228]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80003dc:	f001 f976 	bl	80016cc <HAL_GPIO_WritePin>
	TIM1->CCR2 = (uint16_t) clamp((motor2PWM < 0) ? -motor2PWM : motor2PWM, 0,
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bfb8      	it	lt
 80003e6:	425b      	neglt	r3, r3
 80003e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ff12 	bl	8000218 <clamp>
 80003f4:	4603      	mov	r3, r0
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	4b30      	ldr	r3, [pc, #192]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80003fa:	639a      	str	r2, [r3, #56]	; 0x38
			65535);

	HAL_GPIO_WritePin(M3_Dir_GPIO_Port, M3_Dir_Pin,
			(motor3PWM < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	0fdb      	lsrs	r3, r3, #31
	HAL_GPIO_WritePin(M3_Dir_GPIO_Port, M3_Dir_Pin,
 8000400:	b2db      	uxtb	r3, r3
 8000402:	461a      	mov	r2, r3
 8000404:	2101      	movs	r1, #1
 8000406:	482e      	ldr	r0, [pc, #184]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000408:	f001 f960 	bl	80016cc <HAL_GPIO_WritePin>
	TIM1->CCR3 = (uint16_t) clamp((motor3PWM < 0) ? -motor3PWM : motor3PWM, 0,
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	2b00      	cmp	r3, #0
 8000410:	bfb8      	it	lt
 8000412:	425b      	neglt	r3, r3
 8000414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff fefc 	bl	8000218 <clamp>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000426:	63da      	str	r2, [r3, #60]	; 0x3c
			65535);

	callCount++;
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000432:	701a      	strb	r2, [r3, #0]

	if (callCount >= 50) {
 8000434:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b31      	cmp	r3, #49	; 0x31
 800043a:	d92f      	bls.n	800049c <HAL_TIM_PeriodElapsedCallback+0x14c>
		callCount = 0;
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]

		command.speed1 = 0;
 8000442:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000444:	2200      	movs	r2, #0
 8000446:	801a      	strh	r2, [r3, #0]
		command.speed2 = 0;
 8000448:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800044a:	2200      	movs	r2, #0
 800044c:	805a      	strh	r2, [r3, #2]
		command.speed3 = 0;
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000450:	2200      	movs	r2, #0
 8000452:	809a      	strh	r2, [r3, #4]

		motor1Control.integral = 0;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
		motor2Control.integral = 0;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
		motor3Control.integral = 0;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]

		motor1Control.prevError = 0;
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000468:	2200      	movs	r2, #0
 800046a:	811a      	strh	r2, [r3, #8]
		motor2Control.prevError = 0;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800046e:	2200      	movs	r2, #0
 8000470:	811a      	strh	r2, [r3, #8]
		motor3Control.prevError = 0;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000474:	2200      	movs	r2, #0
 8000476:	811a      	strh	r2, [r3, #8]

		motor1Control.prevPosition = 0;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800047a:	2200      	movs	r2, #0
 800047c:	805a      	strh	r2, [r3, #2]
		motor2Control.prevPosition = 0;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	805a      	strh	r2, [r3, #2]
		motor3Control.prevPosition = 0;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000486:	2200      	movs	r2, #0
 8000488:	805a      	strh	r2, [r3, #2]

		TIM1->CCR1 = 0;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800048c:	2200      	movs	r2, #0
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000492:	2200      	movs	r2, #0
 8000494:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000498:	2200      	movs	r2, #0
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 800049c:	bf00      	nop
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000036c 	.word	0x2000036c
 80004a8:	20000378 	.word	0x20000378
 80004ac:	40000400 	.word	0x40000400
 80004b0:	20000384 	.word	0x20000384
 80004b4:	40000800 	.word	0x40000800
 80004b8:	20000390 	.word	0x20000390
 80004bc:	40012c00 	.word	0x40012c00
 80004c0:	48001400 	.word	0x48001400
 80004c4:	200001a0 	.word	0x200001a0

080004c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ce:	f000 fdd8 	bl	8001082 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d2:	f000 f883 	bl	80005dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d6:	f000 fb43 	bl	8000b60 <MX_GPIO_Init>
	MX_USB_Device_Init();
 80004da:	f008 ffb7 	bl	800944c <MX_USB_Device_Init>
	MX_TIM1_Init();
 80004de:	f000 f8c9 	bl	8000674 <MX_TIM1_Init>
	MX_TIM2_Init();
 80004e2:	f000 f973 	bl	80007cc <MX_TIM2_Init>
	MX_TIM3_Init();
 80004e6:	f000 f9c5 	bl	8000874 <MX_TIM3_Init>
	MX_TIM4_Init();
 80004ea:	f000 fa19 	bl	8000920 <MX_TIM4_Init>
	MX_TIM8_Init();
 80004ee:	f000 faa3 	bl	8000a38 <MX_TIM8_Init>
	MX_TIM6_Init();
 80004f2:	f000 fa6b 	bl	80009cc <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	Feedback feedback = { .speed1 = 0, .speed2 = 0, .speed3 = 0, .delimiter =
 80004f6:	2300      	movs	r3, #0
 80004f8:	803b      	strh	r3, [r7, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	807b      	strh	r3, [r7, #2]
 80004fe:	2300      	movs	r3, #0
 8000500:	80bb      	strh	r3, [r7, #4]
 8000502:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000506:	80fb      	strh	r3, [r7, #6]
			0xAAAA };

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000508:	2104      	movs	r1, #4
 800050a:	482a      	ldr	r0, [pc, #168]	; (80005b4 <main+0xec>)
 800050c:	f004 f828 	bl	8004560 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000510:	2104      	movs	r1, #4
 8000512:	4829      	ldr	r0, [pc, #164]	; (80005b8 <main+0xf0>)
 8000514:	f004 f824 	bl	8004560 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000518:	2104      	movs	r1, #4
 800051a:	4828      	ldr	r0, [pc, #160]	; (80005bc <main+0xf4>)
 800051c:	f004 f820 	bl	8004560 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 8000520:	210c      	movs	r1, #12
 8000522:	4827      	ldr	r0, [pc, #156]	; (80005c0 <main+0xf8>)
 8000524:	f003 fe76 	bl	8004214 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(M_Sleep_GPIO_Port, M_Sleep_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2104      	movs	r1, #4
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 f8cc 	bl	80016cc <HAL_GPIO_WritePin>
	while (1) {
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		feedback.speed1 = motor1Control.speed;
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <main+0xfc>)
 8000536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800053a:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = motor2Control.speed;
 800053c:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <main+0x100>)
 800053e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000542:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = motor3Control.speed;
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <main+0x104>)
 8000546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800054a:	80bb      	strh	r3, [r7, #4]

		CDC_Transmit_FS((uint8_t*) &feedback, sizeof(feedback));
 800054c:	463b      	mov	r3, r7
 800054e:	2108      	movs	r1, #8
 8000550:	4618      	mov	r0, r3
 8000552:	f009 f83d 	bl	80095d0 <CDC_Transmit_FS>

		TIM1->CCR1 = 256;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <main+0x108>)
 8000558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 256;
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <main+0x108>)
 8000560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 256;
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <main+0x108>)
 8000568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800056c:	63da      	str	r2, [r3, #60]	; 0x3c

		if (isCommandReceived) { // (2)
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <main+0x10c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d018      	beq.n	80005aa <main+0xe2>
			isCommandReceived = 0;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <main+0x10c>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4815      	ldr	r0, [pc, #84]	; (80005d8 <main+0x110>)
 8000584:	f001 f8ba 	bl	80016fc <HAL_GPIO_TogglePin>

			feedback.speed1 = motor1Control.speed;
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <main+0xfc>)
 800058a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800058e:	803b      	strh	r3, [r7, #0]
			feedback.speed2 = motor2Control.speed;
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <main+0x100>)
 8000592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000596:	807b      	strh	r3, [r7, #2]
			feedback.speed3 = motor3Control.speed;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0x104>)
 800059a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800059e:	80bb      	strh	r3, [r7, #4]

			CDC_Transmit_FS((uint8_t*) &feedback, sizeof(feedback));
 80005a0:	463b      	mov	r3, r7
 80005a2:	2108      	movs	r1, #8
 80005a4:	4618      	mov	r0, r3
 80005a6:	f009 f813 	bl	80095d0 <CDC_Transmit_FS>
		}
		HAL_Delay(250);
 80005aa:	20fa      	movs	r0, #250	; 0xfa
 80005ac:	f000 fdda 	bl	8001164 <HAL_Delay>
		feedback.speed1 = motor1Control.speed;
 80005b0:	e7c0      	b.n	8000534 <main+0x6c>
 80005b2:	bf00      	nop
 80005b4:	200001f0 	.word	0x200001f0
 80005b8:	2000023c 	.word	0x2000023c
 80005bc:	20000288 	.word	0x20000288
 80005c0:	200001a4 	.word	0x200001a4
 80005c4:	20000378 	.word	0x20000378
 80005c8:	20000384 	.word	0x20000384
 80005cc:	20000390 	.word	0x20000390
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	20000376 	.word	0x20000376
 80005d8:	48000400 	.word	0x48000400

080005dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2238      	movs	r2, #56	; 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 fc62 	bl	8009eb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f002 fdc9 	bl	8003198 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800061c:	2301      	movs	r3, #1
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000620:	230c      	movs	r3, #12
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000628:	2304      	movs	r3, #4
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fe53 	bl	80032e0 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x68>
		Error_Handler();
 8000640:	f000 fb20 	bl	8000c84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2301      	movs	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f003 f957 	bl	8003910 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x90>
		Error_Handler();
 8000668:	f000 fb0c 	bl	8000c84 <Error_Handler>
	}
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b098      	sub	sp, #96	; 0x60
 8000678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800067a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000686:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2234      	movs	r2, #52	; 0x34
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f009 fc07 	bl	8009eb4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006a8:	4a47      	ldr	r2, [pc, #284]	; (80007c8 <MX_TIM1_Init+0x154>)
 80006aa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80006ac:	4b45      	ldr	r3, [pc, #276]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b44      	ldr	r3, [pc, #272]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 6535;
 80006b8:	4b42      	ldr	r3, [pc, #264]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006ba:	f641 1287 	movw	r2, #6535	; 0x1987
 80006be:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80006d2:	483c      	ldr	r0, [pc, #240]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006d4:	f003 fd47 	bl	8004166 <HAL_TIM_PWM_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0x6e>
		Error_Handler();
 80006de:	f000 fad1 	bl	8000c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006f2:	4619      	mov	r1, r3
 80006f4:	4833      	ldr	r0, [pc, #204]	; (80007c4 <MX_TIM1_Init+0x150>)
 80006f6:	f004 fe29 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000700:	f000 fac0 	bl	8000c84 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000710:	2300      	movs	r3, #0
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000724:	2200      	movs	r2, #0
 8000726:	4619      	mov	r1, r3
 8000728:	4826      	ldr	r0, [pc, #152]	; (80007c4 <MX_TIM1_Init+0x150>)
 800072a:	f004 f927 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000734:	f000 faa6 	bl	8000c84 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073c:	2204      	movs	r2, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4820      	ldr	r0, [pc, #128]	; (80007c4 <MX_TIM1_Init+0x150>)
 8000742:	f004 f91b 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 800074c:	f000 fa9a 	bl	8000c84 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000750:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000754:	2208      	movs	r2, #8
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	; (80007c4 <MX_TIM1_Init+0x150>)
 800075a:	f004 f90f 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8000764:	f000 fa8e 	bl	8000c84 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800078e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM1_Init+0x150>)
 80007a6:	f004 fe53 	bl	8005450 <HAL_TIMEx_ConfigBreakDeadTime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 80007b0:	f000 fa68 	bl	8000c84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM1_Init+0x150>)
 80007b6:	f000 fb8d 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3760      	adds	r7, #96	; 0x60
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001a4 	.word	0x200001a4
 80007c8:	40012c00 	.word	0x40012c00

080007cc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2224      	movs	r2, #36	; 0x24
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f009 fb6a 	bl	8009eb4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_TIM2_Init+0xa4>)
 80007ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_TIM2_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_TIM2_Init+0xa4>)
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM2_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_TIM2_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000812:	2303      	movs	r3, #3
 8000814:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800081a:	2301      	movs	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800082a:	2301      	movs	r3, #1
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM2_Init+0xa4>)
 800083e:	f003 fde9 	bl	8004414 <HAL_TIM_Encoder_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x80>
		Error_Handler();
 8000848:	f000 fa1c 	bl	8000c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM2_Init+0xa4>)
 800085a:	f004 fd77 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000864:	f000 fa0e 	bl	8000c84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3730      	adds	r7, #48	; 0x30
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001f0 	.word	0x200001f0

08000874 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2224      	movs	r2, #36	; 0x24
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f009 fb16 	bl	8009eb4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_TIM3_Init+0xa4>)
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <MX_TIM3_Init+0xa8>)
 8000896:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_TIM3_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008aa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_TIM3_Init+0xa4>)
 80008e4:	f003 fd96 	bl	8004414 <HAL_TIM_Encoder_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x7e>
		Error_Handler();
 80008ee:	f000 f9c9 	bl	8000c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM3_Init+0xa4>)
 8000900:	f004 fd24 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800090a:	f000 f9bb 	bl	8000c84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000023c 	.word	0x2000023c
 800091c:	40000400 	.word	0x40000400

08000920 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2224      	movs	r2, #36	; 0x24
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f009 fac0 	bl	8009eb4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_TIM4_Init+0xa4>)
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <MX_TIM4_Init+0xa8>)
 8000942:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_TIM4_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_TIM4_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM4_Init+0xa4>)
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM4_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_TIM4_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000964:	2303      	movs	r3, #3
 8000966:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_TIM4_Init+0xa4>)
 8000990:	f003 fd40 	bl	8004414 <HAL_TIM_Encoder_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM4_Init+0x7e>
		Error_Handler();
 800099a:	f000 f973 	bl	8000c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_TIM4_Init+0xa4>)
 80009ac:	f004 fcce 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80009b6:	f000 f965 	bl	8000c84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000288 	.word	0x20000288
 80009c8:	40000800 	.word	0x40000800

080009cc <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_TIM6_Init+0x64>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_TIM6_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_TIM6_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_TIM6_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_TIM6_Init+0x64>)
 80009f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f4:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_TIM6_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_TIM6_Init+0x64>)
 80009fe:	f003 fb5b 	bl	80040b8 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM6_Init+0x40>
		Error_Handler();
 8000a08:	f000 f93c 	bl	8000c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_TIM6_Init+0x64>)
 8000a1a:	f004 fc97 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a24:	f000 f92e 	bl	8000c84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200002d4 	.word	0x200002d4
 8000a34:	40001000 	.word	0x40001000

08000a38 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b098      	sub	sp, #96	; 0x60
 8000a3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2234      	movs	r2, #52	; 0x34
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f009 fa25 	bl	8009eb4 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <MX_TIM8_Init+0x124>)
 8000a6e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000a70:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8000a7c:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a82:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8000a96:	4830      	ldr	r0, [pc, #192]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000a98:	f003 fb65 	bl	8004166 <HAL_TIM_PWM_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM8_Init+0x6e>
		Error_Handler();
 8000aa2:	f000 f8ef 	bl	8000c84 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000ab2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4827      	ldr	r0, [pc, #156]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000aba:	f004 fc47 	bl	800534c <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM8_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000ac4:	f000 f8de 	bl	8000c84 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8000ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000aee:	f003 ff45 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000af8:	f000 f8c4 	bl	8000c84 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b14:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000b3a:	f004 fc89 	bl	8005450 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8000b44:	f000 f89e 	bl	8000c84 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM8_Init+0x120>)
 8000b4a:	f000 f9c3 	bl	8000ed4 <HAL_TIM_MspPostInit>

}
 8000b4e:	bf00      	nop
 8000b50:	3760      	adds	r7, #96	; 0x60
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000320 	.word	0x20000320
 8000b5c:	40013400 	.word	0x40013400

08000b60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a38      	ldr	r2, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a2c      	ldr	r2, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_GPIO_Init+0x114>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, M3_Dir_Pin | M2_Dir_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2103      	movs	r1, #3
 8000bda:	4827      	ldr	r0, [pc, #156]	; (8000c78 <MX_GPIO_Init+0x118>)
 8000bdc:	f000 fd76 	bl	80016cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, M_Sleep_Pin | M1_Dir_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210c      	movs	r1, #12
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fd70 	bl	80016cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4822      	ldr	r0, [pc, #136]	; (8000c7c <MX_GPIO_Init+0x11c>)
 8000bf4:	f000 fd6a 	bl	80016cc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M3_Dir_Pin M2_Dir_Pin */
	GPIO_InitStruct.Pin = M3_Dir_Pin | M2_Dir_Pin;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <MX_GPIO_Init+0x118>)
 8000c10:	f000 fbda 	bl	80013c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRST_Pin */
	GPIO_InitStruct.Pin = NRST_Pin;
 8000c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000c2c:	f000 fbcc 	bl	80013c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : M_Sleep_Pin M1_Dir_Pin */
	GPIO_InitStruct.Pin = M_Sleep_Pin | M1_Dir_Pin;
 8000c30:	230c      	movs	r3, #12
 8000c32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f000 fbbd 	bl	80013c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_GPIO_Init+0x11c>)
 8000c68:	f000 fbae 	bl	80013c8 <HAL_GPIO_Init>

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48001400 	.word	0x48001400
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48001800 	.word	0x48001800

08000c84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10c      	bne.n	8000d04 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_TIM_PWM_MspInit+0x60>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_TIM_PWM_MspInit+0x60>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_TIM_PWM_MspInit+0x60>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d02:	e010      	b.n	8000d26 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_TIM_PWM_MspInit+0x64>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10b      	bne.n	8000d26 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_PWM_MspInit+0x60>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_TIM_PWM_MspInit+0x60>)
 8000d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_TIM_PWM_MspInit+0x60>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40012c00 	.word	0x40012c00
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40013400 	.word	0x40013400

08000d40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d60:	d129      	bne.n	8000db6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a44      	ldr	r2, [pc, #272]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d92:	2303      	movs	r3, #3
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000da2:	2301      	movs	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f000 fb0a 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000db4:	e05b      	b.n	8000e6e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d129      	bne.n	8000e14 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6593      	str	r3, [r2, #88]	; 0x58
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000df0:	2350      	movs	r3, #80	; 0x50
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e00:	2302      	movs	r3, #2
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fadb 	bl	80013c8 <HAL_GPIO_Init>
}
 8000e12:	e02c      	b.n	8000e6e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d127      	bne.n	8000e6e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x138>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e6a:	f000 faad 	bl	80013c8 <HAL_GPIO_Init>
}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	; 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	40000800 	.word	0x40000800
 8000e84:	48000400 	.word	0x48000400

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_TIM_Base_MspInit+0x44>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d113      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2036      	movs	r0, #54	; 0x36
 8000eb8:	f000 fa51 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	; 0x36
 8000ebe:	f000 fa68 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_TIM_MspPostInit+0xb0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11e      	bne.n	8000f34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f20:	2306      	movs	r3, #6
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f000 fa4b 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f32:	e022      	b.n	8000f7a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_TIM_MspPostInit+0xb8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11d      	bne.n	8000f7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_TIM_MspPostInit+0xb4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f000 fa27 	bl	80013c8 <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40012c00 	.word	0x40012c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40013400 	.word	0x40013400

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8a4 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <USB_LP_IRQHandler+0x10>)
 8000fea:	f000 fca8 	bl	800193e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20001044 	.word	0x20001044

08000ff8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM6_DAC_IRQHandler+0x10>)
 8000ffe:	f003 fb3d 	bl	800467c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002d4 	.word	0x200002d4

0800100c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800105a:	f7ff ffd7 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f008 ff05 	bl	8009e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fa31 	bl	80004c8 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001074:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 8001078:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800107c:	20001558 	.word	0x20001558

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f95b 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff fdf4 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]

}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_InitTick+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d022      	beq.n	800110e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_InitTick+0x6c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_InitTick+0x68>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f966 	bl	80013ae <HAL_SYSTICK_Config>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10f      	bne.n	8001108 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d809      	bhi.n	8001102 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ee:	2200      	movs	r2, #0
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	f000 f932 	bl	800135e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_InitTick+0x70>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e007      	b.n	8001112 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e004      	b.n	8001112 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e001      	b.n	8001112 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000008 	.word	0x20000008
 8001120:	20000000 	.word	0x20000000
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_IncTick+0x1c>)
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	2000039c 	.word	0x2000039c
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000039c 	.word	0x2000039c

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d004      	beq.n	8001188 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_Delay+0x40>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001188:	bf00      	nop
 800118a:	f7ff ffdf 	bl	800114c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	d8f7      	bhi.n	800118a <HAL_Delay+0x26>
  {
  }
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff40 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff33 	bl	800120c <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa4 	bl	8001304 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013d6:	e15a      	b.n	800168e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 814c 	beq.w	8001688 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d005      	beq.n	8001408 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001404:	2b02      	cmp	r3, #2
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d017      	beq.n	80014a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80a6 	beq.w	8001688 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_GPIO_Init+0x2e4>)
 800153e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001540:	4a5a      	ldr	r2, [pc, #360]	; (80016ac <HAL_GPIO_Init+0x2e4>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6613      	str	r3, [r2, #96]	; 0x60
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_GPIO_Init+0x2e4>)
 800154a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001554:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_GPIO_Init+0x2e8>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800157e:	d01f      	beq.n	80015c0 <HAL_GPIO_Init+0x1f8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x2ec>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d019      	beq.n	80015bc <HAL_GPIO_Init+0x1f4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_GPIO_Init+0x2f0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d013      	beq.n	80015b8 <HAL_GPIO_Init+0x1f0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_GPIO_Init+0x2f4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d00d      	beq.n	80015b4 <HAL_GPIO_Init+0x1ec>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_GPIO_Init+0x2f8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0x1e8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <HAL_GPIO_Init+0x2fc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d101      	bne.n	80015ac <HAL_GPIO_Init+0x1e4>
 80015a8:	2305      	movs	r3, #5
 80015aa:	e00a      	b.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015ac:	2306      	movs	r3, #6
 80015ae:	e008      	b.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e006      	b.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015b4:	2303      	movs	r3, #3
 80015b6:	e004      	b.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x1fa>
 80015c0:	2300      	movs	r3, #0
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d2:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_GPIO_Init+0x2e8>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <HAL_GPIO_Init+0x300>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001604:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_GPIO_Init+0x300>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800162e:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_GPIO_Init+0x300>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_GPIO_Init+0x300>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f ae9d 	bne.w	80013d8 <HAL_GPIO_Init+0x10>
  }
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48000c00 	.word	0x48000c00
 80016c0:	48001000 	.word	0x48001000
 80016c4:	48001400 	.word	0x48001400
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43d9      	mvns	r1, r3
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	400b      	ands	r3, r1
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af06      	add	r7, sp, #24
 8001736:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0d7      	b.n	80018f2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f008 f882 	bl	8009860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2203      	movs	r2, #3
 8001760:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 ff6e 	bl	800564a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e04c      	b.n	800180e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	3301      	adds	r3, #1
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	b298      	uxth	r0, r3
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3336      	adds	r3, #54	; 0x36
 80017b2:	4602      	mov	r2, r0
 80017b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3303      	adds	r3, #3
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3338      	adds	r3, #56	; 0x38
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	333c      	adds	r3, #60	; 0x3c
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3340      	adds	r3, #64	; 0x40
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	3301      	adds	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	d3ad      	bcc.n	8001774 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e044      	b.n	80018a8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	3301      	adds	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3b5      	bcc.n	800181e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	687e      	ldr	r6, [r7, #4]
 80018ba:	466d      	mov	r5, sp
 80018bc:	f106 0410 	add.w	r4, r6, #16
 80018c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	602b      	str	r3, [r5, #0]
 80018c8:	1d33      	adds	r3, r6, #4
 80018ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018cc:	6838      	ldr	r0, [r7, #0]
 80018ce:	f003 fed7 	bl	8005680 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f001 fc29 	bl	8003142 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_PCD_Start+0x16>
 800190c:	2302      	movs	r3, #2
 800190e:	e012      	b.n	8001936 <HAL_PCD_Start+0x3c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fe7d 	bl	800561c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f006 f896 	bl	8007a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f006 f89b 	bl	8007a86 <USB_ReadInterrupts>
 8001950:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fb26 	bl	8001fae <PCD_EP_ISR_Handler>

    return;
 8001962:	e110      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d013      	beq.n	8001996 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f007 fffb 	bl	8009982 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8fc 	bl	8001b8c <HAL_PCD_SetAddress>

    return;
 8001994:	e0f7      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019b2:	b292      	uxth	r2, r2
 80019b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019b8:	e0e5      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00c      	beq.n	80019de <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d6:	b292      	uxth	r2, r2
 80019d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019dc:	e0d3      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d034      	beq.n	8001a52 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0204 	bic.w	r2, r2, #4
 80019fa:	b292      	uxth	r2, r2
 80019fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0208 	bic.w	r2, r2, #8
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f008 f99d 	bl	8009d6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f007 ffde 	bl	80099f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a50:	e099      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d027      	beq.n	8001aac <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0208 	orr.w	r2, r2, #8
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a86:	b292      	uxth	r2, r2
 8001a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0204 	orr.w	r2, r2, #4
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f007 ff8b 	bl	80099c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001aaa:	e06c      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d040      	beq.n	8001b38 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d12b      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0204 	orr.w	r2, r2, #4
 8001aea:	b292      	uxth	r2, r2
 8001aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0208 	orr.w	r2, r2, #8
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b26:	2101      	movs	r1, #1
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f008 f91f 	bl	8009d6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001b2e:	e02a      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f007 ff45 	bl	80099c0 <HAL_PCD_SuspendCallback>
    return;
 8001b36:	e026      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00f      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b54:	b292      	uxth	r2, r2
 8001b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f007 ff03 	bl	8009966 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b60:	e011      	b.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00c      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b84:	bf00      	nop
  }
}
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_PCD_SetAddress+0x1a>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e013      	b.n	8001bce <HAL_PCD_SetAddress+0x42>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 ff36 	bl	8007a30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4603      	mov	r3, r0
 8001be6:	70fb      	strb	r3, [r7, #3]
 8001be8:	460b      	mov	r3, r1
 8001bea:	803b      	strh	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da0e      	bge.n	8001c1a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e00e      	b.n	8001c38 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 0207 	and.w	r2, r3, #7
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c44:	883a      	ldrh	r2, [r7, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	78ba      	ldrb	r2, [r7, #2]
 8001c4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_EP_Open+0xa6>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e00e      	b.n	8001c9a <HAL_PCD_EP_Open+0xc4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fd1a 	bl	80056c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c98:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da0e      	bge.n	8001cd4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	705a      	strb	r2, [r3, #1]
 8001cd2:	e00e      	b.n	8001cf2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f003 0207 	and.w	r2, r3, #7
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_EP_Close+0x6a>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e00e      	b.n	8001d2a <HAL_PCD_EP_Close+0x88>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 f866 	bl	8005dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	f003 0207 	and.w	r2, r3, #7
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d72:	7afb      	ldrb	r3, [r7, #11]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6979      	ldr	r1, [r7, #20]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fa19 	bl	80061c6 <USB_EPStartXfer>
 8001d94:	e005      	b.n	8001da2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 fa12 	bl	80061c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 0207 	and.w	r2, r3, #7
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	460b      	mov	r3, r1
 8001dea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6979      	ldr	r1, [r7, #20]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 f9be 	bl	80061c6 <USB_EPStartXfer>
 8001e4a:	e005      	b.n	8001e58 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f9b7 	bl	80061c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 0207 	and.w	r2, r3, #7
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d901      	bls.n	8001e80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e03e      	b.n	8001efe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0e      	bge.n	8001ea6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	705a      	strb	r2, [r3, #1]
 8001ea4:	e00c      	b.n	8001ec0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_PCD_EP_SetStall+0x7e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e00e      	b.n	8001efe <HAL_PCD_EP_SetStall+0x9c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f005 fc9f 	bl	8007832 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d901      	bls.n	8001f24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e040      	b.n	8001fa6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da0e      	bge.n	8001f4a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	705a      	strb	r2, [r3, #1]
 8001f48:	e00e      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 0207 	and.w	r2, r3, #7
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_EP_ClrStall+0x82>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e00e      	b.n	8001fa6 <HAL_PCD_EP_ClrStall+0xa0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 fc9c 	bl	80078d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b096      	sub	sp, #88	; 0x58
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fb6:	e39c      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001fc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001fd2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 815e 	bne.w	8002298 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d150      	bne.n	800208a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff8:	81fb      	strh	r3, [r7, #14]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002008:	b29b      	uxth	r3, r3
 800200a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3328      	adds	r3, #40	; 0x28
 8002010:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	4413      	add	r3, r2
 800202c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002038:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800203a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	441a      	add	r2, r3
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002046:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002048:	2100      	movs	r1, #0
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f007 fc71 	bl	8009932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 834a 	beq.w	80026f2 <PCD_EP_ISR_Handler+0x744>
 800205e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 8345 	bne.w	80026f2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002074:	b2da      	uxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b292      	uxth	r2, r2
 800207c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002088:	e333      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800209c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d032      	beq.n	800210e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80020da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f005 fd21 	bl	8007b2a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020f4:	4013      	ands	r3, r2
 80020f6:	823b      	strh	r3, [r7, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	8a3a      	ldrh	r2, [r7, #16]
 80020fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002102:	b292      	uxth	r2, r2
 8002104:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f007 fbe6 	bl	80098d8 <HAL_PCD_SetupStageCallback>
 800210c:	e2f1      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800210e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002112:	2b00      	cmp	r3, #0
 8002114:	f280 82ed 	bge.w	80026f2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	b29a      	uxth	r2, r3
 8002120:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002124:	4013      	ands	r3, r2
 8002126:	83fb      	strh	r3, [r7, #30]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	8bfa      	ldrh	r2, [r7, #30]
 800212e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002132:	b292      	uxth	r2, r2
 8002134:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4413      	add	r3, r2
 8002150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800215a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800215c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800215e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <PCD_EP_ISR_Handler+0x1ec>
 8002166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800217e:	b29b      	uxth	r3, r3
 8002180:	f005 fcd3 	bl	8007b2a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	441a      	add	r2, r3
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002192:	2100      	movs	r1, #0
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f007 fbb1 	bl	80098fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 82a3 	bne.w	80026f2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4413      	add	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b3e      	cmp	r3, #62	; 0x3e
 80021d2:	d918      	bls.n	8002206 <PCD_EP_ISR_Handler+0x258>
 80021d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
 80021dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <PCD_EP_ISR_Handler+0x240>
 80021e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ea:	3b01      	subs	r3, #1
 80021ec:	647b      	str	r3, [r7, #68]	; 0x44
 80021ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e029      	b.n	800225a <PCD_EP_ISR_Handler+0x2ac>
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d112      	bne.n	8002234 <PCD_EP_ISR_Handler+0x286>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002218:	b29a      	uxth	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800222c:	b29a      	uxth	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	e012      	b.n	800225a <PCD_EP_ISR_Handler+0x2ac>
 8002234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <PCD_EP_ISR_Handler+0x2a0>
 8002248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224a:	3301      	adds	r3, #1
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
 800224e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002250:	b29b      	uxth	r3, r3
 8002252:	029b      	lsls	r3, r3, #10
 8002254:	b29a      	uxth	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226a:	827b      	strh	r3, [r7, #18]
 800226c:	8a7b      	ldrh	r3, [r7, #18]
 800226e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002272:	827b      	strh	r3, [r7, #18]
 8002274:	8a7b      	ldrh	r3, [r7, #18]
 8002276:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800227a:	827b      	strh	r3, [r7, #18]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	8a7b      	ldrh	r3, [r7, #18]
 8002282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002292:	b29b      	uxth	r3, r3
 8002294:	8013      	strh	r3, [r2, #0]
 8002296:	e22c      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022ac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f280 80f6 	bge.w	80024a2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022cc:	4013      	ands	r3, r2
 80022ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80022e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e8:	b292      	uxth	r2, r2
 80022ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022ec:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002304:	7b1b      	ldrb	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d123      	bne.n	8002352 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002332:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 808e 	beq.w	8002458 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002342:	6959      	ldr	r1, [r3, #20]
 8002344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002346:	88da      	ldrh	r2, [r3, #6]
 8002348:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800234c:	f005 fbed 	bl	8007b2a <USB_ReadPMA>
 8002350:	e082      	b.n	8002458 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002354:	78db      	ldrb	r3, [r3, #3]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d10a      	bne.n	8002370 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800235a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800235e:	461a      	mov	r2, r3
 8002360:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9d3 	bl	800270e <HAL_PCD_EP_DB_Receive>
 8002368:	4603      	mov	r3, r0
 800236a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800236e:	e073      	b.n	8002458 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d022      	beq.n	8002414 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80023f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d02c      	beq.n	8002458 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	6959      	ldr	r1, [r3, #20]
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	891a      	ldrh	r2, [r3, #8]
 800240a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800240e:	f005 fb8c 	bl	8007b2a <USB_ReadPMA>
 8002412:	e021      	b.n	8002458 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	4413      	add	r3, r2
 800242e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002438:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800243c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244e:	895a      	ldrh	r2, [r3, #10]
 8002450:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002454:	f005 fb69 	bl	8007b2a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002460:	441a      	add	r2, r3
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800246e:	441a      	add	r2, r3
 8002470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002472:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <PCD_EP_ISR_Handler+0x4da>
 800247c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d206      	bcs.n	8002496 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f007 fa34 	bl	80098fc <HAL_PCD_DataOutStageCallback>
 8002494:	e005      	b.n	80024a2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fe92 	bl	80061c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8121 	beq.w	80026f2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80024b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	441a      	add	r2, r3
 80024f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80024f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002502:	78db      	ldrb	r3, [r3, #3]
 8002504:	2b02      	cmp	r3, #2
 8002506:	f000 80a2 	beq.w	800264e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002512:	7b1b      	ldrb	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8093 	beq.w	8002640 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800251a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d046      	beq.n	80025b4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d126      	bne.n	800257c <PCD_EP_ISR_Handler+0x5ce>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	4413      	add	r3, r2
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00da      	lsls	r2, r3, #3
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	4413      	add	r3, r2
 8002550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002560:	b29a      	uxth	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002574:	b29a      	uxth	r2, r3
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e061      	b.n	8002640 <PCD_EP_ISR_Handler+0x692>
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d15d      	bne.n	8002640 <PCD_EP_ISR_Handler+0x692>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	4413      	add	r3, r2
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	00da      	lsls	r2, r3, #3
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
 80025b2:	e045      	b.n	8002640 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d126      	bne.n	8002610 <PCD_EP_ISR_Handler+0x662>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	4413      	add	r3, r2
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00da      	lsls	r2, r3, #3
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	4413      	add	r3, r2
 80025e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002608:	b29a      	uxth	r2, r3
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	e017      	b.n	8002640 <PCD_EP_ISR_Handler+0x692>
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d113      	bne.n	8002640 <PCD_EP_ISR_Handler+0x692>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	4413      	add	r3, r2
 8002628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800262a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	00da      	lsls	r2, r3, #3
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	4413      	add	r3, r2
 8002634:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2200      	movs	r2, #0
 800263e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f007 f973 	bl	8009932 <HAL_PCD_DataInStageCallback>
 800264c:	e051      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800264e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d144      	bne.n	80026e4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4413      	add	r3, r2
 8002674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800268a:	429a      	cmp	r2, r3
 800268c:	d907      	bls.n	800269e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800268e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002696:	1ad2      	subs	r2, r2, r3
 8002698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	e002      	b.n	80026a4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f007 f93d 	bl	8009932 <HAL_PCD_DataInStageCallback>
 80026b8:	e01b      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80026ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026c2:	441a      	add	r2, r3
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026d0:	441a      	add	r2, r3
 80026d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fd72 	bl	80061c6 <USB_EPStartXfer>
 80026e2:	e006      	b.n	80026f2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026e8:	461a      	mov	r2, r3
 80026ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f917 	bl	8002920 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f6ff ac5a 	blt.w	8001fb8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3758      	adds	r7, #88	; 0x58
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b088      	sub	sp, #32
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	4613      	mov	r3, r2
 800271a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07c      	beq.n	8002820 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	8b7b      	ldrh	r3, [r7, #26]
 8002752:	429a      	cmp	r2, r3
 8002754:	d306      	bcc.n	8002764 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	8b7b      	ldrh	r3, [r7, #26]
 800275c:	1ad2      	subs	r2, r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	e002      	b.n	800276a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d123      	bne.n	80027ba <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	833b      	strh	r3, [r7, #24]
 800278e:	8b3b      	ldrh	r3, [r7, #24]
 8002790:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002794:	833b      	strh	r3, [r7, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	441a      	add	r2, r3
 80027a4:	8b3b      	ldrh	r3, [r7, #24]
 80027a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01f      	beq.n	8002804 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027de:	82fb      	strh	r3, [r7, #22]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	441a      	add	r2, r3
 80027ee:	8afb      	ldrh	r3, [r7, #22]
 80027f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002800:	b29b      	uxth	r3, r3
 8002802:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002804:	8b7b      	ldrh	r3, [r7, #26]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8085 	beq.w	8002916 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6959      	ldr	r1, [r3, #20]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	891a      	ldrh	r2, [r3, #8]
 8002818:	8b7b      	ldrh	r3, [r7, #26]
 800281a:	f005 f986 	bl	8007b2a <USB_ReadPMA>
 800281e:	e07a      	b.n	8002916 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4413      	add	r3, r2
 800283a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002844:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	8b7b      	ldrh	r3, [r7, #26]
 800284c:	429a      	cmp	r2, r3
 800284e:	d306      	bcc.n	800285e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	8b7b      	ldrh	r3, [r7, #26]
 8002856:	1ad2      	subs	r2, r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	619a      	str	r2, [r3, #24]
 800285c:	e002      	b.n	8002864 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d123      	bne.n	80028b4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	83fb      	strh	r3, [r7, #30]
 8002888:	8bfb      	ldrh	r3, [r7, #30]
 800288a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800288e:	83fb      	strh	r3, [r7, #30]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	441a      	add	r2, r3
 800289e:	8bfb      	ldrh	r3, [r7, #30]
 80028a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11f      	bne.n	80028fe <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d8:	83bb      	strh	r3, [r7, #28]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	441a      	add	r2, r3
 80028e8:	8bbb      	ldrh	r3, [r7, #28]
 80028ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028fe:	8b7b      	ldrh	r3, [r7, #26]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6959      	ldr	r1, [r3, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	895a      	ldrh	r2, [r3, #10]
 8002910:	8b7b      	ldrh	r3, [r7, #26]
 8002912:	f005 f90a 	bl	8007b2a <USB_ReadPMA>
    }
  }

  return count;
 8002916:	8b7b      	ldrh	r3, [r7, #26]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0a2      	sub	sp, #136	; 0x88
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 81c5 	beq.w	8002cc4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	4413      	add	r3, r2
 8002954:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800296a:	429a      	cmp	r2, r3
 800296c:	d907      	bls.n	800297e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002976:	1ad2      	subs	r2, r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	619a      	str	r2, [r3, #24]
 800297c:	e002      	b.n	8002984 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 80b9 	bne.w	8002b00 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d126      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	4413      	add	r3, r2
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	00da      	lsls	r2, r3, #3
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029dc:	b29a      	uxth	r2, r3
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	e01a      	b.n	8002a1a <HAL_PCD_EP_DB_Transmit+0xfa>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d116      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0xfa>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	4413      	add	r3, r2
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00da      	lsls	r2, r3, #3
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d126      	bne.n	8002a76 <HAL_PCD_EP_DB_Transmit+0x156>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	00da      	lsls	r2, r3, #3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	801a      	strh	r2, [r3, #0]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	e017      	b.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d113      	bne.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	623b      	str	r3, [r7, #32]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	00da      	lsls	r2, r3, #3
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f006 ff40 	bl	8009932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 82d2 	beq.w	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	827b      	strh	r3, [r7, #18]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	8a7b      	ldrh	r3, [r7, #18]
 8002aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]
 8002afe:	e2b0      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d021      	beq.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	f040 8284 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b62:	441a      	add	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b70:	441a      	add	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d309      	bcc.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	621a      	str	r2, [r3, #32]
 8002b94:	e015      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bac:	e009      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d155      	bne.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x356>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	4413      	add	r3, r2
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	00da      	lsls	r2, r3, #3
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	4413      	add	r3, r2
 8002bec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8002bf6:	d916      	bls.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x306>
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	801a      	strh	r2, [r3, #0]
 8002c24:	e043      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d112      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e02d      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x348>
 8002c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c64:	3301      	adds	r3, #1
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	e01b      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d117      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c92:	4413      	add	r3, r2
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	00da      	lsls	r2, r3, #3
 8002c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6959      	ldr	r1, [r3, #20]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	891a      	ldrh	r2, [r3, #8]
 8002cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f004 fef2 	bl	8007aa6 <USB_WritePMA>
 8002cc2:	e1ce      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d307      	bcc.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	619a      	str	r2, [r3, #24]
 8002d06:	e002      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80c4 	bne.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d126      	bne.n	8002d6e <HAL_PCD_EP_DB_Transmit+0x44e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	4413      	add	r3, r2
 8002d36:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	00da      	lsls	r2, r3, #3
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d46:	667b      	str	r3, [r7, #100]	; 0x64
 8002d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	e01a      	b.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x484>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d116      	bne.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x484>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d8a:	4413      	add	r3, r2
 8002d8c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	00da      	lsls	r2, r3, #3
 8002d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d96:	4413      	add	r3, r2
 8002d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da0:	2200      	movs	r2, #0
 8002da2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12f      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dca:	4413      	add	r3, r2
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dda:	4413      	add	r3, r2
 8002ddc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	e017      	b.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x522>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d113      	bne.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x522>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e28:	4413      	add	r3, r2
 8002e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	00da      	lsls	r2, r3, #3
 8002e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3e:	2200      	movs	r2, #0
 8002e40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f006 fd72 	bl	8009932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8104 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
 8002e9e:	e0e0      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d121      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 80b4 	bne.w	8003062 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f02:	441a      	add	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f10:	441a      	add	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d309      	bcc.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	621a      	str	r2, [r3, #32]
 8002f34:	e015      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002f3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f4c:	e009      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	663b      	str	r3, [r7, #96]	; 0x60
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d155      	bne.n	800301c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f84:	4413      	add	r3, r2
 8002f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	00da      	lsls	r2, r3, #3
 8002f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f90:	4413      	add	r3, r2
 8002f92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f9c:	d916      	bls.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	677b      	str	r3, [r7, #116]	; 0x74
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x694>
 8002fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	677b      	str	r3, [r7, #116]	; 0x74
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e040      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d112      	bne.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	e02a      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	677b      	str	r3, [r7, #116]	; 0x74
 8002ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300a:	3301      	adds	r3, #1
 800300c:	677b      	str	r3, [r7, #116]	; 0x74
 800300e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003010:	b29b      	uxth	r3, r3
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	b29a      	uxth	r2, r3
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	e018      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x72e>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d114      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003032:	4413      	add	r3, r2
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800303e:	4413      	add	r3, r2
 8003040:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003048:	b29a      	uxth	r2, r3
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6959      	ldr	r1, [r3, #20]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	895a      	ldrh	r2, [r3, #10]
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	f004 fd22 	bl	8007aa6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307c:	823b      	strh	r3, [r7, #16]
 800307e:	8a3b      	ldrh	r3, [r7, #16]
 8003080:	f083 0310 	eor.w	r3, r3, #16
 8003084:	823b      	strh	r3, [r7, #16]
 8003086:	8a3b      	ldrh	r3, [r7, #16]
 8003088:	f083 0320 	eor.w	r3, r3, #32
 800308c:	823b      	strh	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3788      	adds	r7, #136	; 0x88
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	4613      	mov	r3, r2
 80030cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e009      	b.n	8003106 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030f2:	897a      	ldrh	r2, [r7, #10]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003106:	893b      	ldrh	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	b29a      	uxth	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	80da      	strh	r2, [r3, #6]
 800311a:	e00b      	b.n	8003134 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2201      	movs	r2, #1
 8003120:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	b29a      	uxth	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b29a      	uxth	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003166:	b29b      	uxth	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800317a:	b29b      	uxth	r3, r3
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d141      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031a6:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d131      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b4:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	4a46      	ldr	r2, [pc, #280]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c4:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031cc:	4a41      	ldr	r2, [pc, #260]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031d4:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2232      	movs	r2, #50	; 0x32
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	0c9b      	lsrs	r3, r3, #18
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ea:	e002      	b.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f2:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d102      	bne.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f2      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d158      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e057      	b.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003218:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003228:	e04d      	b.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003230:	d141      	bne.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003232:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d131      	bne.n	80032a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003246:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003258:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2232      	movs	r2, #50	; 0x32
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	0c9b      	lsrs	r3, r3, #18
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003276:	e002      	b.n	800327e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3b01      	subs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d102      	bne.n	8003292 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f2      	bne.n	8003278 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d112      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e011      	b.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032b4:	e007      	b.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40007000 	.word	0x40007000
 80032d8:	20000000 	.word	0x20000000
 80032dc:	431bde83 	.word	0x431bde83

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e306      	b.n	8003900 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d075      	beq.n	80033ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	4b97      	ldr	r3, [pc, #604]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003308:	4b94      	ldr	r3, [pc, #592]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d102      	bne.n	800331e <HAL_RCC_OscConfig+0x3e>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d002      	beq.n	8003324 <HAL_RCC_OscConfig+0x44>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d10b      	bne.n	800333c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003324:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d05b      	beq.n	80033e8 <HAL_RCC_OscConfig+0x108>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d157      	bne.n	80033e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e2e1      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d106      	bne.n	8003354 <HAL_RCC_OscConfig+0x74>
 8003346:	4b85      	ldr	r3, [pc, #532]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a84      	ldr	r2, [pc, #528]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x98>
 800335e:	4b7f      	ldr	r3, [pc, #508]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7e      	ldr	r2, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7b      	ldr	r2, [pc, #492]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0xb0>
 8003378:	4b78      	ldr	r3, [pc, #480]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a77      	ldr	r2, [pc, #476]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b75      	ldr	r3, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a74      	ldr	r2, [pc, #464]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd fed8 	bl	800114c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fd fed4 	bl	800114c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e2a6      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xc0>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fec4 	bl	800114c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd fec0 	bl	800114c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e292      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033da:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0xe8>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d075      	beq.n	80034e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003400:	4b56      	ldr	r3, [pc, #344]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x136>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d002      	beq.n	800341c <HAL_RCC_OscConfig+0x13c>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d11f      	bne.n	800345c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x154>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e265      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	4946      	ldr	r1, [pc, #280]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003448:	4b45      	ldr	r3, [pc, #276]	; (8003560 <HAL_RCC_OscConfig+0x280>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd fe31 	bl	80010b4 <HAL_InitTick>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d043      	beq.n	80034e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e251      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3c      	ldr	r2, [pc, #240]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd fe6c 	bl	800114c <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7fd fe68 	bl	800114c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e23a      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	492d      	ldr	r1, [pc, #180]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	e01a      	b.n	80034e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd fe48 	bl	800114c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fd fe44 	bl	800114c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e216      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1e0>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d041      	beq.n	8003572 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01c      	beq.n	8003530 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	4a17      	ldr	r2, [pc, #92]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd fe21 	bl	800114c <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fd fe1d 	bl	800114c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1ef      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ef      	beq.n	800350e <HAL_RCC_OscConfig+0x22e>
 800352e:	e020      	b.n	8003572 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd fe04 	bl	800114c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003546:	e00d      	b.n	8003564 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd fe00 	bl	800114c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d906      	bls.n	8003564 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1d2      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ea      	bne.n	8003548 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a6 	beq.w	80036cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003584:	4b84      	ldr	r3, [pc, #528]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x2b4>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x2b6>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4a7e      	ldr	r2, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
 80035a6:	4b7c      	ldr	r3, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035b2:	2301      	movs	r3, #1
 80035b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b6:	4b79      	ldr	r3, [pc, #484]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fdbd 	bl	800114c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fd fdb9 	bl	800114c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e18b      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e8:	4b6c      	ldr	r3, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x4bc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d108      	bne.n	800360e <HAL_RCC_OscConfig+0x32e>
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a65      	ldr	r2, [pc, #404]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800360c:	e024      	b.n	8003658 <HAL_RCC_OscConfig+0x378>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d110      	bne.n	8003638 <HAL_RCC_OscConfig+0x358>
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	4a5a      	ldr	r2, [pc, #360]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003636:	e00f      	b.n	8003658 <HAL_RCC_OscConfig+0x378>
 8003638:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	4a56      	ldr	r2, [pc, #344]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd fd74 	bl	800114c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fd fd70 	bl	800114c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e140      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ed      	beq.n	8003668 <HAL_RCC_OscConfig+0x388>
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fd fd5d 	bl	800114c <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7fd fd59 	bl	800114c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e129      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ed      	bne.n	8003696 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b35      	ldr	r3, [pc, #212]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	4a34      	ldr	r2, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d03c      	beq.n	8003752 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01c      	beq.n	800371a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fd2c 	bl	800114c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f8:	f7fd fd28 	bl	800114c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0fa      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ef      	beq.n	80036f8 <HAL_RCC_OscConfig+0x418>
 8003718:	e01b      	b.n	8003752 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fd0f 	bl	800114c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003732:	f7fd fd0b 	bl	800114c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0dd      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ef      	bne.n	8003732 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80d1 	beq.w	80038fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b0c      	cmp	r3, #12
 8003766:	f000 808b 	beq.w	8003880 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d15e      	bne.n	8003830 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <HAL_RCC_OscConfig+0x4b8>)
 8003778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd fce5 	bl	800114c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003784:	e00c      	b.n	80037a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd fce1 	bl	800114c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d905      	bls.n	80037a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e0b3      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ec      	bne.n	8003786 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x62c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6a11      	ldr	r1, [r2, #32]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037bc:	3a01      	subs	r2, #1
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037c6:	0212      	lsls	r2, r2, #8
 80037c8:	4311      	orrs	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ce:	0852      	lsrs	r2, r2, #1
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0552      	lsls	r2, r2, #21
 80037d4:	4311      	orrs	r1, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037da:	0852      	lsrs	r2, r2, #1
 80037dc:	3a01      	subs	r2, #1
 80037de:	0652      	lsls	r2, r2, #25
 80037e0:	4311      	orrs	r1, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037e6:	06d2      	lsls	r2, r2, #27
 80037e8:	430a      	orrs	r2, r1
 80037ea:	4947      	ldr	r1, [pc, #284]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b45      	ldr	r3, [pc, #276]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a44      	ldr	r2, [pc, #272]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a41      	ldr	r2, [pc, #260]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003806:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd fca0 	bl	800114c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd fc9c 	bl	800114c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e06e      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x530>
 800382e:	e066      	b.n	80038fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b35      	ldr	r3, [pc, #212]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a34      	ldr	r2, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800383c:	4b32      	ldr	r3, [pc, #200]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a31      	ldr	r2, [pc, #196]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003848:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a2e      	ldr	r2, [pc, #184]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800384e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003856:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd fc78 	bl	800114c <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd fc74 	bl	800114c <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e046      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003872:	4b25      	ldr	r3, [pc, #148]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x580>
 800387e:	e03e      	b.n	80038fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e039      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_RCC_OscConfig+0x628>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	429a      	cmp	r2, r3
 800389e:	d12c      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	3b01      	subs	r3, #1
 80038ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d123      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d11b      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d113      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	019f800c 	.word	0x019f800c

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e11e      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b91      	ldr	r3, [pc, #580]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 020f 	bic.w	r2, r3, #15
 800393e:	498c      	ldr	r1, [pc, #560]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b8a      	ldr	r3, [pc, #552]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e106      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d073      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d129      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396c:	4b81      	ldr	r3, [pc, #516]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0f4      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800397c:	f000 f966 	bl	8003c4c <RCC_GetSysClockFreqFromPLLSource>
 8003980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4a7c      	ldr	r2, [pc, #496]	; (8003b78 <HAL_RCC_ClockConfig+0x268>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d93f      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d033      	beq.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12f      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b2:	4a70      	ldr	r2, [pc, #448]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e024      	b.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0c6      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0be      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039e8:	f000 f8ce 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <HAL_RCC_ClockConfig+0x268>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d909      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fe:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b5a      	ldr	r3, [pc, #360]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4957      	ldr	r1, [pc, #348]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fb96 	bl	800114c <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fd fb92 	bl	800114c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e095      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d023      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a7c:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a84:	4a3b      	ldr	r2, [pc, #236]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4936      	ldr	r1, [pc, #216]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aa6:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d21d      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 020f 	bic.w	r2, r3, #15
 8003ac8:	4929      	ldr	r1, [pc, #164]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd fb3c 	bl	800114c <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd fb38 	bl	800114c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e03b      	b.n	8003b66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1ed      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4917      	ldr	r1, [pc, #92]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490f      	ldr	r1, [pc, #60]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3a:	f000 f825 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_RCC_ClockConfig+0x264>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490c      	ldr	r1, [pc, #48]	; (8003b7c <HAL_RCC_ClockConfig+0x26c>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x270>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x274>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd faa8 	bl	80010b4 <HAL_InitTick>
 8003b64:	4603      	mov	r3, r0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40022000 	.word	0x40022000
 8003b74:	40021000 	.word	0x40021000
 8003b78:	04c4b400 	.word	0x04c4b400
 8003b7c:	08009f24 	.word	0x08009f24
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d102      	bne.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	e047      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ba0:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bac:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	e03e      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bb2:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d136      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be6:	68d2      	ldr	r2, [r2, #12]
 8003be8:	0a12      	lsrs	r2, r2, #8
 8003bea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	617b      	str	r3, [r7, #20]
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	0a12      	lsrs	r2, r2, #8
 8003c04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
      break;
 8003c0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0e5b      	lsrs	r3, r3, #25
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e001      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c30:	693b      	ldr	r3, [r7, #16]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d10c      	bne.n	8003c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c7a:	68d2      	ldr	r2, [r2, #12]
 8003c7c:	0a12      	lsrs	r2, r2, #8
 8003c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
    break;
 8003c88:	e00c      	b.n	8003ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0a12      	lsrs	r2, r2, #8
 8003c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
    break;
 8003ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cbe:	687b      	ldr	r3, [r7, #4]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	007a1200 	.word	0x007a1200
 8003cd4:	00f42400 	.word	0x00f42400

08003cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8098 	beq.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	4a3f      	ldr	r2, [pc, #252]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6593      	str	r3, [r2, #88]	; 0x58
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fa0d 	bl	800114c <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d34:	e009      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd fa09 	bl	800114c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d902      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	74fb      	strb	r3, [r7, #19]
        break;
 8003d48:	e005      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4a:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ef      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d159      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01e      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d019      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d016      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd f9c9 	bl	800114c <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fd f9c5 	bl	800114c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ec      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e00:	e008      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	74bb      	strb	r3, [r7, #18]
 8003e06:	e005      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e14:	7c7b      	ldrb	r3, [r7, #17]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d105      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1a:	4ba6      	ldr	r3, [pc, #664]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	4aa5      	ldr	r2, [pc, #660]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e32:	4ba0      	ldr	r3, [pc, #640]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f023 0203 	bic.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	499c      	ldr	r1, [pc, #624]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e54:	4b97      	ldr	r3, [pc, #604]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 020c 	bic.w	r2, r3, #12
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4994      	ldr	r1, [pc, #592]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e76:	4b8f      	ldr	r3, [pc, #572]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	498b      	ldr	r1, [pc, #556]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e98:	4b86      	ldr	r3, [pc, #536]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	4983      	ldr	r1, [pc, #524]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eba:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	497a      	ldr	r1, [pc, #488]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003edc:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	4972      	ldr	r1, [pc, #456]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efe:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4969      	ldr	r1, [pc, #420]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f20:	4b64      	ldr	r3, [pc, #400]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4961      	ldr	r1, [pc, #388]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f42:	4b5c      	ldr	r3, [pc, #368]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	4958      	ldr	r1, [pc, #352]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	4950      	ldr	r1, [pc, #320]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f9c:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4942      	ldr	r1, [pc, #264]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	d105      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbc:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd4:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4934      	ldr	r1, [pc, #208]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	4926      	ldr	r1, [pc, #152]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	4918      	ldr	r1, [pc, #96]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004064:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	490a      	ldr	r1, [pc, #40]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409a:	d105      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e049      	b.n	800415e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc fed2 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f000 fd7c 	bl	8004bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e049      	b.n	800420c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7fc fda3 	bl	8000cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 fd25 	bl	8004bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_TIM_PWM_Start+0x24>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e03c      	b.n	80042b2 <HAL_TIM_PWM_Start+0x9e>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d109      	bne.n	8004252 <HAL_TIM_PWM_Start+0x3e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	bf14      	ite	ne
 800424a:	2301      	movne	r3, #1
 800424c:	2300      	moveq	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	e02f      	b.n	80042b2 <HAL_TIM_PWM_Start+0x9e>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d109      	bne.n	800426c <HAL_TIM_PWM_Start+0x58>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e022      	b.n	80042b2 <HAL_TIM_PWM_Start+0x9e>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d109      	bne.n	8004286 <HAL_TIM_PWM_Start+0x72>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e015      	b.n	80042b2 <HAL_TIM_PWM_Start+0x9e>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b10      	cmp	r3, #16
 800428a:	d109      	bne.n	80042a0 <HAL_TIM_PWM_Start+0x8c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e008      	b.n	80042b2 <HAL_TIM_PWM_Start+0x9e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e097      	b.n	80043ea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0xb6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c8:	e023      	b.n	8004312 <HAL_TIM_PWM_Start+0xfe>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xc6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d8:	e01b      	b.n	8004312 <HAL_TIM_PWM_Start+0xfe>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xd6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	e013      	b.n	8004312 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xe6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f8:	e00b      	b.n	8004312 <HAL_TIM_PWM_Start+0xfe>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start+0xf6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	e003      	b.n	8004312 <HAL_TIM_PWM_Start+0xfe>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2201      	movs	r2, #1
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fff0 	bl	8005300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a33      	ldr	r2, [pc, #204]	; (80043f4 <HAL_TIM_PWM_Start+0x1e0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_TIM_PWM_Start+0x13e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <HAL_TIM_PWM_Start+0x1e4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_TIM_PWM_Start+0x13e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a30      	ldr	r2, [pc, #192]	; (80043fc <HAL_TIM_PWM_Start+0x1e8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_TIM_PWM_Start+0x13e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <HAL_TIM_PWM_Start+0x1ec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_TIM_PWM_Start+0x13e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <HAL_TIM_PWM_Start+0x1f0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_TIM_PWM_Start+0x142>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_TIM_PWM_Start+0x144>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <HAL_TIM_PWM_Start+0x1e0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x194>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x194>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_TIM_PWM_Start+0x1f4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x194>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_TIM_PWM_Start+0x1f8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x194>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <HAL_TIM_PWM_Start+0x1e4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x194>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_TIM_PWM_Start+0x1e8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d115      	bne.n	80043d4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <HAL_TIM_PWM_Start+0x1fc>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d015      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1d2>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d011      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40013400 	.word	0x40013400
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	00010007 	.word	0x00010007

08004414 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e097      	b.n	8004558 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fc fc7f 	bl	8000d40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004458:	f023 0307 	bic.w	r3, r3, #7
 800445c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f000 fbc3 	bl	8004bf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	4313      	orrs	r3, r2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044b4:	f023 030c 	bic.w	r3, r3, #12
 80044b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	4313      	orrs	r3, r2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	011a      	lsls	r2, r3, #4
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	031b      	lsls	r3, r3, #12
 80044e4:	4313      	orrs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4313      	orrs	r3, r2
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004570:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004578:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004580:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004588:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d102      	bne.n	800459c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004596:	7b7b      	ldrb	r3, [r7, #13]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d001      	beq.n	80045a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e069      	b.n	8004674 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	e031      	b.n	8004616 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d110      	bne.n	80045da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b8:	7bbb      	ldrb	r3, [r7, #14]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045be:	7b3b      	ldrb	r3, [r7, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e055      	b.n	8004674 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d8:	e01d      	b.n	8004616 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d108      	bne.n	80045f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e6:	7b7b      	ldrb	r3, [r7, #13]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d102      	bne.n	80045f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045ec:	7b3b      	ldrb	r3, [r7, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d001      	beq.n	80045f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e03e      	b.n	8004674 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_TIM_Encoder_Start+0xc4>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d008      	beq.n	8004634 <HAL_TIM_Encoder_Start+0xd4>
 8004622:	e00f      	b.n	8004644 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fe67 	bl	8005300 <TIM_CCxChannelCmd>
      break;
 8004632:	e016      	b.n	8004662 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	2104      	movs	r1, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fe5f 	bl	8005300 <TIM_CCxChannelCmd>
      break;
 8004642:	e00e      	b.n	8004662 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fe57 	bl	8005300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2201      	movs	r2, #1
 8004658:	2104      	movs	r1, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fe50 	bl	8005300 <TIM_CCxChannelCmd>
      break;
 8004660:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0202 	mvn.w	r2, #2
 80046a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa7a 	bl	8004bb8 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa6c 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fa7d 	bl	8004bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0204 	mvn.w	r2, #4
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa50 	bl	8004bb8 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa42 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fa53 	bl	8004bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0208 	mvn.w	r2, #8
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2204      	movs	r2, #4
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa26 	bl	8004bb8 <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa18 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fa29 	bl	8004bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0210 	mvn.w	r2, #16
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2208      	movs	r2, #8
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9fc 	bl	8004bb8 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9ee 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f9ff 	bl	8004bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0201 	mvn.w	r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fb fda8 	bl	8000350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 febc 	bl	80055a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483a:	d10e      	bne.n	800485a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d107      	bne.n	800485a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 feaf 	bl	80055b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d10e      	bne.n	8004886 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d107      	bne.n	8004886 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f9ad 	bl	8004be0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d10e      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d107      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f06f 0220 	mvn.w	r2, #32
 80048aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fe6f 	bl	8005590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c0:	d10f      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fe75 	bl	80055cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f0:	d10f      	bne.n	8004912 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004900:	d107      	bne.n	8004912 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fe67 	bl	80055e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004920:	d10f      	bne.n	8004942 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fe59 	bl	80055f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800494c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004950:	d10f      	bne.n	8004972 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800495c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004960:	d107      	bne.n	8004972 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fe4b 	bl	8005608 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004996:	2302      	movs	r3, #2
 8004998:	e0ff      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b14      	cmp	r3, #20
 80049a6:	f200 80f0 	bhi.w	8004b8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004b8b 	.word	0x08004b8b
 80049b8:	08004b8b 	.word	0x08004b8b
 80049bc:	08004b8b 	.word	0x08004b8b
 80049c0:	08004a45 	.word	0x08004a45
 80049c4:	08004b8b 	.word	0x08004b8b
 80049c8:	08004b8b 	.word	0x08004b8b
 80049cc:	08004b8b 	.word	0x08004b8b
 80049d0:	08004a87 	.word	0x08004a87
 80049d4:	08004b8b 	.word	0x08004b8b
 80049d8:	08004b8b 	.word	0x08004b8b
 80049dc:	08004b8b 	.word	0x08004b8b
 80049e0:	08004ac7 	.word	0x08004ac7
 80049e4:	08004b8b 	.word	0x08004b8b
 80049e8:	08004b8b 	.word	0x08004b8b
 80049ec:	08004b8b 	.word	0x08004b8b
 80049f0:	08004b09 	.word	0x08004b09
 80049f4:	08004b8b 	.word	0x08004b8b
 80049f8:	08004b8b 	.word	0x08004b8b
 80049fc:	08004b8b 	.word	0x08004b8b
 8004a00:	08004b49 	.word	0x08004b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f982 	bl	8004d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0208 	orr.w	r2, r2, #8
 8004a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6999      	ldr	r1, [r3, #24]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	619a      	str	r2, [r3, #24]
      break;
 8004a42:	e0a5      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f9f2 	bl	8004e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6999      	ldr	r1, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	021a      	lsls	r2, r3, #8
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]
      break;
 8004a84:	e084      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa5b 	bl	8004f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0208 	orr.w	r2, r2, #8
 8004aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0204 	bic.w	r2, r2, #4
 8004ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	61da      	str	r2, [r3, #28]
      break;
 8004ac4:	e064      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fac3 	bl	8005058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69d9      	ldr	r1, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	61da      	str	r2, [r3, #28]
      break;
 8004b06:	e043      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb2c 	bl	800516c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b46:	e023      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fb70 	bl	8005234 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b88:	e002      	b.n	8004b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop

08004ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <TIM_Base_SetConfig+0x104>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x38>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x38>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a39      	ldr	r2, [pc, #228]	; (8004cfc <TIM_Base_SetConfig+0x108>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x38>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a38      	ldr	r2, [pc, #224]	; (8004d00 <TIM_Base_SetConfig+0x10c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x38>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <TIM_Base_SetConfig+0x110>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <TIM_Base_SetConfig+0x104>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01b      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d017      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <TIM_Base_SetConfig+0x108>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <TIM_Base_SetConfig+0x10c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00f      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <TIM_Base_SetConfig+0x110>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00b      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a27      	ldr	r2, [pc, #156]	; (8004d08 <TIM_Base_SetConfig+0x114>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <TIM_Base_SetConfig+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d003      	beq.n	8004c7e <TIM_Base_SetConfig+0x8a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <TIM_Base_SetConfig+0x11c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d108      	bne.n	8004c90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <TIM_Base_SetConfig+0x104>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00f      	beq.n	8004cdc <TIM_Base_SetConfig+0xe8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a11      	ldr	r2, [pc, #68]	; (8004d04 <TIM_Base_SetConfig+0x110>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0xe8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <TIM_Base_SetConfig+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0xe8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0f      	ldr	r2, [pc, #60]	; (8004d0c <TIM_Base_SetConfig+0x118>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0xe8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <TIM_Base_SetConfig+0x11c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d103      	bne.n	8004ce4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	615a      	str	r2, [r3, #20]
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800

08004d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f023 0302 	bic.w	r3, r3, #2
 8004d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <TIM_OC1_SetConfig+0x10c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <TIM_OC1_SetConfig+0x80>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <TIM_OC1_SetConfig+0x110>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_OC1_SetConfig+0x80>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <TIM_OC1_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_OC1_SetConfig+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <TIM_OC1_SetConfig+0x118>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC1_SetConfig+0x80>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <TIM_OC1_SetConfig+0x11c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d10c      	bne.n	8004dae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0308 	bic.w	r3, r3, #8
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <TIM_OC1_SetConfig+0x10c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_OC1_SetConfig+0xc2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <TIM_OC1_SetConfig+0x110>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_OC1_SetConfig+0xc2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <TIM_OC1_SetConfig+0x114>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_OC1_SetConfig+0xc2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <TIM_OC1_SetConfig+0x118>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_OC1_SetConfig+0xc2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <TIM_OC1_SetConfig+0x11c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d111      	bne.n	8004dfa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40013400 	.word	0x40013400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0210 	bic.w	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0320 	bic.w	r3, r3, #32
 8004e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a28      	ldr	r2, [pc, #160]	; (8004f34 <TIM_OC2_SetConfig+0x100>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC2_SetConfig+0x6c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <TIM_OC2_SetConfig+0x104>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10d      	bne.n	8004ebc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <TIM_OC2_SetConfig+0x100>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_OC2_SetConfig+0xb0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <TIM_OC2_SetConfig+0x104>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_OC2_SetConfig+0xb0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <TIM_OC2_SetConfig+0x108>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_OC2_SetConfig+0xb0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1a      	ldr	r2, [pc, #104]	; (8004f40 <TIM_OC2_SetConfig+0x10c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_OC2_SetConfig+0xb0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <TIM_OC2_SetConfig+0x110>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d113      	bne.n	8004f0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00
 8004f38:	40013400 	.word	0x40013400
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400
 8004f44:	40014800 	.word	0x40014800

08004f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <TIM_OC3_SetConfig+0xfc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_OC3_SetConfig+0x6a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <TIM_OC3_SetConfig+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10d      	bne.n	8004fce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <TIM_OC3_SetConfig+0xfc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_OC3_SetConfig+0xae>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <TIM_OC3_SetConfig+0x100>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_OC3_SetConfig+0xae>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <TIM_OC3_SetConfig+0x104>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC3_SetConfig+0xae>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	; (8005050 <TIM_OC3_SetConfig+0x108>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC3_SetConfig+0xae>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <TIM_OC3_SetConfig+0x10c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d113      	bne.n	800501e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a28      	ldr	r2, [pc, #160]	; (8005158 <TIM_OC4_SetConfig+0x100>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC4_SetConfig+0x6c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a27      	ldr	r2, [pc, #156]	; (800515c <TIM_OC4_SetConfig+0x104>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10d      	bne.n	80050e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	031b      	lsls	r3, r3, #12
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <TIM_OC4_SetConfig+0x100>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_OC4_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1c      	ldr	r2, [pc, #112]	; (800515c <TIM_OC4_SetConfig+0x104>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00b      	beq.n	8005108 <TIM_OC4_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <TIM_OC4_SetConfig+0x108>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_OC4_SetConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <TIM_OC4_SetConfig+0x10c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC4_SetConfig+0xb0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a19      	ldr	r2, [pc, #100]	; (8005168 <TIM_OC4_SetConfig+0x110>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d113      	bne.n	8005130 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005116:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	019b      	lsls	r3, r3, #6
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a17      	ldr	r2, [pc, #92]	; (8005220 <TIM_OC5_SetConfig+0xb4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_OC5_SetConfig+0x7a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a16      	ldr	r2, [pc, #88]	; (8005224 <TIM_OC5_SetConfig+0xb8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_OC5_SetConfig+0x7a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <TIM_OC5_SetConfig+0xbc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_OC5_SetConfig+0x7a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <TIM_OC5_SetConfig+0xc0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC5_SetConfig+0x7a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <TIM_OC5_SetConfig+0xc4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d109      	bne.n	80051fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800527a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	051b      	lsls	r3, r3, #20
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a18      	ldr	r2, [pc, #96]	; (80052ec <TIM_OC6_SetConfig+0xb8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_OC6_SetConfig+0x7c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <TIM_OC6_SetConfig+0xbc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_OC6_SetConfig+0x7c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <TIM_OC6_SetConfig+0xc0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_OC6_SetConfig+0x7c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <TIM_OC6_SetConfig+0xc4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_OC6_SetConfig+0x7c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a14      	ldr	r2, [pc, #80]	; (80052fc <TIM_OC6_SetConfig+0xc8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d109      	bne.n	80052c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2201      	movs	r2, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	43db      	mvns	r3, r3
 8005322:	401a      	ands	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e065      	b.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2c      	ldr	r2, [pc, #176]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2b      	ldr	r2, [pc, #172]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800539e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d013      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a12      	ldr	r2, [pc, #72]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a13      	ldr	r2, [pc, #76]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40014000 	.word	0x40014000

08005450 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e087      	b.n	800557c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a27      	ldr	r2, [pc, #156]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a25      	ldr	r2, [pc, #148]	; (800558c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d106      	bne.n	8005508 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1d      	ldr	r2, [pc, #116]	; (800558c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d126      	bne.n	800556a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	051b      	lsls	r3, r3, #20
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a0d      	ldr	r2, [pc, #52]	; (800558c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d106      	bne.n	800556a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40013400 	.word	0x40013400

08005590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800562c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005630:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	b29a      	uxth	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005652:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005656:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	b29b      	uxth	r3, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	b29b      	uxth	r3, r3
 8005668:	4013      	ands	r3, r2
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005680:	b084      	sub	sp, #16
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	f107 0014 	add.w	r0, r7, #20
 800568e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	b004      	add	sp, #16
 80056c0:	4770      	bx	lr
	...

080056c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b09d      	sub	sp, #116	; 0x74
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d81f      	bhi.n	8005736 <USB_ActivateEndpoint+0x72>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <USB_ActivateEndpoint+0x38>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	0800570d 	.word	0x0800570d
 8005700:	08005729 	.word	0x08005729
 8005704:	0800573f 	.word	0x0800573f
 8005708:	0800571b 	.word	0x0800571b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800570c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005714:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005718:	e012      	b.n	8005740 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800571a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800571e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005722:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005726:	e00b      	b.n	8005740 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005728:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800572c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005730:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005734:	e004      	b.n	8005740 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800573c:	e000      	b.n	8005740 <USB_ActivateEndpoint+0x7c>
      break;
 800573e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800574e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575e:	b29b      	uxth	r3, r3
 8005760:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	b21b      	sxth	r3, r3
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	b21a      	sxth	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b21b      	sxth	r3, r3
 8005782:	4313      	orrs	r3, r2
 8005784:	b21b      	sxth	r3, r3
 8005786:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	441a      	add	r2, r3
 8005794:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	7b1b      	ldrb	r3, [r3, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f040 8149 	bne.w	8005a48 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8084 	beq.w	80058c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	4413      	add	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	00da      	lsls	r2, r3, #3
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	88db      	ldrh	r3, [r3, #6]
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	827b      	strh	r3, [r7, #18]
 8005802:	8a7b      	ldrh	r3, [r7, #18]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <USB_ActivateEndpoint+0x180>
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005822:	823b      	strh	r3, [r7, #16]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	8a3b      	ldrh	r3, [r7, #16]
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d020      	beq.n	800588e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005862:	81bb      	strh	r3, [r7, #12]
 8005864:	89bb      	ldrh	r3, [r7, #12]
 8005866:	f083 0320 	eor.w	r3, r3, #32
 800586a:	81bb      	strh	r3, [r7, #12]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	89bb      	ldrh	r3, [r7, #12]
 8005878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005888:	b29b      	uxth	r3, r3
 800588a:	8013      	strh	r3, [r2, #0]
 800588c:	e2a6      	b.n	8005ddc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a4:	81fb      	strh	r3, [r7, #14]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	441a      	add	r2, r3
 80058b0:	89fb      	ldrh	r3, [r7, #14]
 80058b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]
 80058c6:	e289      	b.n	8005ddc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	633b      	str	r3, [r7, #48]	; 0x30
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	4413      	add	r3, r2
 80058da:	633b      	str	r3, [r7, #48]	; 0x30
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00da      	lsls	r2, r3, #3
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	88db      	ldrh	r3, [r3, #6]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	4413      	add	r3, r2
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	00da      	lsls	r2, r3, #3
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	4413      	add	r3, r2
 800591a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b3e      	cmp	r3, #62	; 0x3e
 8005926:	d918      	bls.n	800595a <USB_ActivateEndpoint+0x296>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <USB_ActivateEndpoint+0x27e>
 800593c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800593e:	3b01      	subs	r3, #1
 8005940:	66bb      	str	r3, [r7, #104]	; 0x68
 8005942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005944:	b29b      	uxth	r3, r3
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e029      	b.n	80059ae <USB_ActivateEndpoint+0x2ea>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d112      	bne.n	8005988 <USB_ActivateEndpoint+0x2c4>
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596c:	b29a      	uxth	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005980:	b29a      	uxth	r2, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e012      	b.n	80059ae <USB_ActivateEndpoint+0x2ea>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <USB_ActivateEndpoint+0x2de>
 800599c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800599e:	3301      	adds	r3, #1
 80059a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80059bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01b      	beq.n	80059fe <USB_ActivateEndpoint+0x33a>
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059dc:	843b      	strh	r3, [r7, #32]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	441a      	add	r2, r3
 80059e8:	8c3b      	ldrh	r3, [r7, #32]
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	83fb      	strh	r3, [r7, #30]
 8005a16:	8bfb      	ldrh	r3, [r7, #30]
 8005a18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a1c:	83fb      	strh	r3, [r7, #30]
 8005a1e:	8bfb      	ldrh	r3, [r7, #30]
 8005a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a24:	83fb      	strh	r3, [r7, #30]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8bfb      	ldrh	r3, [r7, #30]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
 8005a46:	e1c9      	b.n	8005ddc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d11e      	bne.n	8005a8e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	441a      	add	r2, r3
 8005a74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]
 8005a8c:	e01d      	b.n	8005aca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ada:	4413      	add	r3, r2
 8005adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	00da      	lsls	r2, r3, #3
 8005ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	891b      	ldrh	r3, [r3, #8]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	657b      	str	r3, [r7, #84]	; 0x54
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0e:	4413      	add	r3, r2
 8005b10:	657b      	str	r3, [r7, #84]	; 0x54
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	00da      	lsls	r2, r3, #3
 8005b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b20:	653b      	str	r3, [r7, #80]	; 0x50
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b30:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 8093 	bne.w	8005c62 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <USB_ActivateEndpoint+0x4cc>
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <USB_ActivateEndpoint+0x51c>
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c06:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]
 8005c60:	e0bc      	b.n	8005ddc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005c72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01d      	beq.n	8005cba <USB_ActivateEndpoint+0x5f6>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01d      	beq.n	8005d12 <USB_ActivateEndpoint+0x64e>
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	78db      	ldrb	r3, [r3, #3]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d024      	beq.n	8005d64 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d38:	f083 0320 	eor.w	r3, r3, #32
 8005d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
 8005d62:	e01d      	b.n	8005da0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	441a      	add	r2, r3
 8005d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ddc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3774      	adds	r7, #116	; 0x74
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b08d      	sub	sp, #52	; 0x34
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	7b1b      	ldrb	r3, [r3, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 808e 	bne.w	8005f1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d044      	beq.n	8005e92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	81bb      	strh	r3, [r7, #12]
 8005e16:	89bb      	ldrh	r3, [r7, #12]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <USB_DeactivateEndpoint+0x6c>
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e36:	817b      	strh	r3, [r7, #10]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	897b      	ldrh	r3, [r7, #10]
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6e:	813b      	strh	r3, [r7, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	441a      	add	r2, r3
 8005e7a:	893b      	ldrh	r3, [r7, #8]
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]
 8005e90:	e192      	b.n	80061b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	827b      	strh	r3, [r7, #18]
 8005ea0:	8a7b      	ldrh	r3, [r7, #18]
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01b      	beq.n	8005ee2 <USB_DeactivateEndpoint+0xf6>
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec0:	823b      	strh	r3, [r7, #16]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	8a3b      	ldrh	r3, [r7, #16]
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	81fb      	strh	r3, [r7, #14]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
 8005f1a:	e14d      	b.n	80061b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 80a5 	bne.w	8006070 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	843b      	strh	r3, [r7, #32]
 8005f34:	8c3b      	ldrh	r3, [r7, #32]
 8005f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01b      	beq.n	8005f76 <USB_DeactivateEndpoint+0x18a>
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	83fb      	strh	r3, [r7, #30]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	8bfb      	ldrh	r3, [r7, #30]
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	83bb      	strh	r3, [r7, #28]
 8005f84:	8bbb      	ldrh	r3, [r7, #28]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <USB_DeactivateEndpoint+0x1da>
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	837b      	strh	r3, [r7, #26]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	8b7b      	ldrh	r3, [r7, #26]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	833b      	strh	r3, [r7, #24]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	8b3b      	ldrh	r3, [r7, #24]
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	82fb      	strh	r3, [r7, #22]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	8afb      	ldrh	r3, [r7, #22]
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604c:	82bb      	strh	r3, [r7, #20]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8abb      	ldrh	r3, [r7, #20]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e0a3      	b.n	80061b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800607e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <USB_DeactivateEndpoint+0x2d4>
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01b      	beq.n	8006110 <USB_DeactivateEndpoint+0x324>
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	b29b      	uxth	r3, r3
 8006146:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	847b      	strh	r3, [r7, #34]	; 0x22
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3734      	adds	r7, #52	; 0x34
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b0c2      	sub	sp, #264	; 0x108
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d4:	6018      	str	r0, [r3, #0]
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	f040 867b 	bne.w	8006ee8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	429a      	cmp	r2, r3
 800620c:	d908      	bls.n	8006220 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800620e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800621e:	e007      	b.n	8006230 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	7b1b      	ldrb	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d13a      	bne.n	80062b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6959      	ldr	r1, [r3, #20]
 800624c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	88da      	ldrh	r2, [r3, #6]
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	b29b      	uxth	r3, r3
 800625e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006262:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006266:	6800      	ldr	r0, [r0, #0]
 8006268:	f001 fc1d 	bl	8007aa6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800626c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4413      	add	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	00da      	lsls	r2, r3, #3
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	f000 bde3 	b.w	8006e7c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	78db      	ldrb	r3, [r3, #3]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	f040 843a 	bne.w	8006b3c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a1a      	ldr	r2, [r3, #32]
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	f240 83b7 	bls.w	8006a54 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80062e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800633a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006352:	1ad2      	subs	r2, r2, r3
 8006354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81b3 	beq.w	80066ee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	633b      	str	r3, [r7, #48]	; 0x30
 8006394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d16d      	bne.n	8006480 <USB_EPStartXfer+0x2ba>
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063be:	b29b      	uxth	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	4413      	add	r3, r2
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00da      	lsls	r2, r3, #3
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	4413      	add	r3, r2
 80063da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e4:	2b3e      	cmp	r3, #62	; 0x3e
 80063e6:	d91c      	bls.n	8006422 <USB_EPStartXfer+0x25c>
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <USB_EPStartXfer+0x242>
 80063fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006402:	3b01      	subs	r3, #1
 8006404:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006408:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800640c:	b29b      	uxth	r3, r3
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641a:	b29a      	uxth	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e053      	b.n	80064ca <USB_EPStartXfer+0x304>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	2b00      	cmp	r3, #0
 8006428:	d112      	bne.n	8006450 <USB_EPStartXfer+0x28a>
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006434:	b29a      	uxth	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006448:	b29a      	uxth	r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	e03c      	b.n	80064ca <USB_EPStartXfer+0x304>
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <USB_EPStartXfer+0x2aa>
 8006466:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800646a:	3301      	adds	r3, #1
 800646c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006470:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006474:	b29b      	uxth	r3, r3
 8006476:	029b      	lsls	r3, r3, #10
 8006478:	b29a      	uxth	r2, r3
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e024      	b.n	80064ca <USB_EPStartXfer+0x304>
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d11c      	bne.n	80064ca <USB_EPStartXfer+0x304>
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649e:	b29b      	uxth	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	4413      	add	r3, r2
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	00da      	lsls	r2, r3, #3
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	4413      	add	r3, r2
 80064ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	895b      	ldrh	r3, [r3, #10]
 80064d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6959      	ldr	r1, [r3, #20]
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064f8:	6800      	ldr	r0, [r0, #0]
 80064fa:	f001 fad4 	bl	8007aa6 <USB_WritePMA>
            ep->xfer_buff += len;
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	441a      	add	r2, r3
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800651c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	429a      	cmp	r2, r3
 8006536:	d90f      	bls.n	8006558 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	621a      	str	r2, [r3, #32]
 8006556:	e00e      	b.n	8006576 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d16d      	bne.n	8006662 <USB_EPStartXfer+0x49c>
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	4413      	add	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	00da      	lsls	r2, r3, #3
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	4413      	add	r3, r2
 80065bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c6:	2b3e      	cmp	r3, #62	; 0x3e
 80065c8:	d91c      	bls.n	8006604 <USB_EPStartXfer+0x43e>
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <USB_EPStartXfer+0x424>
 80065e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e4:	3b01      	subs	r3, #1
 80065e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	029b      	lsls	r3, r3, #10
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e059      	b.n	80066b8 <USB_EPStartXfer+0x4f2>
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006608:	2b00      	cmp	r3, #0
 800660a:	d112      	bne.n	8006632 <USB_EPStartXfer+0x46c>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006616:	b29a      	uxth	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e042      	b.n	80066b8 <USB_EPStartXfer+0x4f2>
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <USB_EPStartXfer+0x48c>
 8006648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006656:	b29b      	uxth	r3, r3
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	b29a      	uxth	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e02a      	b.n	80066b8 <USB_EPStartXfer+0x4f2>
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d122      	bne.n	80066b8 <USB_EPStartXfer+0x4f2>
 8006672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668c:	b29b      	uxth	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	4413      	add	r3, r2
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	00da      	lsls	r2, r3, #3
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	891b      	ldrh	r3, [r3, #8]
 80066c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6959      	ldr	r1, [r3, #20]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066e6:	6800      	ldr	r0, [r0, #0]
 80066e8:	f001 f9dd 	bl	8007aa6 <USB_WritePMA>
 80066ec:	e3c6      	b.n	8006e7c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d16d      	bne.n	80067da <USB_EPStartXfer+0x614>
 80066fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006718:	b29b      	uxth	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671e:	4413      	add	r3, r2
 8006720:	64bb      	str	r3, [r7, #72]	; 0x48
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	00da      	lsls	r2, r3, #3
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	4413      	add	r3, r2
 8006734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006738:	647b      	str	r3, [r7, #68]	; 0x44
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	2b3e      	cmp	r3, #62	; 0x3e
 8006740:	d91c      	bls.n	800677c <USB_EPStartXfer+0x5b6>
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	f003 031f 	and.w	r3, r3, #31
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <USB_EPStartXfer+0x59c>
 8006758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800675c:	3b01      	subs	r3, #1
 800675e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006766:	b29b      	uxth	r3, r3
 8006768:	029b      	lsls	r3, r3, #10
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e059      	b.n	8006830 <USB_EPStartXfer+0x66a>
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	2b00      	cmp	r3, #0
 8006782:	d112      	bne.n	80067aa <USB_EPStartXfer+0x5e4>
 8006784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678e:	b29a      	uxth	r2, r3
 8006790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e042      	b.n	8006830 <USB_EPStartXfer+0x66a>
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <USB_EPStartXfer+0x604>
 80067c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067c4:	3301      	adds	r3, #1
 80067c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e02a      	b.n	8006830 <USB_EPStartXfer+0x66a>
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d122      	bne.n	8006830 <USB_EPStartXfer+0x66a>
 80067ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	653b      	str	r3, [r7, #80]	; 0x50
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680a:	4413      	add	r3, r2
 800680c:	653b      	str	r3, [r7, #80]	; 0x50
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	00da      	lsls	r2, r3, #3
 800681c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681e:	4413      	add	r3, r2
 8006820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682a:	b29a      	uxth	r2, r3
 800682c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	891b      	ldrh	r3, [r3, #8]
 800683c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6959      	ldr	r1, [r3, #20]
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006850:	b29b      	uxth	r3, r3
 8006852:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006856:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800685a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800685e:	6800      	ldr	r0, [r0, #0]
 8006860:	f001 f921 	bl	8007aa6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006874:	441a      	add	r2, r3
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d90f      	bls.n	80068be <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800689e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ae:	1ad2      	subs	r2, r2, r3
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	621a      	str	r2, [r3, #32]
 80068bc:	e00e      	b.n	80068dc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80068be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2200      	movs	r2, #0
 80068da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	643b      	str	r3, [r7, #64]	; 0x40
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d16d      	bne.n	80069d4 <USB_EPStartXfer+0x80e>
 80068f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	63bb      	str	r3, [r7, #56]	; 0x38
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006912:	b29b      	uxth	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	4413      	add	r3, r2
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	00da      	lsls	r2, r3, #3
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	4413      	add	r3, r2
 800692e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006938:	2b3e      	cmp	r3, #62	; 0x3e
 800693a:	d91c      	bls.n	8006976 <USB_EPStartXfer+0x7b0>
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <USB_EPStartXfer+0x796>
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006956:	3b01      	subs	r3, #1
 8006958:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	b29b      	uxth	r3, r3
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	b29b      	uxth	r3, r3
 8006966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696e:	b29a      	uxth	r2, r3
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	e053      	b.n	8006a1e <USB_EPStartXfer+0x858>
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	2b00      	cmp	r3, #0
 800697c:	d112      	bne.n	80069a4 <USB_EPStartXfer+0x7de>
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006988:	b29a      	uxth	r2, r3
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699c:	b29a      	uxth	r2, r3
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	e03c      	b.n	8006a1e <USB_EPStartXfer+0x858>
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <USB_EPStartXfer+0x7fe>
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069be:	3301      	adds	r3, #1
 80069c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	029b      	lsls	r3, r3, #10
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e024      	b.n	8006a1e <USB_EPStartXfer+0x858>
 80069d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d11c      	bne.n	8006a1e <USB_EPStartXfer+0x858>
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f8:	4413      	add	r3, r2
 80069fa:	643b      	str	r3, [r7, #64]	; 0x40
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	00da      	lsls	r2, r3, #3
 8006a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	895b      	ldrh	r3, [r3, #10]
 8006a2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6959      	ldr	r1, [r3, #20]
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f001 f82a 	bl	8007aa6 <USB_WritePMA>
 8006a52:	e213      	b.n	8006e7c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae0:	4413      	add	r3, r2
 8006ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af4:	4413      	add	r3, r2
 8006af6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	891b      	ldrh	r3, [r3, #8]
 8006b12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6959      	ldr	r1, [r3, #20]
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b34:	6800      	ldr	r0, [r0, #0]
 8006b36:	f000 ffb6 	bl	8007aa6 <USB_WritePMA>
 8006b3a:	e19f      	b.n	8006e7c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4c:	1ad2      	subs	r2, r2, r3
 8006b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80bc 	beq.w	8006cfa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d16d      	bne.n	8006c7a <USB_EPStartXfer+0xab4>
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bbe:	4413      	add	r3, r2
 8006bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	00da      	lsls	r2, r3, #3
 8006bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	2b3e      	cmp	r3, #62	; 0x3e
 8006be0:	d91c      	bls.n	8006c1c <USB_EPStartXfer+0xa56>
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <USB_EPStartXfer+0xa3c>
 8006bf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	e053      	b.n	8006cc4 <USB_EPStartXfer+0xafe>
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d112      	bne.n	8006c4a <USB_EPStartXfer+0xa84>
 8006c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e03c      	b.n	8006cc4 <USB_EPStartXfer+0xafe>
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <USB_EPStartXfer+0xaa4>
 8006c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c76:	801a      	strh	r2, [r3, #0]
 8006c78:	e024      	b.n	8006cc4 <USB_EPStartXfer+0xafe>
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d11c      	bne.n	8006cc4 <USB_EPStartXfer+0xafe>
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c9e:	4413      	add	r3, r2
 8006ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	00da      	lsls	r2, r3, #3
 8006cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	895b      	ldrh	r3, [r3, #10]
 8006cd0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6959      	ldr	r1, [r3, #20]
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	f000 fed7 	bl	8007aa6 <USB_WritePMA>
 8006cf8:	e0c0      	b.n	8006e7c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d16d      	bne.n	8006de6 <USB_EPStartXfer+0xc20>
 8006d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d2a:	4413      	add	r3, r2
 8006d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	00da      	lsls	r2, r3, #3
 8006d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d3e:	4413      	add	r3, r2
 8006d40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4c:	d91c      	bls.n	8006d88 <USB_EPStartXfer+0xbc2>
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <USB_EPStartXfer+0xba8>
 8006d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	029b      	lsls	r3, r3, #10
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e05f      	b.n	8006e48 <USB_EPStartXfer+0xc82>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d112      	bne.n	8006db6 <USB_EPStartXfer+0xbf0>
 8006d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	e048      	b.n	8006e48 <USB_EPStartXfer+0xc82>
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <USB_EPStartXfer+0xc10>
 8006dcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	029b      	lsls	r3, r3, #10
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e030      	b.n	8006e48 <USB_EPStartXfer+0xc82>
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d128      	bne.n	8006e48 <USB_EPStartXfer+0xc82>
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	00da      	lsls	r2, r3, #3
 8006e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	891b      	ldrh	r3, [r3, #8]
 8006e54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6959      	ldr	r1, [r3, #20]
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e76:	6800      	ldr	r0, [r0, #0]
 8006e78:	f000 fe15 	bl	8007aa6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea2:	817b      	strh	r3, [r7, #10]
 8006ea4:	897b      	ldrh	r3, [r7, #10]
 8006ea6:	f083 0310 	eor.w	r3, r3, #16
 8006eaa:	817b      	strh	r3, [r7, #10]
 8006eac:	897b      	ldrh	r3, [r7, #10]
 8006eae:	f083 0320 	eor.w	r3, r3, #32
 8006eb2:	817b      	strh	r3, [r7, #10]
 8006eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	8013      	strh	r3, [r2, #0]
 8006ee4:	f000 bc9f 	b.w	8007826 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	7b1b      	ldrb	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 80ae 	bne.w	8007056 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d917      	bls.n	8006f46 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	619a      	str	r2, [r3, #24]
 8006f44:	e00e      	b.n	8006f64 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2200      	movs	r2, #0
 8006f62:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	00da      	lsls	r2, r3, #3
 8006f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fae:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb0:	d91d      	bls.n	8006fee <USB_EPStartXfer+0xe28>
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0xe0c>
 8006fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	e3e1      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d116      	bne.n	8007024 <USB_EPStartXfer+0xe5e>
 8006ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e3c6      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USB_EPStartXfer+0xe7e>
 800703a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800703e:	3301      	adds	r3, #1
 8007040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007048:	b29b      	uxth	r3, r3
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	b29a      	uxth	r2, r3
 800704e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e3ad      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	78db      	ldrb	r3, [r3, #3]
 8007062:	2b02      	cmp	r3, #2
 8007064:	f040 8200 	bne.w	8007468 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 8091 	bne.w	800719c <USB_EPStartXfer+0xfd6>
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007096:	b29b      	uxth	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800709e:	4413      	add	r3, r2
 80070a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00da      	lsls	r2, r3, #3
 80070b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070b6:	4413      	add	r3, r2
 80070b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b3e      	cmp	r3, #62	; 0x3e
 80070ce:	d925      	bls.n	800711c <USB_EPStartXfer+0xf56>
 80070d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <USB_EPStartXfer+0xf3a>
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	3b01      	subs	r3, #1
 80070fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007104:	b29b      	uxth	r3, r3
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e074      	b.n	8007206 <USB_EPStartXfer+0x1040>
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d116      	bne.n	800715a <USB_EPStartXfer+0xf94>
 800712c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007138:	b29a      	uxth	r2, r3
 800713a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007150:	b29a      	uxth	r2, r3
 8007152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007156:	801a      	strh	r2, [r3, #0]
 8007158:	e055      	b.n	8007206 <USB_EPStartXfer+0x1040>
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <USB_EPStartXfer+0xfc4>
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007184:	3301      	adds	r3, #1
 8007186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800718a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29a      	uxth	r2, r3
 8007194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e034      	b.n	8007206 <USB_EPStartXfer+0x1040>
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	785b      	ldrb	r3, [r3, #1]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d12c      	bne.n	8007206 <USB_EPStartXfer+0x1040>
 80071ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071d0:	4413      	add	r3, r2
 80071d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	00da      	lsls	r2, r3, #3
 80071e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 8091 	bne.w	8007348 <USB_EPStartXfer+0x1182>
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800724a:	4413      	add	r3, r2
 800724c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00da      	lsls	r2, r3, #3
 800725e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007262:	4413      	add	r3, r2
 8007264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800726c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b3e      	cmp	r3, #62	; 0x3e
 800727a:	d925      	bls.n	80072c8 <USB_EPStartXfer+0x1102>
 800727c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 031f 	and.w	r3, r3, #31
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <USB_EPStartXfer+0x10e6>
 80072a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a6:	3b01      	subs	r3, #1
 80072a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	029b      	lsls	r3, r3, #10
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e06d      	b.n	80073a4 <USB_EPStartXfer+0x11de>
 80072c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <USB_EPStartXfer+0x1140>
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	e04e      	b.n	80073a4 <USB_EPStartXfer+0x11de>
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	085b      	lsrs	r3, r3, #1
 8007314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <USB_EPStartXfer+0x1170>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	3301      	adds	r3, #1
 8007332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733a:	b29b      	uxth	r3, r3
 800733c:	029b      	lsls	r3, r3, #10
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e02d      	b.n	80073a4 <USB_EPStartXfer+0x11de>
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d125      	bne.n	80073a4 <USB_EPStartXfer+0x11de>
 8007358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800736e:	4413      	add	r3, r2
 8007370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	00da      	lsls	r2, r3, #3
 8007382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007386:	4413      	add	r3, r2
 8007388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800738c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 81fe 	beq.w	80077b2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <USB_EPStartXfer+0x1228>
 80073e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f040 81db 	bne.w	80077b2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	f040 81d4 	bne.w	80077b2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]
 8007466:	e1a4      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	78db      	ldrb	r3, [r3, #3]
 8007474:	2b01      	cmp	r3, #1
 8007476:	f040 819a 	bne.w	80077ae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800747a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d917      	bls.n	80074c6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	619a      	str	r2, [r3, #24]
 80074c4:	e00e      	b.n	80074e4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80074c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d178      	bne.n	80075e6 <USB_EPStartXfer+0x1420>
 80074f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007510:	b29b      	uxth	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007518:	4413      	add	r3, r2
 800751a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800751e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	00da      	lsls	r2, r3, #3
 800752c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007530:	4413      	add	r3, r2
 8007532:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	2b3e      	cmp	r3, #62	; 0x3e
 8007540:	d91d      	bls.n	800757e <USB_EPStartXfer+0x13b8>
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <USB_EPStartXfer+0x139c>
 8007558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755c:	3b01      	subs	r3, #1
 800755e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007566:	b29b      	uxth	r3, r3
 8007568:	029b      	lsls	r3, r3, #10
 800756a:	b29b      	uxth	r3, r3
 800756c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007574:	b29a      	uxth	r2, r3
 8007576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e064      	b.n	8007648 <USB_EPStartXfer+0x1482>
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007582:	2b00      	cmp	r3, #0
 8007584:	d116      	bne.n	80075b4 <USB_EPStartXfer+0x13ee>
 8007586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007592:	b29a      	uxth	r2, r3
 8007594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e049      	b.n	8007648 <USB_EPStartXfer+0x1482>
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b8:	085b      	lsrs	r3, r3, #1
 80075ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <USB_EPStartXfer+0x140e>
 80075ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ce:	3301      	adds	r3, #1
 80075d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d8:	b29b      	uxth	r3, r3
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e030      	b.n	8007648 <USB_EPStartXfer+0x1482>
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d128      	bne.n	8007648 <USB_EPStartXfer+0x1482>
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800761a:	4413      	add	r3, r2
 800761c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	00da      	lsls	r2, r3, #3
 800762e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007632:	4413      	add	r3, r2
 8007634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007640:	b29a      	uxth	r2, r3
 8007642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d178      	bne.n	8007758 <USB_EPStartXfer+0x1592>
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800768a:	4413      	add	r3, r2
 800768c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00da      	lsls	r2, r3, #3
 800769e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b0:	2b3e      	cmp	r3, #62	; 0x3e
 80076b2:	d91d      	bls.n	80076f0 <USB_EPStartXfer+0x152a>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x150e>
 80076ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e060      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d116      	bne.n	8007726 <USB_EPStartXfer+0x1560>
 80076f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771c:	b29a      	uxth	r2, r3
 800771e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007722:	801a      	strh	r2, [r3, #0]
 8007724:	e045      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <USB_EPStartXfer+0x1580>
 800773c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007740:	3301      	adds	r3, #1
 8007742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800774a:	b29b      	uxth	r3, r3
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	e02c      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d124      	bne.n	80077b2 <USB_EPStartXfer+0x15ec>
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007776:	b29b      	uxth	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800777e:	4413      	add	r3, r2
 8007780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	00da      	lsls	r2, r3, #3
 8007792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007796:	4413      	add	r3, r2
 8007798:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800779c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e001      	b.n	80077b2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e03a      	b.n	8007828 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	441a      	add	r2, r3
 800780e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	b29b      	uxth	r3, r3
 8007824:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d020      	beq.n	8007886 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785a:	81bb      	strh	r3, [r7, #12]
 800785c:	89bb      	ldrh	r3, [r7, #12]
 800785e:	f083 0310 	eor.w	r3, r3, #16
 8007862:	81bb      	strh	r3, [r7, #12]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	441a      	add	r2, r3
 800786e:	89bb      	ldrh	r3, [r7, #12]
 8007870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007880:	b29b      	uxth	r3, r3
 8007882:	8013      	strh	r3, [r2, #0]
 8007884:	e01f      	b.n	80078c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789c:	81fb      	strh	r3, [r7, #14]
 800789e:	89fb      	ldrh	r3, [r7, #14]
 80078a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078a4:	81fb      	strh	r3, [r7, #14]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	441a      	add	r2, r3
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	7b1b      	ldrb	r3, [r3, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 809d 	bne.w	8007a22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d04c      	beq.n	800798a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	823b      	strh	r3, [r7, #16]
 80078fe:	8a3b      	ldrh	r3, [r7, #16]
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01b      	beq.n	8007940 <USB_EPClearStall+0x6c>
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791e:	81fb      	strh	r3, [r7, #14]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	441a      	add	r2, r3
 800792a:	89fb      	ldrh	r3, [r7, #14]
 800792c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800793c:	b29b      	uxth	r3, r3
 800793e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	78db      	ldrb	r3, [r3, #3]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d06c      	beq.n	8007a22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795e:	81bb      	strh	r3, [r7, #12]
 8007960:	89bb      	ldrh	r3, [r7, #12]
 8007962:	f083 0320 	eor.w	r3, r3, #32
 8007966:	81bb      	strh	r3, [r7, #12]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	89bb      	ldrh	r3, [r7, #12]
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]
 8007988:	e04b      	b.n	8007a22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	82fb      	strh	r3, [r7, #22]
 8007998:	8afb      	ldrh	r3, [r7, #22]
 800799a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <USB_EPClearStall+0x106>
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	82bb      	strh	r3, [r7, #20]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	441a      	add	r2, r3
 80079c4:	8abb      	ldrh	r3, [r7, #20]
 80079c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f0:	827b      	strh	r3, [r7, #18]
 80079f2:	8a7b      	ldrh	r3, [r7, #18]
 80079f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079f8:	827b      	strh	r3, [r7, #18]
 80079fa:	8a7b      	ldrh	r3, [r7, #18]
 80079fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a00:	827b      	strh	r3, [r7, #18]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	8a7b      	ldrh	r3, [r7, #18]
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2280      	movs	r2, #128	; 0x80
 8007a46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a98:	68fb      	ldr	r3, [r7, #12]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b08d      	sub	sp, #52	; 0x34
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	80fb      	strh	r3, [r7, #6]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007abc:	88bb      	ldrh	r3, [r7, #4]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	085b      	lsrs	r3, r3, #1
 8007ac2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007acc:	88fa      	ldrh	r2, [r7, #6]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007adc:	e01b      	b.n	8007b16 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	3302      	adds	r3, #2
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	3b01      	subs	r3, #1
 8007b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e0      	bne.n	8007ade <USB_WritePMA+0x38>
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	3734      	adds	r7, #52	; 0x34
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b08b      	sub	sp, #44	; 0x2c
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	4611      	mov	r1, r2
 8007b36:	461a      	mov	r2, r3
 8007b38:	460b      	mov	r3, r1
 8007b3a:	80fb      	strh	r3, [r7, #6]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b40:	88bb      	ldrh	r3, [r7, #4]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b50:	88fa      	ldrh	r2, [r7, #6]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b5a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b60:	e018      	b.n	8007b94 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	0a1b      	lsrs	r3, r3, #8
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	3b01      	subs	r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e3      	bne.n	8007b62 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b9a:	88bb      	ldrh	r3, [r7, #4]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	701a      	strb	r2, [r3, #0]
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	372c      	adds	r7, #44	; 0x2c
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bd2:	f002 f901 	bl	8009dd8 <USBD_static_malloc>
 8007bd6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d105      	bne.n	8007bea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007be6:	2302      	movs	r3, #2
 8007be8:	e066      	b.n	8007cb8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7c1b      	ldrb	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d119      	bne.n	8007c2e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bfe:	2202      	movs	r2, #2
 8007c00:	2181      	movs	r1, #129	; 0x81
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 ff8d 	bl	8009b22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c12:	2202      	movs	r2, #2
 8007c14:	2101      	movs	r1, #1
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 ff83 	bl	8009b22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2210      	movs	r2, #16
 8007c28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c2c:	e016      	b.n	8007c5c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c2e:	2340      	movs	r3, #64	; 0x40
 8007c30:	2202      	movs	r2, #2
 8007c32:	2181      	movs	r1, #129	; 0x81
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 ff74 	bl	8009b22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	2202      	movs	r2, #2
 8007c44:	2101      	movs	r1, #1
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 ff6b 	bl	8009b22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2210      	movs	r2, #16
 8007c58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	2203      	movs	r2, #3
 8007c60:	2182      	movs	r1, #130	; 0x82
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 ff5d 	bl	8009b22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	7c1b      	ldrb	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f002 f82f 	bl	8009d02 <USBD_LL_PrepareReceive>
 8007ca4:	e007      	b.n	8007cb6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	2101      	movs	r1, #1
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 f826 	bl	8009d02 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ccc:	2181      	movs	r1, #129	; 0x81
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 ff4d 	bl	8009b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cda:	2101      	movs	r1, #1
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 ff46 	bl	8009b6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007cea:	2182      	movs	r1, #130	; 0x82
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 ff3e 	bl	8009b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00e      	beq.n	8007d2a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f002 f869 	bl	8009df4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e0af      	b.n	8007ebc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d03f      	beq.n	8007de8 <USBD_CDC_Setup+0xb4>
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	f040 809f 	bne.w	8007eac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88db      	ldrh	r3, [r3, #6]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d02e      	beq.n	8007dd4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da16      	bge.n	8007dae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007d8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	88d2      	ldrh	r2, [r2, #6]
 8007d92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	88db      	ldrh	r3, [r3, #6]
 8007d98:	2b07      	cmp	r3, #7
 8007d9a:	bf28      	it	cs
 8007d9c:	2307      	movcs	r3, #7
 8007d9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	89fa      	ldrh	r2, [r7, #14]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 facf 	bl	800934a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007dac:	e085      	b.n	8007eba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	785a      	ldrb	r2, [r3, #1]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	88db      	ldrh	r3, [r3, #6]
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dc4:	6939      	ldr	r1, [r7, #16]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88db      	ldrh	r3, [r3, #6]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fae8 	bl	80093a2 <USBD_CtlPrepareRx>
      break;
 8007dd2:	e072      	b.n	8007eba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	7850      	ldrb	r0, [r2, #1]
 8007de0:	2200      	movs	r2, #0
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	4798      	blx	r3
      break;
 8007de6:	e068      	b.n	8007eba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b0b      	cmp	r3, #11
 8007dee:	d852      	bhi.n	8007e96 <USBD_CDC_Setup+0x162>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <USBD_CDC_Setup+0xc4>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e29 	.word	0x08007e29
 8007dfc:	08007ea5 	.word	0x08007ea5
 8007e00:	08007e97 	.word	0x08007e97
 8007e04:	08007e97 	.word	0x08007e97
 8007e08:	08007e97 	.word	0x08007e97
 8007e0c:	08007e97 	.word	0x08007e97
 8007e10:	08007e97 	.word	0x08007e97
 8007e14:	08007e97 	.word	0x08007e97
 8007e18:	08007e97 	.word	0x08007e97
 8007e1c:	08007e97 	.word	0x08007e97
 8007e20:	08007e53 	.word	0x08007e53
 8007e24:	08007e7d 	.word	0x08007e7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d107      	bne.n	8007e44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e34:	f107 030a 	add.w	r3, r7, #10
 8007e38:	2202      	movs	r2, #2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fa84 	bl	800934a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e42:	e032      	b.n	8007eaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fa0e 	bl	8009268 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e50:	e02b      	b.n	8007eaa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d107      	bne.n	8007e6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e5e:	f107 030d 	add.w	r3, r7, #13
 8007e62:	2201      	movs	r2, #1
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fa6f 	bl	800934a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e6c:	e01d      	b.n	8007eaa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f9f9 	bl	8009268 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7a:	e016      	b.n	8007eaa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d00f      	beq.n	8007ea8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f9ec 	bl	8009268 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e94:	e008      	b.n	8007ea8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f9e5 	bl	8009268 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea2:	e002      	b.n	8007eaa <USBD_CDC_Setup+0x176>
          break;
 8007ea4:	bf00      	nop
 8007ea6:	e008      	b.n	8007eba <USBD_CDC_Setup+0x186>
          break;
 8007ea8:	bf00      	nop
      }
      break;
 8007eaa:	e006      	b.n	8007eba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f9da 	bl	8009268 <USBD_CtlError>
      ret = USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ed6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e04f      	b.n	8007f86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	440b      	add	r3, r1
 8007efc:	3318      	adds	r3, #24
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d029      	beq.n	8007f58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	3318      	adds	r3, #24
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	78f9      	ldrb	r1, [r7, #3]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	4403      	add	r3, r0
 8007f24:	3338      	adds	r3, #56	; 0x38
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d110      	bne.n	8007f58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	3318      	adds	r3, #24
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f4a:	78f9      	ldrb	r1, [r7, #3]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 feb5 	bl	8009cc0 <USBD_LL_Transmit>
 8007f56:	e015      	b.n	8007f84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e015      	b.n	8007fdc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fec5 	bl	8009d44 <USBD_LL_GetRxDataSize>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e01b      	b.n	8008036 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d015      	beq.n	8008034 <USBD_CDC_EP0_RxReady+0x50>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800800e:	2bff      	cmp	r3, #255	; 0xff
 8008010:	d010      	beq.n	8008034 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008020:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008028:	b292      	uxth	r2, r2
 800802a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	22ff      	movs	r2, #255	; 0xff
 8008030:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2243      	movs	r2, #67	; 0x43
 800804c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800804e:	4b03      	ldr	r3, [pc, #12]	; (800805c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20000094 	.word	0x20000094

08008060 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2243      	movs	r2, #67	; 0x43
 800806c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000050 	.word	0x20000050

08008080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2243      	movs	r2, #67	; 0x43
 800808c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800808e:	4b03      	ldr	r3, [pc, #12]	; (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200000d8 	.word	0x200000d8

080080a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220a      	movs	r2, #10
 80080ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	; (80080bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000000c 	.word	0x2000000c

080080c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e004      	b.n	80080de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	e008      	b.n	800811a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008136:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800813e:	2303      	movs	r3, #3
 8008140:	e004      	b.n	800814c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008166:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	e01a      	b.n	80081b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008180:	2b00      	cmp	r3, #0
 8008182:	d114      	bne.n	80081ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2201      	movs	r2, #1
 8008188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081a2:	2181      	movs	r1, #129	; 0x81
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 fd8b 	bl	8009cc0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e016      	b.n	8008204 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7c1b      	ldrb	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081e8:	2101      	movs	r1, #1
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fd89 	bl	8009d02 <USBD_LL_PrepareReceive>
 80081f0:	e007      	b.n	8008202 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	2101      	movs	r1, #1
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fd80 	bl	8009d02 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e01f      	b.n	8008264 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	79fa      	ldrb	r2, [r7, #7]
 8008256:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f001 fbe7 	bl	8009a2c <USBD_LL_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	e016      	b.n	80082b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	f107 020e 	add.w	r2, r7, #14
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	4602      	mov	r2, r0
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 fc12 	bl	8009aec <USBD_LL_Start>
 80082c8:	4603      	mov	r3, r0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	4611      	mov	r1, r2
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	4611      	mov	r1, r2
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
  }

  return USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 ff46 	bl	80091f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008384:	f003 031f 	and.w	r3, r3, #31
 8008388:	2b02      	cmp	r3, #2
 800838a:	d01a      	beq.n	80083c2 <USBD_LL_SetupStage+0x72>
 800838c:	2b02      	cmp	r3, #2
 800838e:	d822      	bhi.n	80083d6 <USBD_LL_SetupStage+0x86>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <USBD_LL_SetupStage+0x4a>
 8008394:	2b01      	cmp	r3, #1
 8008396:	d00a      	beq.n	80083ae <USBD_LL_SetupStage+0x5e>
 8008398:	e01d      	b.n	80083d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9ee 	bl	8008784 <USBD_StdDevReq>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
      break;
 80083ac:	e020      	b.n	80083f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa52 	bl	8008860 <USBD_StdItfReq>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
      break;
 80083c0:	e016      	b.n	80083f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa91 	bl	80088f2 <USBD_StdEPReq>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	e00c      	b.n	80083f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fbe1 	bl	8009bac <USBD_LL_StallEP>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]
      break;
 80083ee:	bf00      	nop
  }

  return ret;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	460b      	mov	r3, r1
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d138      	bne.n	8008480 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008414:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800841c:	2b03      	cmp	r3, #3
 800841e:	d14a      	bne.n	80084b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	429a      	cmp	r2, r3
 800842a:	d913      	bls.n	8008454 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	1ad2      	subs	r2, r2, r3
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	4293      	cmp	r3, r2
 8008444:	bf28      	it	cs
 8008446:	4613      	movcs	r3, r2
 8008448:	461a      	mov	r2, r3
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 ffc5 	bl	80093dc <USBD_CtlContinueRx>
 8008452:	e030      	b.n	80084b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b03      	cmp	r3, #3
 800845e:	d10b      	bne.n	8008478 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 ffc0 	bl	80093fe <USBD_CtlSendStatus>
 800847e:	e01a      	b.n	80084b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b03      	cmp	r3, #3
 800848a:	d114      	bne.n	80084b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00e      	beq.n	80084b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	7afa      	ldrb	r2, [r7, #11]
 80084a2:	4611      	mov	r1, r2
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	e000      	b.n	80084b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	460b      	mov	r3, r1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d16b      	bne.n	80085ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3314      	adds	r3, #20
 80084d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d156      	bne.n	8008592 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d914      	bls.n	800851a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	1ad2      	subs	r2, r2, r3
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	461a      	mov	r2, r3
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 ff3a 	bl	8009380 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f001 fbf5 	bl	8009d02 <USBD_LL_PrepareReceive>
 8008518:	e03b      	b.n	8008592 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	429a      	cmp	r2, r3
 8008524:	d11c      	bne.n	8008560 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800852e:	429a      	cmp	r2, r3
 8008530:	d316      	bcc.n	8008560 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800853c:	429a      	cmp	r2, r3
 800853e:	d20f      	bcs.n	8008560 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008540:	2200      	movs	r2, #0
 8008542:	2100      	movs	r1, #0
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 ff1b 	bl	8009380 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008552:	2300      	movs	r3, #0
 8008554:	2200      	movs	r2, #0
 8008556:	2100      	movs	r1, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 fbd2 	bl	8009d02 <USBD_LL_PrepareReceive>
 800855e:	e018      	b.n	8008592 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b03      	cmp	r3, #3
 800856a:	d10b      	bne.n	8008584 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008584:	2180      	movs	r1, #128	; 0x80
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f001 fb10 	bl	8009bac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 ff49 	bl	8009424 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008598:	2b01      	cmp	r3, #1
 800859a:	d122      	bne.n	80085e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f7ff fe98 	bl	80082d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085aa:	e01a      	b.n	80085e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d114      	bne.n	80085e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	7afa      	ldrb	r2, [r7, #11]
 80085ce:	4611      	mov	r1, r2
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	4798      	blx	r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	e000      	b.n	80085e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	e02f      	b.n	8008680 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00f      	beq.n	800864a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d009      	beq.n	800864a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6852      	ldr	r2, [r2, #4]
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	4611      	mov	r1, r2
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	2200      	movs	r2, #0
 800864e:	2100      	movs	r1, #0
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fa66 	bl	8009b22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2240      	movs	r2, #64	; 0x40
 8008662:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008666:	2340      	movs	r3, #64	; 0x40
 8008668:	2200      	movs	r2, #0
 800866a:	2180      	movs	r1, #128	; 0x80
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fa58 	bl	8009b22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2240      	movs	r2, #64	; 0x40
 800867c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2204      	movs	r2, #4
 80086c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d106      	bne.n	80086f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008716:	2303      	movs	r3, #3
 8008718:	e012      	b.n	8008740 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b03      	cmp	r3, #3
 8008724:	d10b      	bne.n	800873e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	3301      	adds	r3, #1
 800875e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008766:	8a3b      	ldrh	r3, [r7, #16]
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	b21a      	sxth	r2, r3
 800876c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008770:	4313      	orrs	r3, r2
 8008772:	b21b      	sxth	r3, r3
 8008774:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008776:	89fb      	ldrh	r3, [r7, #14]
}
 8008778:	4618      	mov	r0, r3
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800879a:	2b40      	cmp	r3, #64	; 0x40
 800879c:	d005      	beq.n	80087aa <USBD_StdDevReq+0x26>
 800879e:	2b40      	cmp	r3, #64	; 0x40
 80087a0:	d853      	bhi.n	800884a <USBD_StdDevReq+0xc6>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <USBD_StdDevReq+0x3a>
 80087a6:	2b20      	cmp	r3, #32
 80087a8:	d14f      	bne.n	800884a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]
      break;
 80087bc:	e04a      	b.n	8008854 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	2b09      	cmp	r3, #9
 80087c4:	d83b      	bhi.n	800883e <USBD_StdDevReq+0xba>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <USBD_StdDevReq+0x48>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	08008821 	.word	0x08008821
 80087d0:	08008835 	.word	0x08008835
 80087d4:	0800883f 	.word	0x0800883f
 80087d8:	0800882b 	.word	0x0800882b
 80087dc:	0800883f 	.word	0x0800883f
 80087e0:	080087ff 	.word	0x080087ff
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	0800883f 	.word	0x0800883f
 80087ec:	08008817 	.word	0x08008817
 80087f0:	08008809 	.word	0x08008809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9de 	bl	8008bb8 <USBD_GetDescriptor>
          break;
 80087fc:	e024      	b.n	8008848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb6d 	bl	8008ee0 <USBD_SetAddress>
          break;
 8008806:	e01f      	b.n	8008848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fbac 	bl	8008f68 <USBD_SetConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
          break;
 8008814:	e018      	b.n	8008848 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fc4b 	bl	80090b4 <USBD_GetConfig>
          break;
 800881e:	e013      	b.n	8008848 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fc7c 	bl	8009120 <USBD_GetStatus>
          break;
 8008828:	e00e      	b.n	8008848 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fcab 	bl	8009188 <USBD_SetFeature>
          break;
 8008832:	e009      	b.n	8008848 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fcba 	bl	80091b0 <USBD_ClrFeature>
          break;
 800883c:	e004      	b.n	8008848 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fd11 	bl	8009268 <USBD_CtlError>
          break;
 8008846:	bf00      	nop
      }
      break;
 8008848:	e004      	b.n	8008854 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fd0b 	bl	8009268 <USBD_CtlError>
      break;
 8008852:	bf00      	nop
  }

  return ret;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop

08008860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d005      	beq.n	8008886 <USBD_StdItfReq+0x26>
 800887a:	2b40      	cmp	r3, #64	; 0x40
 800887c:	d82f      	bhi.n	80088de <USBD_StdItfReq+0x7e>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <USBD_StdItfReq+0x26>
 8008882:	2b20      	cmp	r3, #32
 8008884:	d12b      	bne.n	80088de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	3b01      	subs	r3, #1
 8008890:	2b02      	cmp	r3, #2
 8008892:	d81d      	bhi.n	80088d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	889b      	ldrh	r3, [r3, #4]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	d813      	bhi.n	80088c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	4798      	blx	r3
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	88db      	ldrh	r3, [r3, #6]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d110      	bne.n	80088da <USBD_StdItfReq+0x7a>
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10d      	bne.n	80088da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fd9d 	bl	80093fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088c4:	e009      	b.n	80088da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fccd 	bl	8009268 <USBD_CtlError>
          break;
 80088ce:	e004      	b.n	80088da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fcc8 	bl	8009268 <USBD_CtlError>
          break;
 80088d8:	e000      	b.n	80088dc <USBD_StdItfReq+0x7c>
          break;
 80088da:	bf00      	nop
      }
      break;
 80088dc:	e004      	b.n	80088e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fcc1 	bl	8009268 <USBD_CtlError>
      break;
 80088e6:	bf00      	nop
  }

  return ret;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	889b      	ldrh	r3, [r3, #4]
 8008904:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d007      	beq.n	8008922 <USBD_StdEPReq+0x30>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	f200 8145 	bhi.w	8008ba2 <USBD_StdEPReq+0x2b0>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00c      	beq.n	8008936 <USBD_StdEPReq+0x44>
 800891c:	2b20      	cmp	r3, #32
 800891e:	f040 8140 	bne.w	8008ba2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	4798      	blx	r3
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
      break;
 8008934:	e13a      	b.n	8008bac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	2b03      	cmp	r3, #3
 800893c:	d007      	beq.n	800894e <USBD_StdEPReq+0x5c>
 800893e:	2b03      	cmp	r3, #3
 8008940:	f300 8129 	bgt.w	8008b96 <USBD_StdEPReq+0x2a4>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d07f      	beq.n	8008a48 <USBD_StdEPReq+0x156>
 8008948:	2b01      	cmp	r3, #1
 800894a:	d03c      	beq.n	80089c6 <USBD_StdEPReq+0xd4>
 800894c:	e123      	b.n	8008b96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USBD_StdEPReq+0x6e>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d016      	beq.n	800898c <USBD_StdEPReq+0x9a>
 800895e:	e02c      	b.n	80089ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00d      	beq.n	8008982 <USBD_StdEPReq+0x90>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d00a      	beq.n	8008982 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f91b 	bl	8009bac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f917 	bl	8009bac <USBD_LL_StallEP>
 800897e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008980:	e020      	b.n	80089c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fc6f 	bl	8009268 <USBD_CtlError>
              break;
 800898a:	e01b      	b.n	80089c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	885b      	ldrh	r3, [r3, #2]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10e      	bne.n	80089b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <USBD_StdEPReq+0xc0>
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d008      	beq.n	80089b2 <USBD_StdEPReq+0xc0>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	88db      	ldrh	r3, [r3, #6]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d104      	bne.n	80089b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 f8fd 	bl	8009bac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fd23 	bl	80093fe <USBD_CtlSendStatus>

              break;
 80089b8:	e004      	b.n	80089c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc53 	bl	8009268 <USBD_CtlError>
              break;
 80089c2:	bf00      	nop
          }
          break;
 80089c4:	e0ec      	b.n	8008ba0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d002      	beq.n	80089d8 <USBD_StdEPReq+0xe6>
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d016      	beq.n	8008a04 <USBD_StdEPReq+0x112>
 80089d6:	e030      	b.n	8008a3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00d      	beq.n	80089fa <USBD_StdEPReq+0x108>
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b80      	cmp	r3, #128	; 0x80
 80089e2:	d00a      	beq.n	80089fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f001 f8df 	bl	8009bac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ee:	2180      	movs	r1, #128	; 0x80
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f8db 	bl	8009bac <USBD_LL_StallEP>
 80089f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089f8:	e025      	b.n	8008a46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc33 	bl	8009268 <USBD_CtlError>
              break;
 8008a02:	e020      	b.n	8008a46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	885b      	ldrh	r3, [r3, #2]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11b      	bne.n	8008a44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 f8e5 	bl	8009bea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fcec 	bl	80093fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	4798      	blx	r3
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008a38:	e004      	b.n	8008a44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fc13 	bl	8009268 <USBD_CtlError>
              break;
 8008a42:	e000      	b.n	8008a46 <USBD_StdEPReq+0x154>
              break;
 8008a44:	bf00      	nop
          }
          break;
 8008a46:	e0ab      	b.n	8008ba0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d002      	beq.n	8008a5a <USBD_StdEPReq+0x168>
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d032      	beq.n	8008abe <USBD_StdEPReq+0x1cc>
 8008a58:	e097      	b.n	8008b8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d007      	beq.n	8008a70 <USBD_StdEPReq+0x17e>
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b80      	cmp	r3, #128	; 0x80
 8008a64:	d004      	beq.n	8008a70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fbfd 	bl	8009268 <USBD_CtlError>
                break;
 8008a6e:	e091      	b.n	8008b94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	da0b      	bge.n	8008a90 <USBD_StdEPReq+0x19e>
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	3310      	adds	r3, #16
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	e00b      	b.n	8008aa8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fc47 	bl	800934a <USBD_CtlSendData>
              break;
 8008abc:	e06a      	b.n	8008b94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	da11      	bge.n	8008aea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3324      	adds	r3, #36	; 0x24
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d117      	bne.n	8008b10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fbc0 	bl	8009268 <USBD_CtlError>
                  break;
 8008ae8:	e054      	b.n	8008b94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	f003 020f 	and.w	r2, r3, #15
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	440b      	add	r3, r1
 8008afc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fbad 	bl	8009268 <USBD_CtlError>
                  break;
 8008b0e:	e041      	b.n	8008b94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	da0b      	bge.n	8008b30 <USBD_StdEPReq+0x23e>
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	3310      	adds	r3, #16
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	e00b      	b.n	8008b48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	4413      	add	r3, r2
 8008b46:	3304      	adds	r3, #4
 8008b48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <USBD_StdEPReq+0x264>
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b80      	cmp	r3, #128	; 0x80
 8008b54:	d103      	bne.n	8008b5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e00e      	b.n	8008b7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 f860 	bl	8009c28 <USBD_LL_IsStallEP>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2201      	movs	r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e002      	b.n	8008b7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fbe1 	bl	800934a <USBD_CtlSendData>
              break;
 8008b88:	e004      	b.n	8008b94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fb6b 	bl	8009268 <USBD_CtlError>
              break;
 8008b92:	bf00      	nop
          }
          break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fb65 	bl	8009268 <USBD_CtlError>
          break;
 8008b9e:	bf00      	nop
      }
      break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fb5f 	bl	8009268 <USBD_CtlError>
      break;
 8008baa:	bf00      	nop
  }

  return ret;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	2b0e      	cmp	r3, #14
 8008bda:	f200 8152 	bhi.w	8008e82 <USBD_GetDescriptor+0x2ca>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <USBD_GetDescriptor+0x2c>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008c55 	.word	0x08008c55
 8008be8:	08008c6d 	.word	0x08008c6d
 8008bec:	08008cad 	.word	0x08008cad
 8008bf0:	08008e83 	.word	0x08008e83
 8008bf4:	08008e83 	.word	0x08008e83
 8008bf8:	08008e23 	.word	0x08008e23
 8008bfc:	08008e4f 	.word	0x08008e4f
 8008c00:	08008e83 	.word	0x08008e83
 8008c04:	08008e83 	.word	0x08008e83
 8008c08:	08008e83 	.word	0x08008e83
 8008c0c:	08008e83 	.word	0x08008e83
 8008c10:	08008e83 	.word	0x08008e83
 8008c14:	08008e83 	.word	0x08008e83
 8008c18:	08008e83 	.word	0x08008e83
 8008c1c:	08008c21 	.word	0x08008c21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c42:	e126      	b.n	8008e92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fb0e 	bl	8009268 <USBD_CtlError>
        err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
      break;
 8008c52:	e11e      	b.n	8008e92 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
      break;
 8008c6a:	e112      	b.n	8008e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	7c1b      	ldrb	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10d      	bne.n	8008c90 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7c:	f107 0208 	add.w	r2, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c8e:	e100      	b.n	8008e92 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	f107 0208 	add.w	r2, r7, #8
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
 8008ca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	701a      	strb	r2, [r3, #0]
      break;
 8008caa:	e0f2      	b.n	8008e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	885b      	ldrh	r3, [r3, #2]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	f200 80ac 	bhi.w	8008e10 <USBD_GetDescriptor+0x258>
 8008cb8:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <USBD_GetDescriptor+0x108>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008cd9 	.word	0x08008cd9
 8008cc4:	08008d0d 	.word	0x08008d0d
 8008cc8:	08008d41 	.word	0x08008d41
 8008ccc:	08008d75 	.word	0x08008d75
 8008cd0:	08008da9 	.word	0x08008da9
 8008cd4:	08008ddd 	.word	0x08008ddd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7c12      	ldrb	r2, [r2, #16]
 8008cf0:	f107 0108 	add.w	r1, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfa:	e091      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fab2 	bl	8009268 <USBD_CtlError>
            err++;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	3301      	adds	r3, #1
 8008d08:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0a:	e089      	b.n	8008e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	7c12      	ldrb	r2, [r2, #16]
 8008d24:	f107 0108 	add.w	r1, r7, #8
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
 8008d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2e:	e077      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa98 	bl	8009268 <USBD_CtlError>
            err++;
 8008d38:	7afb      	ldrb	r3, [r7, #11]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3e:	e06f      	b.n	8008e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d62:	e05d      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa7e 	bl	8009268 <USBD_CtlError>
            err++;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	72fb      	strb	r3, [r7, #11]
          break;
 8008d72:	e055      	b.n	8008e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	7c12      	ldrb	r2, [r2, #16]
 8008d8c:	f107 0108 	add.w	r1, r7, #8
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
 8008d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d96:	e043      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa64 	bl	8009268 <USBD_CtlError>
            err++;
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	3301      	adds	r3, #1
 8008da4:	72fb      	strb	r3, [r7, #11]
          break;
 8008da6:	e03b      	b.n	8008e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	7c12      	ldrb	r2, [r2, #16]
 8008dc0:	f107 0108 	add.w	r1, r7, #8
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4798      	blx	r3
 8008dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dca:	e029      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa4a 	bl	8009268 <USBD_CtlError>
            err++;
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dda:	e021      	b.n	8008e20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	7c12      	ldrb	r2, [r2, #16]
 8008df4:	f107 0108 	add.w	r1, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dfe:	e00f      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fa30 	bl	8009268 <USBD_CtlError>
            err++;
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e0e:	e007      	b.n	8008e20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa28 	bl	8009268 <USBD_CtlError>
          err++;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008e1e:	bf00      	nop
      }
      break;
 8008e20:	e037      	b.n	8008e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	7c1b      	ldrb	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	f107 0208 	add.w	r2, r7, #8
 8008e36:	4610      	mov	r0, r2
 8008e38:	4798      	blx	r3
 8008e3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e3c:	e029      	b.n	8008e92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fa11 	bl	8009268 <USBD_CtlError>
        err++;
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e4c:	e021      	b.n	8008e92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7c1b      	ldrb	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10d      	bne.n	8008e72 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	f107 0208 	add.w	r2, r7, #8
 8008e62:	4610      	mov	r0, r2
 8008e64:	4798      	blx	r3
 8008e66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	2207      	movs	r2, #7
 8008e6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e70:	e00f      	b.n	8008e92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f9f7 	bl	8009268 <USBD_CtlError>
        err++;
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e80:	e007      	b.n	8008e92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f9ef 	bl	8009268 <USBD_CtlError>
      err++;
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e90:	bf00      	nop
  }

  if (err != 0U)
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d11e      	bne.n	8008ed6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d016      	beq.n	8008ece <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ea0:	893b      	ldrh	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00e      	beq.n	8008ec4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88da      	ldrh	r2, [r3, #6]
 8008eaa:	893b      	ldrh	r3, [r7, #8]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	bf28      	it	cs
 8008eb0:	4613      	movcs	r3, r2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008eb6:	893b      	ldrh	r3, [r7, #8]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fa44 	bl	800934a <USBD_CtlSendData>
 8008ec2:	e009      	b.n	8008ed8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9ce 	bl	8009268 <USBD_CtlError>
 8008ecc:	e004      	b.n	8008ed8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa95 	bl	80093fe <USBD_CtlSendStatus>
 8008ed4:	e000      	b.n	8008ed8 <USBD_GetDescriptor+0x320>
    return;
 8008ed6:	bf00      	nop
  }
}
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop

08008ee0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	889b      	ldrh	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d131      	bne.n	8008f56 <USBD_SetAddress+0x76>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88db      	ldrh	r3, [r3, #6]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d12d      	bne.n	8008f56 <USBD_SetAddress+0x76>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	885b      	ldrh	r3, [r3, #2]
 8008efe:	2b7f      	cmp	r3, #127	; 0x7f
 8008f00:	d829      	bhi.n	8008f56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	885b      	ldrh	r3, [r3, #2]
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d104      	bne.n	8008f24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f9a3 	bl	8009268 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f22:	e01d      	b.n	8008f60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7bfa      	ldrb	r2, [r7, #15]
 8008f28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fea6 	bl	8009c82 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa61 	bl	80093fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	e009      	b.n	8008f60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f54:	e004      	b.n	8008f60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f985 	bl	8009268 <USBD_CtlError>
  }
}
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	885b      	ldrh	r3, [r3, #2]
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	4b4c      	ldr	r3, [pc, #304]	; (80090b0 <USBD_SetConfig+0x148>)
 8008f7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f80:	4b4b      	ldr	r3, [pc, #300]	; (80090b0 <USBD_SetConfig+0x148>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d905      	bls.n	8008f94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f96c 	bl	8009268 <USBD_CtlError>
    return USBD_FAIL;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e088      	b.n	80090a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d002      	beq.n	8008fa6 <USBD_SetConfig+0x3e>
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d025      	beq.n	8008ff0 <USBD_SetConfig+0x88>
 8008fa4:	e071      	b.n	800908a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fa6:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <USBD_SetConfig+0x148>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01c      	beq.n	8008fe8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008fae:	4b40      	ldr	r3, [pc, #256]	; (80090b0 <USBD_SetConfig+0x148>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fb8:	4b3d      	ldr	r3, [pc, #244]	; (80090b0 <USBD_SetConfig+0x148>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff f992 	bl	80082e8 <USBD_SetClassConfig>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f949 	bl	8009268 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fd6:	e065      	b.n	80090a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa10 	bl	80093fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fe6:	e05d      	b.n	80090a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fa08 	bl	80093fe <USBD_CtlSendStatus>
      break;
 8008fee:	e059      	b.n	80090a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ff0:	4b2f      	ldr	r3, [pc, #188]	; (80090b0 <USBD_SetConfig+0x148>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d112      	bne.n	800901e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009000:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <USBD_SetConfig+0x148>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800900a:	4b29      	ldr	r3, [pc, #164]	; (80090b0 <USBD_SetConfig+0x148>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff f985 	bl	8008320 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9f1 	bl	80093fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800901c:	e042      	b.n	80090a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800901e:	4b24      	ldr	r3, [pc, #144]	; (80090b0 <USBD_SetConfig+0x148>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d02a      	beq.n	8009082 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f973 	bl	8008320 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <USBD_SetConfig+0x148>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009044:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <USBD_SetConfig+0x148>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff f94c 	bl	80082e8 <USBD_SetClassConfig>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00f      	beq.n	800907a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f903 	bl	8009268 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff f958 	bl	8008320 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009078:	e014      	b.n	80090a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f9bf 	bl	80093fe <USBD_CtlSendStatus>
      break;
 8009080:	e010      	b.n	80090a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9bb 	bl	80093fe <USBD_CtlSendStatus>
      break;
 8009088:	e00c      	b.n	80090a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f8eb 	bl	8009268 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <USBD_SetConfig+0x148>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff f941 	bl	8008320 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	73fb      	strb	r3, [r7, #15]
      break;
 80090a2:	bf00      	nop
  }

  return ret;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	200003a0 	.word	0x200003a0

080090b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	88db      	ldrh	r3, [r3, #6]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d004      	beq.n	80090d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8cd 	bl	8009268 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090ce:	e023      	b.n	8009118 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	dc02      	bgt.n	80090e2 <USBD_GetConfig+0x2e>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dc03      	bgt.n	80090e8 <USBD_GetConfig+0x34>
 80090e0:	e015      	b.n	800910e <USBD_GetConfig+0x5a>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d00b      	beq.n	80090fe <USBD_GetConfig+0x4a>
 80090e6:	e012      	b.n	800910e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3308      	adds	r3, #8
 80090f2:	2201      	movs	r2, #1
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f927 	bl	800934a <USBD_CtlSendData>
        break;
 80090fc:	e00c      	b.n	8009118 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	2201      	movs	r2, #1
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f91f 	bl	800934a <USBD_CtlSendData>
        break;
 800910c:	e004      	b.n	8009118 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f8a9 	bl	8009268 <USBD_CtlError>
        break;
 8009116:	bf00      	nop
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009130:	b2db      	uxtb	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	2b02      	cmp	r3, #2
 8009136:	d81e      	bhi.n	8009176 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	88db      	ldrh	r3, [r3, #6]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d004      	beq.n	800914a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f890 	bl	8009268 <USBD_CtlError>
        break;
 8009148:	e01a      	b.n	8009180 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f043 0202 	orr.w	r2, r3, #2
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	330c      	adds	r3, #12
 800916a:	2202      	movs	r2, #2
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8eb 	bl	800934a <USBD_CtlSendData>
      break;
 8009174:	e004      	b.n	8009180 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f875 	bl	8009268 <USBD_CtlError>
      break;
 800917e:	bf00      	nop
  }
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d106      	bne.n	80091a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f92b 	bl	80093fe <USBD_CtlSendStatus>
  }
}
 80091a8:	bf00      	nop
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d80b      	bhi.n	80091e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	885b      	ldrh	r3, [r3, #2]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10c      	bne.n	80091ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f910 	bl	80093fe <USBD_CtlSendStatus>
      }
      break;
 80091de:	e004      	b.n	80091ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f840 	bl	8009268 <USBD_CtlError>
      break;
 80091e8:	e000      	b.n	80091ec <USBD_ClrFeature+0x3c>
      break;
 80091ea:	bf00      	nop
  }
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	781a      	ldrb	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff fa92 	bl	8008748 <SWAPBYTE>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7ff fa85 	bl	8008748 <SWAPBYTE>
 800923e:	4603      	mov	r3, r0
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3301      	adds	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fa78 	bl	8008748 <SWAPBYTE>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	80da      	strh	r2, [r3, #6]
}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009272:	2180      	movs	r1, #128	; 0x80
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fc99 	bl	8009bac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800927a:	2100      	movs	r1, #0
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fc95 	bl	8009bac <USBD_LL_StallEP>
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d036      	beq.n	800930e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092a4:	6938      	ldr	r0, [r7, #16]
 80092a6:	f000 f836 	bl	8009316 <USBD_GetLen>
 80092aa:	4603      	mov	r3, r0
 80092ac:	3301      	adds	r3, #1
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	3301      	adds	r3, #1
 80092c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	4413      	add	r3, r2
 80092d0:	2203      	movs	r2, #3
 80092d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	3301      	adds	r3, #1
 80092d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092da:	e013      	b.n	8009304 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	4413      	add	r3, r2
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	7812      	ldrb	r2, [r2, #0]
 80092e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	3301      	adds	r3, #1
 80092ec:	613b      	str	r3, [r7, #16]
    idx++;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	3301      	adds	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	4413      	add	r3, r2
 80092fa:	2200      	movs	r2, #0
 80092fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
 8009300:	3301      	adds	r3, #1
 8009302:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e7      	bne.n	80092dc <USBD_GetString+0x52>
 800930c:	e000      	b.n	8009310 <USBD_GetString+0x86>
    return;
 800930e:	bf00      	nop
  }
}
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009326:	e005      	b.n	8009334 <USBD_GetLen+0x1e>
  {
    len++;
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	3301      	adds	r3, #1
 800932c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	3301      	adds	r3, #1
 8009332:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f5      	bne.n	8009328 <USBD_GetLen+0x12>
  }

  return len;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2202      	movs	r2, #2
 800935a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	2100      	movs	r1, #0
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fca5 	bl	8009cc0 <USBD_LL_Transmit>

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	2100      	movs	r1, #0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fc94 	bl	8009cc0 <USBD_LL_Transmit>

  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2203      	movs	r2, #3
 80093b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	2100      	movs	r1, #0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 fc98 	bl	8009d02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fc87 	bl	8009d02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2204      	movs	r2, #4
 800940a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800940e:	2300      	movs	r3, #0
 8009410:	2200      	movs	r2, #0
 8009412:	2100      	movs	r1, #0
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fc53 	bl	8009cc0 <USBD_LL_Transmit>

  return USBD_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2205      	movs	r2, #5
 8009430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009434:	2300      	movs	r3, #0
 8009436:	2200      	movs	r2, #0
 8009438:	2100      	movs	r1, #0
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fc61 	bl	8009d02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009450:	2200      	movs	r2, #0
 8009452:	4912      	ldr	r1, [pc, #72]	; (800949c <MX_USB_Device_Init+0x50>)
 8009454:	4812      	ldr	r0, [pc, #72]	; (80094a0 <MX_USB_Device_Init+0x54>)
 8009456:	f7fe fed9 	bl	800820c <USBD_Init>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009460:	f7f7 fc10 	bl	8000c84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009464:	490f      	ldr	r1, [pc, #60]	; (80094a4 <MX_USB_Device_Init+0x58>)
 8009466:	480e      	ldr	r0, [pc, #56]	; (80094a0 <MX_USB_Device_Init+0x54>)
 8009468:	f7fe ff00 	bl	800826c <USBD_RegisterClass>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009472:	f7f7 fc07 	bl	8000c84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009476:	490c      	ldr	r1, [pc, #48]	; (80094a8 <MX_USB_Device_Init+0x5c>)
 8009478:	4809      	ldr	r0, [pc, #36]	; (80094a0 <MX_USB_Device_Init+0x54>)
 800947a:	f7fe fe21 	bl	80080c0 <USBD_CDC_RegisterInterface>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009484:	f7f7 fbfe 	bl	8000c84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009488:	4805      	ldr	r0, [pc, #20]	; (80094a0 <MX_USB_Device_Init+0x54>)
 800948a:	f7fe ff16 	bl	80082ba <USBD_Start>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009494:	f7f7 fbf6 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009498:	bf00      	nop
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000130 	.word	0x20000130
 80094a0:	200003a4 	.word	0x200003a4
 80094a4:	20000018 	.word	0x20000018
 80094a8:	2000011c 	.word	0x2000011c

080094ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094b0:	2200      	movs	r2, #0
 80094b2:	4905      	ldr	r1, [pc, #20]	; (80094c8 <CDC_Init_FS+0x1c>)
 80094b4:	4805      	ldr	r0, [pc, #20]	; (80094cc <CDC_Init_FS+0x20>)
 80094b6:	f7fe fe18 	bl	80080ea <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094ba:	4905      	ldr	r1, [pc, #20]	; (80094d0 <CDC_Init_FS+0x24>)
 80094bc:	4803      	ldr	r0, [pc, #12]	; (80094cc <CDC_Init_FS+0x20>)
 80094be:	f7fe fe32 	bl	8008126 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80094c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000a5c 	.word	0x20000a5c
 80094cc:	200003a4 	.word	0x200003a4
 80094d0:	20000674 	.word	0x20000674

080094d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80094d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094da:	4618      	mov	r0, r3
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
 80094f0:	4613      	mov	r3, r2
 80094f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b23      	cmp	r3, #35	; 0x23
 80094f8:	d84a      	bhi.n	8009590 <CDC_Control_FS+0xac>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <CDC_Control_FS+0x1c>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	08009591 	.word	0x08009591
 8009504:	08009591 	.word	0x08009591
 8009508:	08009591 	.word	0x08009591
 800950c:	08009591 	.word	0x08009591
 8009510:	08009591 	.word	0x08009591
 8009514:	08009591 	.word	0x08009591
 8009518:	08009591 	.word	0x08009591
 800951c:	08009591 	.word	0x08009591
 8009520:	08009591 	.word	0x08009591
 8009524:	08009591 	.word	0x08009591
 8009528:	08009591 	.word	0x08009591
 800952c:	08009591 	.word	0x08009591
 8009530:	08009591 	.word	0x08009591
 8009534:	08009591 	.word	0x08009591
 8009538:	08009591 	.word	0x08009591
 800953c:	08009591 	.word	0x08009591
 8009540:	08009591 	.word	0x08009591
 8009544:	08009591 	.word	0x08009591
 8009548:	08009591 	.word	0x08009591
 800954c:	08009591 	.word	0x08009591
 8009550:	08009591 	.word	0x08009591
 8009554:	08009591 	.word	0x08009591
 8009558:	08009591 	.word	0x08009591
 800955c:	08009591 	.word	0x08009591
 8009560:	08009591 	.word	0x08009591
 8009564:	08009591 	.word	0x08009591
 8009568:	08009591 	.word	0x08009591
 800956c:	08009591 	.word	0x08009591
 8009570:	08009591 	.word	0x08009591
 8009574:	08009591 	.word	0x08009591
 8009578:	08009591 	.word	0x08009591
 800957c:	08009591 	.word	0x08009591
 8009580:	08009591 	.word	0x08009591
 8009584:	08009591 	.word	0x08009591
 8009588:	08009591 	.word	0x08009591
 800958c:	08009591 	.word	0x08009591
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009590:	bf00      	nop
	}

	return (USBD_OK);
 8009592:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7f6 fe4d 	bl	800024c <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	4805      	ldr	r0, [pc, #20]	; (80095cc <CDC_Receive_FS+0x2c>)
 80095b6:	f7fe fdb6 	bl	8008126 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095ba:	4804      	ldr	r0, [pc, #16]	; (80095cc <CDC_Receive_FS+0x2c>)
 80095bc:	f7fe fdfc 	bl	80081b8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80095c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	200003a4 	.word	0x200003a4

080095d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <CDC_Transmit_FS+0x48>)
 80095e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095e6:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e00b      	b.n	800960e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095f6:	887b      	ldrh	r3, [r7, #2]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4806      	ldr	r0, [pc, #24]	; (8009618 <CDC_Transmit_FS+0x48>)
 80095fe:	f7fe fd74 	bl	80080ea <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009602:	4805      	ldr	r0, [pc, #20]	; (8009618 <CDC_Transmit_FS+0x48>)
 8009604:	f7fe fda8 	bl	8008158 <USBD_CDC_TransmitPacket>
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200003a4 	.word	0x200003a4

0800961c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800962e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009632:	4618      	mov	r0, r3
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
	...

08009640 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2212      	movs	r2, #18
 8009650:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009652:	4b03      	ldr	r3, [pc, #12]	; (8009660 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000150 	.word	0x20000150

08009664 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2204      	movs	r2, #4
 8009674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009676:	4b03      	ldr	r3, [pc, #12]	; (8009684 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20000164 	.word	0x20000164

08009688 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4907      	ldr	r1, [pc, #28]	; (80096bc <USBD_CDC_ProductStrDescriptor+0x34>)
 800969e:	4808      	ldr	r0, [pc, #32]	; (80096c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096a0:	f7ff fdf3 	bl	800928a <USBD_GetString>
 80096a4:	e004      	b.n	80096b0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	4904      	ldr	r1, [pc, #16]	; (80096bc <USBD_CDC_ProductStrDescriptor+0x34>)
 80096aa:	4805      	ldr	r0, [pc, #20]	; (80096c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096ac:	f7ff fded 	bl	800928a <USBD_GetString>
  }
  return USBD_StrDesc;
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000e44 	.word	0x20000e44
 80096c0:	08009edc 	.word	0x08009edc

080096c4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	4904      	ldr	r1, [pc, #16]	; (80096e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80096d4:	4804      	ldr	r0, [pc, #16]	; (80096e8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80096d6:	f7ff fdd8 	bl	800928a <USBD_GetString>
  return USBD_StrDesc;
 80096da:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000e44 	.word	0x20000e44
 80096e8:	08009ef4 	.word	0x08009ef4

080096ec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	6039      	str	r1, [r7, #0]
 80096f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	221a      	movs	r2, #26
 80096fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096fe:	f000 f843 	bl	8009788 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009702:	4b02      	ldr	r3, [pc, #8]	; (800970c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000168 	.word	0x20000168

08009710 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d105      	bne.n	800972e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4907      	ldr	r1, [pc, #28]	; (8009744 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009726:	4808      	ldr	r0, [pc, #32]	; (8009748 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009728:	f7ff fdaf 	bl	800928a <USBD_GetString>
 800972c:	e004      	b.n	8009738 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	4904      	ldr	r1, [pc, #16]	; (8009744 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009732:	4805      	ldr	r0, [pc, #20]	; (8009748 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009734:	f7ff fda9 	bl	800928a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009738:	4b02      	ldr	r3, [pc, #8]	; (8009744 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000e44 	.word	0x20000e44
 8009748:	08009f08 	.word	0x08009f08

0800974c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d105      	bne.n	800976a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	4907      	ldr	r1, [pc, #28]	; (8009780 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009762:	4808      	ldr	r0, [pc, #32]	; (8009784 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009764:	f7ff fd91 	bl	800928a <USBD_GetString>
 8009768:	e004      	b.n	8009774 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	4904      	ldr	r1, [pc, #16]	; (8009780 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800976e:	4805      	ldr	r0, [pc, #20]	; (8009784 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009770:	f7ff fd8b 	bl	800928a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009774:	4b02      	ldr	r3, [pc, #8]	; (8009780 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000e44 	.word	0x20000e44
 8009784:	08009f14 	.word	0x08009f14

08009788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800978e:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <Get_SerialNum+0x44>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009794:	4b0e      	ldr	r3, [pc, #56]	; (80097d0 <Get_SerialNum+0x48>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800979a:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <Get_SerialNum+0x4c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4413      	add	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097ae:	2208      	movs	r2, #8
 80097b0:	4909      	ldr	r1, [pc, #36]	; (80097d8 <Get_SerialNum+0x50>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 f814 	bl	80097e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097b8:	2204      	movs	r2, #4
 80097ba:	4908      	ldr	r1, [pc, #32]	; (80097dc <Get_SerialNum+0x54>)
 80097bc:	68b8      	ldr	r0, [r7, #8]
 80097be:	f000 f80f 	bl	80097e0 <IntToUnicode>
  }
}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	1fff7590 	.word	0x1fff7590
 80097d0:	1fff7594 	.word	0x1fff7594
 80097d4:	1fff7598 	.word	0x1fff7598
 80097d8:	2000016a 	.word	0x2000016a
 80097dc:	2000017a 	.word	0x2000017a

080097e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]
 80097f6:	e027      	b.n	8009848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	0f1b      	lsrs	r3, r3, #28
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d80b      	bhi.n	8009818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	0f1b      	lsrs	r3, r3, #28
 8009804:	b2da      	uxtb	r2, r3
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	4619      	mov	r1, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	440b      	add	r3, r1
 8009810:	3230      	adds	r2, #48	; 0x30
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	e00a      	b.n	800982e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	0f1b      	lsrs	r3, r3, #28
 800981c:	b2da      	uxtb	r2, r3
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	4619      	mov	r1, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	440b      	add	r3, r1
 8009828:	3237      	adds	r2, #55	; 0x37
 800982a:	b2d2      	uxtb	r2, r2
 800982c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	011b      	lsls	r3, r3, #4
 8009832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	3301      	adds	r3, #1
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	2200      	movs	r2, #0
 8009840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	3301      	adds	r3, #1
 8009846:	75fb      	strb	r3, [r7, #23]
 8009848:	7dfa      	ldrb	r2, [r7, #23]
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	429a      	cmp	r2, r3
 800984e:	d3d3      	bcc.n	80097f8 <IntToUnicode+0x18>
  }
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	371c      	adds	r7, #28
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b094      	sub	sp, #80	; 0x50
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009868:	f107 030c 	add.w	r3, r7, #12
 800986c:	2244      	movs	r2, #68	; 0x44
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fb1f 	bl	8009eb4 <memset>
  if(pcdHandle->Instance==USB)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a15      	ldr	r2, [pc, #84]	; (80098d0 <HAL_PCD_MspInit+0x70>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d123      	bne.n	80098c8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009884:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009886:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800988a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	4618      	mov	r0, r3
 8009892:	f7fa fa21 	bl	8003cd8 <HAL_RCCEx_PeriphCLKConfig>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800989c:	f7f7 f9f2 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <HAL_PCD_MspInit+0x74>)
 80098a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a4:	4a0b      	ldr	r2, [pc, #44]	; (80098d4 <HAL_PCD_MspInit+0x74>)
 80098a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80098aa:	6593      	str	r3, [r2, #88]	; 0x58
 80098ac:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <HAL_PCD_MspInit+0x74>)
 80098ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80098b8:	2200      	movs	r2, #0
 80098ba:	2100      	movs	r1, #0
 80098bc:	2014      	movs	r0, #20
 80098be:	f7f7 fd4e 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80098c2:	2014      	movs	r0, #20
 80098c4:	f7f7 fd65 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098c8:	bf00      	nop
 80098ca:	3750      	adds	r7, #80	; 0x50
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	40005c00 	.word	0x40005c00
 80098d4:	40021000 	.word	0x40021000

080098d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f7fe fd2e 	bl	8008350 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	440b      	add	r3, r1
 800991c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	4619      	mov	r1, r3
 8009926:	f7fe fd68 	bl	80083fa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	440b      	add	r3, r1
 8009952:	333c      	adds	r3, #60	; 0x3c
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	4619      	mov	r1, r3
 800995a:	f7fe fdb1 	bl	80084c0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fec5 	bl	8008704 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800997a:	bf00      	nop
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800998a:	2301      	movs	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d001      	beq.n	800999a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009996:	f7f7 f975 	bl	8000c84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099a0:	7bfa      	ldrb	r2, [r7, #15]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fe6f 	bl	8008688 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe fe1b 	bl	80085ec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fe6a 	bl	80086a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <HAL_PCD_SuspendCallback+0x30>)
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <HAL_PCD_SuspendCallback+0x30>)
 80099e2:	f043 0306 	orr.w	r3, r3, #6
 80099e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	e000ed00 	.word	0xe000ed00

080099f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a04:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <HAL_PCD_ResumeCallback+0x34>)
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	4a07      	ldr	r2, [pc, #28]	; (8009a28 <HAL_PCD_ResumeCallback+0x34>)
 8009a0a:	f023 0306 	bic.w	r3, r3, #6
 8009a0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009a10:	f000 f9fa 	bl	8009e08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fe5a 	bl	80086d4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	e000ed00 	.word	0xe000ed00

08009a2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009a34:	4a2b      	ldr	r2, [pc, #172]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a29      	ldr	r2, [pc, #164]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009a44:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a46:	4a28      	ldr	r2, [pc, #160]	; (8009ae8 <USBD_LL_Init+0xbc>)
 8009a48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a4a:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a50:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a52:	2202      	movs	r2, #2
 8009a54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a56:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a58:	2202      	movs	r2, #2
 8009a5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009a5c:	4b21      	ldr	r3, [pc, #132]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a62:	4b20      	ldr	r3, [pc, #128]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a6e:	4b1d      	ldr	r3, [pc, #116]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a74:	481b      	ldr	r0, [pc, #108]	; (8009ae4 <USBD_LL_Init+0xb8>)
 8009a76:	f7f7 fe5b 	bl	8001730 <HAL_PCD_Init>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009a80:	f7f7 f900 	bl	8000c84 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a8a:	2318      	movs	r3, #24
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f7f9 fb14 	bl	80030bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a9a:	2358      	movs	r3, #88	; 0x58
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2180      	movs	r1, #128	; 0x80
 8009aa0:	f7f9 fb0c 	bl	80030bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aaa:	23c0      	movs	r3, #192	; 0xc0
 8009aac:	2200      	movs	r2, #0
 8009aae:	2181      	movs	r1, #129	; 0x81
 8009ab0:	f7f9 fb04 	bl	80030bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aba:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	f7f9 fafb 	bl	80030bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2182      	movs	r1, #130	; 0x82
 8009ad4:	f7f9 faf2 	bl	80030bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20001044 	.word	0x20001044
 8009ae8:	40005c00 	.word	0x40005c00

08009aec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7f7 fef9 	bl	80018fa <HAL_PCD_Start>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f980 	bl	8009e14 <USBD_Get_USB_Status>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	70fb      	strb	r3, [r7, #3]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70bb      	strb	r3, [r7, #2]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b4a:	78bb      	ldrb	r3, [r7, #2]
 8009b4c:	883a      	ldrh	r2, [r7, #0]
 8009b4e:	78f9      	ldrb	r1, [r7, #3]
 8009b50:	f7f8 f841 	bl	8001bd6 <HAL_PCD_EP_Open>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f95a 	bl	8009e14 <USBD_Get_USB_Status>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7f8 f888 	bl	8001ca2 <HAL_PCD_EP_Close>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f93b 	bl	8009e14 <USBD_Get_USB_Status>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7f8 f949 	bl	8001e62 <HAL_PCD_EP_SetStall>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f91c 	bl	8009e14 <USBD_Get_USB_Status>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c04:	78fa      	ldrb	r2, [r7, #3]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7f8 f97c 	bl	8001f06 <HAL_PCD_EP_ClrStall>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 f8fd 	bl	8009e14 <USBD_Get_USB_Status>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	da0c      	bge.n	8009c5e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4a:	68f9      	ldr	r1, [r7, #12]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	440b      	add	r3, r1
 8009c58:	3302      	adds	r3, #2
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	e00b      	b.n	8009c76 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c64:	68f9      	ldr	r1, [r7, #12]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	440b      	add	r3, r1
 8009c70:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009c74:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7f7 ff73 	bl	8001b8c <HAL_PCD_SetAddress>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 f8b1 	bl	8009e14 <USBD_Get_USB_Status>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	607a      	str	r2, [r7, #4]
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cde:	7af9      	ldrb	r1, [r7, #11]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	f7f8 f87a 	bl	8001ddc <HAL_PCD_EP_Transmit>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f890 	bl	8009e14 <USBD_Get_USB_Status>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b086      	sub	sp, #24
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d20:	7af9      	ldrb	r1, [r7, #11]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	f7f8 f804 	bl	8001d32 <HAL_PCD_EP_Receive>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 f86f 	bl	8009e14 <USBD_Get_USB_Status>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d56:	78fa      	ldrb	r2, [r7, #3]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f8 f826 	bl	8001dac <HAL_PCD_EP_GetRxCount>
 8009d60:	4603      	mov	r3, r0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_PCDEx_LPM_Callback+0x18>
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d013      	beq.n	8009daa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009d82:	e023      	b.n	8009dcc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009d8c:	f000 f83c 	bl	8009e08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d90:	4b10      	ldr	r3, [pc, #64]	; (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	4a0f      	ldr	r2, [pc, #60]	; (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d96:	f023 0306 	bic.w	r3, r3, #6
 8009d9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fc96 	bl	80086d4 <USBD_LL_Resume>
    break;
 8009da8:	e010      	b.n	8009dcc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fc79 	bl	80086a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d005      	beq.n	8009dca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	4a04      	ldr	r2, [pc, #16]	; (8009dd4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc4:	f043 0306 	orr.w	r3, r3, #6
 8009dc8:	6113      	str	r3, [r2, #16]
    break;
 8009dca:	bf00      	nop
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	e000ed00 	.word	0xe000ed00

08009dd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009de0:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <USBD_static_malloc+0x18>)
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20001338 	.word	0x20001338

08009df4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]

}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e0c:	f7f6 fbe6 	bl	80005dc <SystemClock_Config>
}
 8009e10:	bf00      	nop
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b03      	cmp	r3, #3
 8009e26:	d817      	bhi.n	8009e58 <USBD_Get_USB_Status+0x44>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <USBD_Get_USB_Status+0x1c>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e41 	.word	0x08009e41
 8009e34:	08009e47 	.word	0x08009e47
 8009e38:	08009e4d 	.word	0x08009e4d
 8009e3c:	08009e53 	.word	0x08009e53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
    break;
 8009e44:	e00b      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4a:	e008      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e50:	e005      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e52:	2303      	movs	r3, #3
 8009e54:	73fb      	strb	r3, [r7, #15]
    break;
 8009e56:	e002      	b.n	8009e5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5c:	bf00      	nop
  }
  return usb_status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <__libc_init_array>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	4d0d      	ldr	r5, [pc, #52]	; (8009ea4 <__libc_init_array+0x38>)
 8009e70:	4c0d      	ldr	r4, [pc, #52]	; (8009ea8 <__libc_init_array+0x3c>)
 8009e72:	1b64      	subs	r4, r4, r5
 8009e74:	10a4      	asrs	r4, r4, #2
 8009e76:	2600      	movs	r6, #0
 8009e78:	42a6      	cmp	r6, r4
 8009e7a:	d109      	bne.n	8009e90 <__libc_init_array+0x24>
 8009e7c:	4d0b      	ldr	r5, [pc, #44]	; (8009eac <__libc_init_array+0x40>)
 8009e7e:	4c0c      	ldr	r4, [pc, #48]	; (8009eb0 <__libc_init_array+0x44>)
 8009e80:	f000 f820 	bl	8009ec4 <_init>
 8009e84:	1b64      	subs	r4, r4, r5
 8009e86:	10a4      	asrs	r4, r4, #2
 8009e88:	2600      	movs	r6, #0
 8009e8a:	42a6      	cmp	r6, r4
 8009e8c:	d105      	bne.n	8009e9a <__libc_init_array+0x2e>
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e94:	4798      	blx	r3
 8009e96:	3601      	adds	r6, #1
 8009e98:	e7ee      	b.n	8009e78 <__libc_init_array+0xc>
 8009e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e9e:	4798      	blx	r3
 8009ea0:	3601      	adds	r6, #1
 8009ea2:	e7f2      	b.n	8009e8a <__libc_init_array+0x1e>
 8009ea4:	08009f34 	.word	0x08009f34
 8009ea8:	08009f34 	.word	0x08009f34
 8009eac:	08009f34 	.word	0x08009f34
 8009eb0:	08009f38 	.word	0x08009f38

08009eb4 <memset>:
 8009eb4:	4402      	add	r2, r0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d100      	bne.n	8009ebe <memset+0xa>
 8009ebc:	4770      	bx	lr
 8009ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec2:	e7f9      	b.n	8009eb8 <memset+0x4>

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
