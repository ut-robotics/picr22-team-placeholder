
PiCR_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800991c  0800991c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800991c  0800991c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800991c  0800991c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800991c  0800991c  0001991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000184  08009aa8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  08009aa8  00021554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b5f  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003511  00000000  00000000  00035d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00039228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bbb  00000000  00000000  0003b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163a4  00000000  00000000  0005c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c62f3  00000000  00000000  0007265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f58  00000000  00000000  001389a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080098ac 	.word	0x080098ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080098ac 	.word	0x080098ac

08000218 <CDC_On_Receive>:
		return min;
	}
	return value;
}

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10f      	bne.n	800024a <CDC_On_Receive+0x32>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <CDC_On_Receive+0x40>)
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	6810      	ldr	r0, [r2, #0]
 8000230:	6851      	ldr	r1, [r2, #4]
 8000232:	c303      	stmia	r3!, {r0, r1}
 8000234:	8912      	ldrh	r2, [r2, #8]
 8000236:	801a      	strh	r2, [r3, #0]

		if (command.delimiter == 0xAAAA) {
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <CDC_On_Receive+0x40>)
 800023a:	891b      	ldrh	r3, [r3, #8]
 800023c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000240:	4293      	cmp	r3, r2
 8000242:	d102      	bne.n	800024a <CDC_On_Receive+0x32>
			isCommandReceived = 1;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <CDC_On_Receive+0x44>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000368 	.word	0x20000368
 800025c:	20000372 	.word	0x20000372

08000260 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000266:	f000 fda4 	bl	8000db2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800026a:	f000 f85f 	bl	800032c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800026e:	f000 fb1f 	bl	80008b0 <MX_GPIO_Init>
	MX_USB_Device_Init();
 8000272:	f008 fddf 	bl	8008e34 <MX_USB_Device_Init>
	MX_TIM1_Init();
 8000276:	f000 f8a5 	bl	80003c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 800027a:	f000 f94f 	bl	800051c <MX_TIM2_Init>
	MX_TIM3_Init();
 800027e:	f000 f9a1 	bl	80005c4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000282:	f000 f9f5 	bl	8000670 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000286:	f000 fa7f 	bl	8000788 <MX_TIM8_Init>
	MX_TIM6_Init();
 800028a:	f000 fa47 	bl	800071c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	Feedback feedback = { .speed1 = 0, .speed2 = 0, .speed3 = 0, .delimiter =
 800028e:	2300      	movs	r3, #0
 8000290:	803b      	strh	r3, [r7, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	807b      	strh	r3, [r7, #2]
 8000296:	2300      	movs	r3, #0
 8000298:	80bb      	strh	r3, [r7, #4]
 800029a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800029e:	80fb      	strh	r3, [r7, #6]
			0xAAAA };

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002a0:	2104      	movs	r1, #4
 80002a2:	4818      	ldr	r0, [pc, #96]	; (8000304 <main+0xa4>)
 80002a4:	f004 f83e 	bl	8004324 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002a8:	2104      	movs	r1, #4
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <main+0xa8>)
 80002ac:	f004 f83a 	bl	8004324 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b0:	2104      	movs	r1, #4
 80002b2:	4816      	ldr	r0, [pc, #88]	; (800030c <main+0xac>)
 80002b4:	f004 f836 	bl	8004324 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3);
 80002b8:	210c      	movs	r1, #12
 80002ba:	4815      	ldr	r0, [pc, #84]	; (8000310 <main+0xb0>)
 80002bc:	f003 fe8c 	bl	8003fd8 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 80002c0:	4814      	ldr	r0, [pc, #80]	; (8000314 <main+0xb4>)
 80002c2:	f003 fdc7 	bl	8003e54 <HAL_TIM_Base_Start_IT>
	while (1) {
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (isCommandReceived) { // (2)
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <main+0xb8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0fa      	beq.n	80002c6 <main+0x66>
			isCommandReceived = 0;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <main+0xb8>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002da:	4810      	ldr	r0, [pc, #64]	; (800031c <main+0xbc>)
 80002dc:	f001 f884 	bl	80013e8 <HAL_GPIO_TogglePin>

			feedback.speed1 = motor1Control.speed;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <main+0xc0>)
 80002e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e6:	803b      	strh	r3, [r7, #0]
			feedback.speed2 = motor2Control.speed;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <main+0xc4>)
 80002ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002ee:	807b      	strh	r3, [r7, #2]
			feedback.speed3 = motor3Control.speed;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <main+0xc8>)
 80002f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002f6:	80bb      	strh	r3, [r7, #4]

			CDC_Transmit_FS((uint8_t*) &feedback, sizeof(feedback));
 80002f8:	463b      	mov	r3, r7
 80002fa:	2108      	movs	r1, #8
 80002fc:	4618      	mov	r0, r3
 80002fe:	f008 fe5b 	bl	8008fb8 <CDC_Transmit_FS>
		if (isCommandReceived) { // (2)
 8000302:	e7e0      	b.n	80002c6 <main+0x66>
 8000304:	200001ec 	.word	0x200001ec
 8000308:	20000238 	.word	0x20000238
 800030c:	20000284 	.word	0x20000284
 8000310:	200001a0 	.word	0x200001a0
 8000314:	200002d0 	.word	0x200002d0
 8000318:	20000372 	.word	0x20000372
 800031c:	48000400 	.word	0x48000400
 8000320:	20000374 	.word	0x20000374
 8000324:	20000380 	.word	0x20000380
 8000328:	2000038c 	.word	0x2000038c

0800032c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	; 0x50
 8000330:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2238      	movs	r2, #56	; 0x38
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f009 faae 	bl	800989c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800034e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000352:	f002 fd97 	bl	8002e84 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000356:	2302      	movs	r3, #2
 8000358:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800035e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	2340      	movs	r3, #64	; 0x40
 8000362:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800036c:	2301      	movs	r3, #1
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000370:	230c      	movs	r3, #12
 8000372:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000374:	2302      	movs	r3, #2
 8000376:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000378:	2304      	movs	r3, #4
 800037a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037c:	2302      	movs	r3, #2
 800037e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fe21 	bl	8002fcc <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x68>
		Error_Handler();
 8000390:	f000 fb20 	bl	80009d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000398:	2301      	movs	r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 f925 	bl	80035fc <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x90>
		Error_Handler();
 80003b8:	f000 fb0c 	bl	80009d4 <Error_Handler>
	}
}
 80003bc:	bf00      	nop
 80003be:	3750      	adds	r7, #80	; 0x50
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b098      	sub	sp, #96	; 0x60
 80003c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80003ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80003d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]
 80003e6:	615a      	str	r2, [r3, #20]
 80003e8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2234      	movs	r2, #52	; 0x34
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f009 fa53 	bl	800989c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80003f6:	4b47      	ldr	r3, [pc, #284]	; (8000514 <MX_TIM1_Init+0x150>)
 80003f8:	4a47      	ldr	r2, [pc, #284]	; (8000518 <MX_TIM1_Init+0x154>)
 80003fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80003fc:	4b45      	ldr	r3, [pc, #276]	; (8000514 <MX_TIM1_Init+0x150>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000402:	4b44      	ldr	r3, [pc, #272]	; (8000514 <MX_TIM1_Init+0x150>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 6535;
 8000408:	4b42      	ldr	r3, [pc, #264]	; (8000514 <MX_TIM1_Init+0x150>)
 800040a:	f641 1287 	movw	r2, #6535	; 0x1987
 800040e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000410:	4b40      	ldr	r3, [pc, #256]	; (8000514 <MX_TIM1_Init+0x150>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000416:	4b3f      	ldr	r3, [pc, #252]	; (8000514 <MX_TIM1_Init+0x150>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041c:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <MX_TIM1_Init+0x150>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000422:	483c      	ldr	r0, [pc, #240]	; (8000514 <MX_TIM1_Init+0x150>)
 8000424:	f003 fd80 	bl	8003f28 <HAL_TIM_PWM_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x6e>
		Error_Handler();
 800042e:	f000 fad1 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000432:	2300      	movs	r3, #0
 8000434:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800043e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000442:	4619      	mov	r1, r3
 8000444:	4833      	ldr	r0, [pc, #204]	; (8000514 <MX_TIM1_Init+0x150>)
 8000446:	f004 fcbb 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000450:	f000 fac0 	bl	80009d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000454:	2360      	movs	r3, #96	; 0x60
 8000456:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045c:	2300      	movs	r3, #0
 800045e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000460:	2300      	movs	r3, #0
 8000462:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000464:	2300      	movs	r3, #0
 8000466:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000468:	2300      	movs	r3, #0
 800046a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000470:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000474:	2200      	movs	r2, #0
 8000476:	4619      	mov	r1, r3
 8000478:	4826      	ldr	r0, [pc, #152]	; (8000514 <MX_TIM1_Init+0x150>)
 800047a:	f003 ffe1 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000484:	f000 faa6 	bl	80009d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000488:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800048c:	2204      	movs	r2, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4820      	ldr	r0, [pc, #128]	; (8000514 <MX_TIM1_Init+0x150>)
 8000492:	f003 ffd5 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 800049c:	f000 fa9a 	bl	80009d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80004a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004a4:	2208      	movs	r2, #8
 80004a6:	4619      	mov	r1, r3
 80004a8:	481a      	ldr	r0, [pc, #104]	; (8000514 <MX_TIM1_Init+0x150>)
 80004aa:	f003 ffc9 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80004b4:	f000 fa8e 	bl	80009d4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <MX_TIM1_Init+0x150>)
 80004f6:	f004 fce5 	bl	8004ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8000500:	f000 fa68 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <MX_TIM1_Init+0x150>)
 8000506:	f000 fb87 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 800050a:	bf00      	nop
 800050c:	3760      	adds	r7, #96	; 0x60
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200001a0 	.word	0x200001a0
 8000518:	40012c00 	.word	0x40012c00

0800051c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2224      	movs	r2, #36	; 0x24
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f009 f9b6 	bl	800989c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800053c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000540:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000554:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_TIM2_Init+0xa4>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000562:	2303      	movs	r3, #3
 8000564:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800057a:	2301      	movs	r3, #1
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_TIM2_Init+0xa4>)
 800058e:	f003 fe23 	bl	80041d8 <HAL_TIM_Encoder_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0x80>
		Error_Handler();
 8000598:	f000 fa1c 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_TIM2_Init+0xa4>)
 80005aa:	f004 fc09 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80005b4:	f000 fa0e 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005b8:	bf00      	nop
 80005ba:	3730      	adds	r7, #48	; 0x30
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200001ec 	.word	0x200001ec

080005c4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2224      	movs	r2, #36	; 0x24
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f009 f962 	bl	800989c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005e4:	4a21      	ldr	r2, [pc, #132]	; (800066c <MX_TIM3_Init+0xa8>)
 80005e6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005fa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_TIM3_Init+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_TIM3_Init+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000608:	2303      	movs	r3, #3
 800060a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000620:	2301      	movs	r3, #1
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_TIM3_Init+0xa4>)
 8000634:	f003 fdd0 	bl	80041d8 <HAL_TIM_Encoder_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x7e>
		Error_Handler();
 800063e:	f000 f9c9 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <MX_TIM3_Init+0xa4>)
 8000650:	f004 fbb6 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800065a:	f000 f9bb 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	; 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000238 	.word	0x20000238
 800066c:	40000400 	.word	0x40000400

08000670 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2224      	movs	r2, #36	; 0x24
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f009 f90c 	bl	800989c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_TIM4_Init+0xa4>)
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <MX_TIM4_Init+0xa8>)
 8000692:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_TIM4_Init+0xa4>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_TIM4_Init+0xa4>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006b4:	2303      	movs	r3, #3
 80006b6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006bc:	2301      	movs	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006e0:	f003 fd7a 	bl	80041d8 <HAL_TIM_Encoder_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM4_Init+0x7e>
		Error_Handler();
 80006ea:	f000 f973 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM4_Init+0xa4>)
 80006fc:	f004 fb60 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8000706:	f000 f965 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000284 	.word	0x20000284
 8000718:	40000800 	.word	0x40000800

0800071c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_TIM6_Init+0x64>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_TIM6_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 9;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_TIM6_Init+0x64>)
 8000734:	2209      	movs	r2, #9
 8000736:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_TIM6_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 39999;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_TIM6_Init+0x64>)
 8000740:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000744:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_TIM6_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_TIM6_Init+0x64>)
 800074e:	f003 fb29 	bl	8003da4 <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM6_Init+0x40>
		Error_Handler();
 8000758:	f000 f93c 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM6_Init+0x64>)
 800076a:	f004 fb29 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000774:	f000 f92e 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200002d0 	.word	0x200002d0
 8000784:	40001000 	.word	0x40001000

08000788 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b098      	sub	sp, #96	; 0x60
 800078c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800079a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2234      	movs	r2, #52	; 0x34
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f009 f871 	bl	800989c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <MX_TIM8_Init+0x124>)
 80007be:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80007e6:	4830      	ldr	r0, [pc, #192]	; (80008a8 <MX_TIM8_Init+0x120>)
 80007e8:	f003 fb9e 	bl	8003f28 <HAL_TIM_PWM_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM8_Init+0x6e>
		Error_Handler();
 80007f2:	f000 f8ef 	bl	80009d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000802:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000806:	4619      	mov	r1, r3
 8000808:	4827      	ldr	r0, [pc, #156]	; (80008a8 <MX_TIM8_Init+0x120>)
 800080a:	f004 fad9 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM8_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000814:	f000 f8de 	bl	80009d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000820:	2300      	movs	r3, #0
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000824:	2300      	movs	r3, #0
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8000834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	481a      	ldr	r0, [pc, #104]	; (80008a8 <MX_TIM8_Init+0x120>)
 800083e:	f003 fdff 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000848:	f000 f8c4 	bl	80009d4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM8_Init+0x120>)
 800088a:	f004 fb1b 	bl	8004ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8000894:	f000 f89e 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM8_Init+0x120>)
 800089a:	f000 f9bd 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 800089e:	bf00      	nop
 80008a0:	3760      	adds	r7, #96	; 0x60
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000031c 	.word	0x2000031c
 80008ac:	40013400 	.word	0x40013400

080008b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a3e      	ldr	r2, [pc, #248]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a38      	ldr	r2, [pc, #224]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, M3_Dir_Pin | M2_Dir_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2103      	movs	r1, #3
 800092a:	4827      	ldr	r0, [pc, #156]	; (80009c8 <MX_GPIO_Init+0x118>)
 800092c:	f000 fd44 	bl	80013b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, M_Sleep_Pin | M1_Dir_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	210c      	movs	r1, #12
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fd3e 	bl	80013b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x11c>)
 8000944:	f000 fd38 	bl	80013b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M3_Dir_Pin M2_Dir_Pin */
	GPIO_InitStruct.Pin = M3_Dir_Pin | M2_Dir_Pin;
 8000948:	2303      	movs	r3, #3
 800094a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	481a      	ldr	r0, [pc, #104]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000960:	f000 fba8 	bl	80010b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : NRST_Pin */
	GPIO_InitStruct.Pin = NRST_Pin;
 8000964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000968:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x120>)
 800097c:	f000 fb9a 	bl	80010b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : M_Sleep_Pin M1_Dir_Pin */
	GPIO_InitStruct.Pin = M_Sleep_Pin | M1_Dir_Pin;
 8000980:	230c      	movs	r3, #12
 8000982:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fb8b 	bl	80010b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800099e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x11c>)
 80009b8:	f000 fb7c 	bl	80010b4 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48001400 	.word	0x48001400
 80009cc:	48000400 	.word	0x48000400
 80009d0:	48001800 	.word	0x48001800

080009d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6613      	str	r3, [r2, #96]	; 0x60
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x44>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_TIM_PWM_MspInit+0x5c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d10c      	bne.n	8000a54 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_TIM_PWM_MspInit+0x60>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_TIM_PWM_MspInit+0x60>)
 8000a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a44:	6613      	str	r3, [r2, #96]	; 0x60
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_TIM_PWM_MspInit+0x60>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000a52:	e010      	b.n	8000a76 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <HAL_TIM_PWM_MspInit+0x64>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_TIM_PWM_MspInit+0x60>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <HAL_TIM_PWM_MspInit+0x60>)
 8000a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_TIM_PWM_MspInit+0x60>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40013400 	.word	0x40013400

08000a90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab0:	d129      	bne.n	8000b06 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
 8000ac8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000af2:	2301      	movs	r3, #1
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f000 fad8 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b04:	e05b      	b.n	8000bbe <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d129      	bne.n	8000b64 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000b40:	2350      	movs	r3, #80	; 0x50
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b50:	2302      	movs	r3, #2
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 faa9 	bl	80010b4 <HAL_GPIO_Init>
}
 8000b62:	e02c      	b.n	8000bbe <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d127      	bne.n	8000bbe <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	; 0xc0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HAL_TIM_Encoder_MspInit+0x144>)
 8000bba:	f000 fa7b 	bl	80010b4 <HAL_GPIO_Init>
}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	; 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40000400 	.word	0x40000400
 8000bd0:	40000800 	.word	0x40000800
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10b      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_TIM_Base_MspInit+0x3c>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40001000 	.word	0x40001000
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a24      	ldr	r2, [pc, #144]	; (8000cc8 <HAL_TIM_MspPostInit+0xb0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d11e      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c64:	2306      	movs	r3, #6
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f000 fa1f 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000c76:	e022      	b.n	8000cbe <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d11d      	bne.n	8000cbe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000cac:	2302      	movs	r3, #2
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f000 f9fb 	bl	80010b4 <HAL_GPIO_Init>
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40013400 	.word	0x40013400

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f89a 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USB_LP_IRQHandler+0x10>)
 8000d2e:	f000 fc7c 	bl	800162a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001040 	.word	0x20001040

08000d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d66:	490e      	ldr	r1, [pc, #56]	; (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	; (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d8a:	f7ff ffd7 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f008 fd61 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fa65 	bl	8000260 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   r0, =_estack
 8000d98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000da4:	08009924 	.word	0x08009924
  ldr r2, =_sbss
 8000da8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000dac:	20001554 	.word	0x20001554

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>

08000db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f939 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f80e 	bl	8000de4 <HAL_InitTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e001      	b.n	8000dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd4:	f7ff fe04 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_InitTick+0x68>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d022      	beq.n	8000e3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_InitTick+0x6c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_InitTick+0x68>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f944 	bl	800109a <HAL_SYSTICK_Config>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10f      	bne.n	8000e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d809      	bhi.n	8000e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	f000 f910 	bl	800104a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_InitTick+0x70>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e004      	b.n	8000e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e001      	b.n	8000e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x20>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <HAL_IncTick+0x1c>)
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000398 	.word	0x20000398
 8000e78:	20000008 	.word	0x20000008

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000398 	.word	0x20000398

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff40 	bl	8000edc <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff90 	bl	8000f88 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5f 	bl	8000f34 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff33 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa4 	bl	8000ff0 <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010c2:	e15a      	b.n	800137a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 814c 	beq.w	8001374 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 0201 	and.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b03      	cmp	r3, #3
 8001160:	d017      	beq.n	8001192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	6939      	ldr	r1, [r7, #16]
 80011e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0203 	and.w	r2, r3, #3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80a6 	beq.w	8001374 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_GPIO_Init+0x2e4>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <HAL_GPIO_Init+0x2e4>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6613      	str	r3, [r2, #96]	; 0x60
 8001234:	4b58      	ldr	r3, [pc, #352]	; (8001398 <HAL_GPIO_Init+0x2e4>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001240:	4a56      	ldr	r2, [pc, #344]	; (800139c <HAL_GPIO_Init+0x2e8>)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800126a:	d01f      	beq.n	80012ac <HAL_GPIO_Init+0x1f8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x2ec>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d019      	beq.n	80012a8 <HAL_GPIO_Init+0x1f4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x2f0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d013      	beq.n	80012a4 <HAL_GPIO_Init+0x1f0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <HAL_GPIO_Init+0x2f4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d00d      	beq.n	80012a0 <HAL_GPIO_Init+0x1ec>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a49      	ldr	r2, [pc, #292]	; (80013ac <HAL_GPIO_Init+0x2f8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1e8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_GPIO_Init+0x1e4>
 8001294:	2305      	movs	r3, #5
 8001296:	e00a      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 8001298:	2306      	movs	r3, #6
 800129a:	e008      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 800129c:	2304      	movs	r3, #4
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012a0:	2303      	movs	r3, #3
 80012a2:	e004      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012ac:	2300      	movs	r3, #0
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012be:	4937      	ldr	r1, [pc, #220]	; (800139c <HAL_GPIO_Init+0x2e8>)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_GPIO_Init+0x300>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f0:	4a30      	ldr	r2, [pc, #192]	; (80013b4 <HAL_GPIO_Init+0x300>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x300>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800131a:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <HAL_GPIO_Init+0x300>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_GPIO_Init+0x300>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x300>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x300>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_GPIO_Init+0x300>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae9d 	bne.w	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000c00 	.word	0x48000c00
 80013ac:	48001000 	.word	0x48001000
 80013b0:	48001400 	.word	0x48001400
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43d9      	mvns	r1, r3
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	400b      	ands	r3, r1
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af06      	add	r7, sp, #24
 8001422:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0d7      	b.n	80015de <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f007 ff00 	bl	8009248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fdec 	bl	8005032 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e04c      	b.n	80014fa <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3301      	adds	r3, #1
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	b298      	uxth	r0, r3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3336      	adds	r3, #54	; 0x36
 800149e:	4602      	mov	r2, r0
 80014a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	3303      	adds	r3, #3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	440b      	add	r3, r1
 80014c6:	3338      	adds	r3, #56	; 0x38
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	333c      	adds	r3, #60	; 0x3c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	3340      	adds	r3, #64	; 0x40
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	3301      	adds	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3ad      	bcc.n	8001460 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e044      	b.n	8001594 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	f203 1369 	addw	r3, r3, #361	; 0x169
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	3301      	adds	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3b5      	bcc.n	800150a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	687e      	ldr	r6, [r7, #4]
 80015a6:	466d      	mov	r5, sp
 80015a8:	f106 0410 	add.w	r4, r6, #16
 80015ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	602b      	str	r3, [r5, #0]
 80015b4:	1d33      	adds	r3, r6, #4
 80015b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f003 fd55 	bl	8005068 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f001 fc29 	bl	8002e2e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_PCD_Start+0x16>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e012      	b.n	8001622 <HAL_PCD_Start+0x3c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fcfb 	bl	8005004 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 ff14 	bl	8007440 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f005 ff19 	bl	800746e <USB_ReadInterrupts>
 800163c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fb26 	bl	8001c9a <PCD_EP_ISR_Handler>

    return;
 800164e:	e110      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d013      	beq.n	8001682 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f007 fe79 	bl	800936a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001678:	2100      	movs	r1, #0
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8fc 	bl	8001878 <HAL_PCD_SetAddress>

    return;
 8001680:	e0f7      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001694:	b29a      	uxth	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800169e:	b292      	uxth	r2, r2
 80016a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016a4:	e0e5      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016c2:	b292      	uxth	r2, r2
 80016c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016c8:	e0d3      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d034      	beq.n	800173e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	b292      	uxth	r2, r2
 80016e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0208 	bic.w	r2, r2, #8
 80016fe:	b292      	uxth	r2, r2
 8001700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f008 f81b 	bl	8009754 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f007 fe5c 	bl	80093dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800173c:	e099      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001744:	2b00      	cmp	r3, #0
 8001746:	d027      	beq.n	8001798 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0208 	orr.w	r2, r2, #8
 800175a:	b292      	uxth	r2, r2
 800175c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001772:	b292      	uxth	r2, r2
 8001774:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0204 	orr.w	r2, r2, #4
 800178a:	b292      	uxth	r2, r2
 800178c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f007 fe09 	bl	80093a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001796:	e06c      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d040      	beq.n	8001824 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d12b      	bne.n	800181c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0204 	orr.w	r2, r2, #4
 80017d6:	b292      	uxth	r2, r2
 80017d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0208 	orr.w	r2, r2, #8
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001804:	b29b      	uxth	r3, r3
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001812:	2101      	movs	r1, #1
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f007 ff9d 	bl	8009754 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800181a:	e02a      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f007 fdc3 	bl	80093a8 <HAL_PCD_SuspendCallback>
    return;
 8001822:	e026      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00f      	beq.n	800184e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001836:	b29a      	uxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001840:	b292      	uxth	r2, r2
 8001842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f007 fd81 	bl	800934e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800184c:	e011      	b.n	8001872 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00c      	beq.n	8001872 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800186a:	b292      	uxth	r2, r2
 800186c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001870:	bf00      	nop
  }
}
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_PCD_SetAddress+0x1a>
 800188e:	2302      	movs	r3, #2
 8001890:	e013      	b.n	80018ba <HAL_PCD_SetAddress+0x42>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 fdb4 	bl	8007418 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	4608      	mov	r0, r1
 80018cc:	4611      	mov	r1, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	4603      	mov	r3, r0
 80018d2:	70fb      	strb	r3, [r7, #3]
 80018d4:	460b      	mov	r3, r1
 80018d6:	803b      	strh	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da0e      	bge.n	8001906 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	705a      	strb	r2, [r3, #1]
 8001904:	e00e      	b.n	8001924 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0207 	and.w	r2, r3, #7
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	b2da      	uxtb	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001930:	883a      	ldrh	r2, [r7, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	78ba      	ldrb	r2, [r7, #2]
 800193a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d102      	bne.n	800195a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_PCD_EP_Open+0xa6>
 8001964:	2302      	movs	r3, #2
 8001966:	e00e      	b.n	8001986 <HAL_PCD_EP_Open+0xc4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fb98 	bl	80050ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001984:	7afb      	ldrb	r3, [r7, #11]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800199a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da0e      	bge.n	80019c0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	705a      	strb	r2, [r3, #1]
 80019be:	e00e      	b.n	80019de <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 0207 	and.w	r2, r3, #7
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_PCD_EP_Close+0x6a>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e00e      	b.n	8001a16 <HAL_PCD_EP_Close+0x88>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fee4 	bl	80057d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
 8001a30:	f003 0207 	and.w	r2, r3, #7
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d106      	bne.n	8001a82 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 f897 	bl	8005bae <USB_EPStartXfer>
 8001a80:	e005      	b.n	8001a8e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 f890 	bl	8005bae <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	f003 0207 	and.w	r2, r3, #7
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2201      	movs	r2, #1
 8001b12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6979      	ldr	r1, [r7, #20]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f83c 	bl	8005bae <USB_EPStartXfer>
 8001b36:	e005      	b.n	8001b44 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6979      	ldr	r1, [r7, #20]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f835 	bl	8005bae <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 0207 	and.w	r2, r3, #7
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d901      	bls.n	8001b6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e03e      	b.n	8001bea <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da0e      	bge.n	8001b92 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	705a      	strb	r2, [r3, #1]
 8001b90:	e00c      	b.n	8001bac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_EP_SetStall+0x7e>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00e      	b.n	8001bea <HAL_PCD_EP_SetStall+0x9c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f005 fb1d 	bl	800721a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 020f 	and.w	r2, r3, #15
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d901      	bls.n	8001c10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e040      	b.n	8001c92 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da0e      	bge.n	8001c36 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	705a      	strb	r2, [r3, #1]
 8001c34:	e00e      	b.n	8001c54 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 0207 	and.w	r2, r3, #7
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_PCD_EP_ClrStall+0x82>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e00e      	b.n	8001c92 <HAL_PCD_EP_ClrStall+0xa0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 fb1a 	bl	80072bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b096      	sub	sp, #88	; 0x58
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ca2:	e39c      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001cbe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 815e 	bne.w	8001f84 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d150      	bne.n	8001d76 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce4:	81fb      	strh	r3, [r7, #14]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3328      	adds	r3, #40	; 0x28
 8001cfc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	441a      	add	r2, r3
 8001d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d32:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d34:	2100      	movs	r1, #0
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f007 faef 	bl	800931a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 834a 	beq.w	80023de <PCD_EP_ISR_Handler+0x744>
 8001d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 8345 	bne.w	80023de <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b292      	uxth	r2, r2
 8001d68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d74:	e333      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d88:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d032      	beq.n	8001dfa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dcc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f005 fb9f 	bl	8007512 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001de0:	4013      	ands	r3, r2
 8001de2:	823b      	strh	r3, [r7, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	8a3a      	ldrh	r2, [r7, #16]
 8001dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dee:	b292      	uxth	r2, r2
 8001df0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f007 fa64 	bl	80092c0 <HAL_PCD_SetupStageCallback>
 8001df8:	e2f1      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dfa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f280 82ed 	bge.w	80023de <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e10:	4013      	ands	r3, r2
 8001e12:	83fb      	strh	r3, [r7, #30]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	8bfa      	ldrh	r2, [r7, #30]
 8001e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e48:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <PCD_EP_ISR_Handler+0x1ec>
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d015      	beq.n	8001e86 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e60:	6959      	ldr	r1, [r3, #20]
 8001e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e64:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e68:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f005 fb51 	bl	8007512 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	441a      	add	r2, r3
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f007 fa2f 	bl	80092e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 82a3 	bne.w	80023de <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4413      	add	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8001ebe:	d918      	bls.n	8001ef2 <PCD_EP_ISR_Handler+0x258>
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <PCD_EP_ISR_Handler+0x240>
 8001ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	029b      	lsls	r3, r3, #10
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	801a      	strh	r2, [r3, #0]
 8001ef0:	e029      	b.n	8001f46 <PCD_EP_ISR_Handler+0x2ac>
 8001ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d112      	bne.n	8001f20 <PCD_EP_ISR_Handler+0x286>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	801a      	strh	r2, [r3, #0]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e012      	b.n	8001f46 <PCD_EP_ISR_Handler+0x2ac>
 8001f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
 8001f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <PCD_EP_ISR_Handler+0x2a0>
 8001f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f36:	3301      	adds	r3, #1
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
 8001f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	827b      	strh	r3, [r7, #18]
 8001f58:	8a7b      	ldrh	r3, [r7, #18]
 8001f5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f5e:	827b      	strh	r3, [r7, #18]
 8001f60:	8a7b      	ldrh	r3, [r7, #18]
 8001f62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f66:	827b      	strh	r3, [r7, #18]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	8a7b      	ldrh	r3, [r7, #18]
 8001f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8013      	strh	r3, [r2, #0]
 8001f82:	e22c      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f98:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f280 80f6 	bge.w	800218e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fb8:	4013      	ands	r3, r2
 8001fba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fd8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff0:	7b1b      	ldrb	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d123      	bne.n	800203e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	4413      	add	r3, r2
 8002010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800201e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 808e 	beq.w	8002144 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202e:	6959      	ldr	r1, [r3, #20]
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002032:	88da      	ldrh	r2, [r3, #6]
 8002034:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002038:	f005 fa6b 	bl	8007512 <USB_ReadPMA>
 800203c:	e082      	b.n	8002144 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d10a      	bne.n	800205c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002046:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800204a:	461a      	mov	r2, r3
 800204c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9d3 	bl	80023fa <HAL_PCD_EP_DB_Receive>
 8002054:	4603      	mov	r3, r0
 8002056:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800205a:	e073      	b.n	8002144 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002076:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	441a      	add	r2, r3
 8002088:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800208c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d022      	beq.n	8002100 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80020e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d02c      	beq.n	8002144 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f0:	6959      	ldr	r1, [r3, #20]
 80020f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f4:	891a      	ldrh	r2, [r3, #8]
 80020f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80020fa:	f005 fa0a 	bl	8007512 <USB_ReadPMA>
 80020fe:	e021      	b.n	8002144 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4413      	add	r3, r2
 800211a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002124:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002128:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002136:	6959      	ldr	r1, [r3, #20]
 8002138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213a:	895a      	ldrh	r2, [r3, #10]
 800213c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002140:	f005 f9e7 	bl	8007512 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800214c:	441a      	add	r2, r3
 800214e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002150:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800215a:	441a      	add	r2, r3
 800215c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800215e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <PCD_EP_ISR_Handler+0x4da>
 8002168:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800216c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d206      	bcs.n	8002182 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f007 f8b2 	bl	80092e4 <HAL_PCD_DataOutStageCallback>
 8002180:	e005      	b.n	800218e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fd10 	bl	8005bae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800218e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8121 	beq.w	80023de <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800219c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	441a      	add	r2, r3
 80021dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80021ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ee:	78db      	ldrb	r3, [r3, #3]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f000 80a2 	beq.w	800233a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80021f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8093 	beq.w	800232c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002206:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d046      	beq.n	80022a0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d126      	bne.n	8002268 <PCD_EP_ISR_Handler+0x5ce>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	4413      	add	r3, r2
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00da      	lsls	r2, r3, #3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	4413      	add	r3, r2
 800223c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800224c:	b29a      	uxth	r2, r3
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002260:	b29a      	uxth	r2, r3
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	e061      	b.n	800232c <PCD_EP_ISR_Handler+0x692>
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d15d      	bne.n	800232c <PCD_EP_ISR_Handler+0x692>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	4413      	add	r3, r2
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	00da      	lsls	r2, r3, #3
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	4413      	add	r3, r2
 8002292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	2200      	movs	r2, #0
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	e045      	b.n	800232c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d126      	bne.n	80022fc <PCD_EP_ISR_Handler+0x662>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	4413      	add	r3, r2
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
 80022c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	00da      	lsls	r2, r3, #3
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e017      	b.n	800232c <PCD_EP_ISR_Handler+0x692>
 80022fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d113      	bne.n	800232c <PCD_EP_ISR_Handler+0x692>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	4413      	add	r3, r2
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	4413      	add	r3, r2
 8002320:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f006 fff1 	bl	800931a <HAL_PCD_DataInStageCallback>
 8002338:	e051      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800233a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d144      	bne.n	80023d0 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	4413      	add	r3, r2
 8002360:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002376:	429a      	cmp	r2, r3
 8002378:	d907      	bls.n	800238a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800237a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002382:	1ad2      	subs	r2, r2, r3
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	619a      	str	r2, [r3, #24]
 8002388:	e002      	b.n	8002390 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800238a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f006 ffbb 	bl	800931a <HAL_PCD_DataInStageCallback>
 80023a4:	e01b      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80023a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023ae:	441a      	add	r2, r3
 80023b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023bc:	441a      	add	r2, r3
 80023be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fbf0 	bl	8005bae <USB_EPStartXfer>
 80023ce:	e006      	b.n	80023de <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023d4:	461a      	mov	r2, r3
 80023d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f917 	bl	800260c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f6ff ac5a 	blt.w	8001ca4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3758      	adds	r7, #88	; 0x58
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b088      	sub	sp, #32
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d07c      	beq.n	800250c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4413      	add	r3, r2
 800242c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002436:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	8b7b      	ldrh	r3, [r7, #26]
 800243e:	429a      	cmp	r2, r3
 8002440:	d306      	bcc.n	8002450 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	8b7b      	ldrh	r3, [r7, #26]
 8002448:	1ad2      	subs	r2, r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	619a      	str	r2, [r3, #24]
 800244e:	e002      	b.n	8002456 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d123      	bne.n	80024a6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002478:	833b      	strh	r3, [r7, #24]
 800247a:	8b3b      	ldrh	r3, [r7, #24]
 800247c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002480:	833b      	strh	r3, [r7, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	8b3b      	ldrh	r3, [r7, #24]
 8002492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01f      	beq.n	80024f0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	82fb      	strh	r3, [r7, #22]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8085 	beq.w	8002602 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6959      	ldr	r1, [r3, #20]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	891a      	ldrh	r2, [r3, #8]
 8002504:	8b7b      	ldrh	r3, [r7, #26]
 8002506:	f005 f804 	bl	8007512 <USB_ReadPMA>
 800250a:	e07a      	b.n	8002602 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	8b7b      	ldrh	r3, [r7, #26]
 8002538:	429a      	cmp	r2, r3
 800253a:	d306      	bcc.n	800254a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	8b7b      	ldrh	r3, [r7, #26]
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	619a      	str	r2, [r3, #24]
 8002548:	e002      	b.n	8002550 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d123      	bne.n	80025a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	83fb      	strh	r3, [r7, #30]
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800257a:	83fb      	strh	r3, [r7, #30]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	8bfb      	ldrh	r3, [r7, #30]
 800258c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	b29b      	uxth	r3, r3
 800259e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11f      	bne.n	80025ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	83bb      	strh	r3, [r7, #28]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8bbb      	ldrh	r3, [r7, #28]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025ea:	8b7b      	ldrh	r3, [r7, #26]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6959      	ldr	r1, [r3, #20]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	895a      	ldrh	r2, [r3, #10]
 80025fc:	8b7b      	ldrh	r3, [r7, #26]
 80025fe:	f004 ff88 	bl	8007512 <USB_ReadPMA>
    }
  }

  return count;
 8002602:	8b7b      	ldrh	r3, [r7, #26]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0a2      	sub	sp, #136	; 0x88
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 81c5 	beq.w	80029b0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	4413      	add	r3, r2
 8002640:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002656:	429a      	cmp	r2, r3
 8002658:	d907      	bls.n	800266a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	619a      	str	r2, [r3, #24]
 8002668:	e002      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 80b9 	bne.w	80027ec <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	785b      	ldrb	r3, [r3, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d126      	bne.n	80026d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	4413      	add	r3, r2
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00da      	lsls	r2, r3, #3
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	4413      	add	r3, r2
 80026a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e01a      	b.n	8002706 <HAL_PCD_EP_DB_Transmit+0xfa>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d116      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0xfa>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	4413      	add	r3, r2
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00da      	lsls	r2, r3, #3
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	4413      	add	r3, r2
 80026fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	2200      	movs	r2, #0
 8002704:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d126      	bne.n	8002762 <HAL_PCD_EP_DB_Transmit+0x156>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00da      	lsls	r2, r3, #3
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002746:	b29a      	uxth	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275a:	b29a      	uxth	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	e017      	b.n	8002792 <HAL_PCD_EP_DB_Transmit+0x186>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d113      	bne.n	8002792 <HAL_PCD_EP_DB_Transmit+0x186>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	4413      	add	r3, r2
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	00da      	lsls	r2, r3, #3
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	4413      	add	r3, r2
 8002786:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2200      	movs	r2, #0
 8002790:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f006 fdbe 	bl	800931a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 82d2 	beq.w	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c4:	827b      	strh	r3, [r7, #18]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	441a      	add	r2, r3
 80027d4:	8a7b      	ldrh	r3, [r7, #18]
 80027d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	8013      	strh	r3, [r2, #0]
 80027ea:	e2b0      	b.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d021      	beq.n	800283a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002836:	b29b      	uxth	r3, r3
 8002838:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 8284 	bne.w	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800284e:	441a      	add	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800285c:	441a      	add	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d309      	bcc.n	8002882 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287a:	1ad2      	subs	r2, r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	621a      	str	r2, [r3, #32]
 8002880:	e015      	b.n	80028ae <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800288a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002898:	e009      	b.n	80028ae <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d155      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x356>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	4413      	add	r3, r2
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	00da      	lsls	r2, r3, #3
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	4413      	add	r3, r2
 80028d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
 80028de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e0:	2b3e      	cmp	r3, #62	; 0x3e
 80028e2:	d916      	bls.n	8002912 <HAL_PCD_EP_DB_Transmit+0x306>
 80028e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <HAL_PCD_EP_DB_Transmit+0x2ee>
 80028f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f6:	3b01      	subs	r3, #1
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	b29b      	uxth	r3, r3
 8002902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290a:	b29a      	uxth	r2, r3
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e043      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002914:	2b00      	cmp	r3, #0
 8002916:	d112      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x332>
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002922:	b29a      	uxth	r2, r3
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002936:	b29a      	uxth	r2, r3
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	e02d      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x38e>
 800293e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
 8002944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_PCD_EP_DB_Transmit+0x348>
 800294e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002950:	3301      	adds	r3, #1
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48
 8002954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002956:	b29b      	uxth	r3, r3
 8002958:	029b      	lsls	r3, r3, #10
 800295a:	b29a      	uxth	r2, r3
 800295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	e01b      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x38e>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d117      	bne.n	800299a <HAL_PCD_EP_DB_Transmit+0x38e>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	4413      	add	r3, r2
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	00da      	lsls	r2, r3, #3
 8002988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298a:	4413      	add	r3, r2
 800298c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002994:	b29a      	uxth	r2, r3
 8002996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002998:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6959      	ldr	r1, [r3, #20]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	891a      	ldrh	r2, [r3, #8]
 80029a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f004 fd70 	bl	800748e <USB_WritePMA>
 80029ae:	e1ce      	b.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d307      	bcc.n	80029f4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ec:	1ad2      	subs	r2, r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	619a      	str	r2, [r3, #24]
 80029f2:	e002      	b.n	80029fa <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 80c4 	bne.w	8002b8c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d126      	bne.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x44e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a20:	4413      	add	r3, r2
 8002a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	00da      	lsls	r2, r3, #3
 8002a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
 8002a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	e01a      	b.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x484>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d116      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x484>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	673b      	str	r3, [r7, #112]	; 0x70
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a76:	4413      	add	r3, r2
 8002a78:	673b      	str	r3, [r7, #112]	; 0x70
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	00da      	lsls	r2, r3, #3
 8002a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a82:	4413      	add	r3, r2
 8002a84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d12f      	bne.n	8002afe <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00da      	lsls	r2, r3, #3
 8002ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ae2:	801a      	strh	r2, [r3, #0]
 8002ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e017      	b.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x522>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d113      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x522>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b14:	4413      	add	r3, r2
 8002b16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	00da      	lsls	r2, r3, #3
 8002b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b20:	4413      	add	r3, r2
 8002b22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f006 fbf0 	bl	800931a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 8104 	bne.w	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8013      	strh	r3, [r2, #0]
 8002b8a:	e0e0      	b.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d121      	bne.n	8002bda <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 80b4 	bne.w	8002d4e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bee:	441a      	add	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bfc:	441a      	add	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d309      	bcc.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	621a      	str	r2, [r3, #32]
 8002c20:	e015      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d107      	bne.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c2e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c38:	e009      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	663b      	str	r3, [r7, #96]	; 0x60
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d155      	bne.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	4413      	add	r3, r2
 8002c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	00da      	lsls	r2, r3, #3
 8002c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c82:	657b      	str	r3, [r7, #84]	; 0x54
 8002c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c86:	2b3e      	cmp	r3, #62	; 0x3e
 8002c88:	d916      	bls.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	677b      	str	r3, [r7, #116]	; 0x74
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x694>
 8002c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	677b      	str	r3, [r7, #116]	; 0x74
 8002ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	e040      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d112      	bne.n	8002ce4 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce0:	801a      	strh	r2, [r3, #0]
 8002ce2:	e02a      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	677b      	str	r3, [r7, #116]	; 0x74
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	677b      	str	r3, [r7, #116]	; 0x74
 8002cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	029b      	lsls	r3, r3, #10
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	e018      	b.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d114      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d1e:	4413      	add	r3, r2
 8002d20:	663b      	str	r3, [r7, #96]	; 0x60
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6959      	ldr	r1, [r3, #20]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	895a      	ldrh	r2, [r3, #10]
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f004 fba0 	bl	800748e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d68:	823b      	strh	r3, [r7, #16]
 8002d6a:	8a3b      	ldrh	r3, [r7, #16]
 8002d6c:	f083 0310 	eor.w	r3, r3, #16
 8002d70:	823b      	strh	r3, [r7, #16]
 8002d72:	8a3b      	ldrh	r3, [r7, #16]
 8002d74:	f083 0320 	eor.w	r3, r3, #32
 8002d78:	823b      	strh	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	441a      	add	r2, r3
 8002d88:	8a3b      	ldrh	r3, [r7, #16]
 8002d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3788      	adds	r7, #136	; 0x88
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	4613      	mov	r3, r2
 8002db8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e009      	b.n	8002df2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dde:	897a      	ldrh	r2, [r7, #10]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002df2:	893b      	ldrh	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	80da      	strh	r2, [r3, #6]
 8002e06:	e00b      	b.n	8002e20 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d141      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e92:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d131      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea0:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea6:	4a46      	ldr	r2, [pc, #280]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eb8:	4a41      	ldr	r2, [pc, #260]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ec0:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2232      	movs	r2, #50	; 0x32
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9b      	lsrs	r3, r3, #18
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed6:	e002      	b.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d102      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f2      	bne.n	8002ed8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	d158      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e057      	b.n	8002fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f04:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f14:	e04d      	b.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d141      	bne.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f1e:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d131      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2232      	movs	r2, #50	; 0x32
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	0c9b      	lsrs	r3, r3, #18
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f62:	e002      	b.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f76:	d102      	bne.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f2      	bne.n	8002f64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	d112      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e011      	b.n	8002fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fa0:	e007      	b.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	431bde83 	.word	0x431bde83

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e306      	b.n	80035ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d075      	beq.n	80030d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fea:	4b97      	ldr	r3, [pc, #604]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff4:	4b94      	ldr	r3, [pc, #592]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d102      	bne.n	800300a <HAL_RCC_OscConfig+0x3e>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d002      	beq.n	8003010 <HAL_RCC_OscConfig+0x44>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d10b      	bne.n	8003028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	4b8d      	ldr	r3, [pc, #564]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05b      	beq.n	80030d4 <HAL_RCC_OscConfig+0x108>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d157      	bne.n	80030d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e2e1      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	d106      	bne.n	8003040 <HAL_RCC_OscConfig+0x74>
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a84      	ldr	r2, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x98>
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7b      	ldr	r2, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003064:	4b78      	ldr	r3, [pc, #480]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a77      	ldr	r2, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a74      	ldr	r2, [pc, #464]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fd fefa 	bl	8000e7c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308c:	f7fd fef6 	bl	8000e7c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e2a6      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309e:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0xc0>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fd fee6 	bl	8000e7c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fd fee2 	bl	8000e7c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e292      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0xe8>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0x136>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d002      	beq.n	8003108 <HAL_RCC_OscConfig+0x13c>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d11f      	bne.n	8003148 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_OscConfig+0x154>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e265      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	4946      	ldr	r1, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003134:	4b45      	ldr	r3, [pc, #276]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fe53 	bl	8000de4 <HAL_InitTick>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d043      	beq.n	80031cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e251      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd fe8e 	bl	8000e7c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7fd fe8a 	bl	8000e7c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e23a      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	492d      	ldr	r1, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
 8003196:	e01a      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800319e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fe6a 	bl	8000e7c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fd fe66 	bl	8000e7c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e216      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1e0>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d041      	beq.n	800325e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01c      	beq.n	800321c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fd fe43 	bl	8000e7c <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fd fe3f 	bl	8000e7c <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1ef      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ef      	beq.n	80031fa <HAL_RCC_OscConfig+0x22e>
 800321a:	e020      	b.n	800325e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd fe26 	bl	8000e7c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003232:	e00d      	b.n	8003250 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fd fe22 	bl	8000e7c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d906      	bls.n	8003250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1d2      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003250:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ea      	bne.n	8003234 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a6 	beq.w	80033b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003270:	4b84      	ldr	r3, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x2b4>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x2b6>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	4a7e      	ldr	r2, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
 8003292:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	4b79      	ldr	r3, [pc, #484]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ae:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fd fddf 	bl	8000e7c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fd fddb 	bl	8000e7c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e18b      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	4b6c      	ldr	r3, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_RCC_OscConfig+0x32e>
 80032e8:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a65      	ldr	r2, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f8:	e024      	b.n	8003344 <HAL_RCC_OscConfig+0x378>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d110      	bne.n	8003324 <HAL_RCC_OscConfig+0x358>
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4a5e      	ldr	r2, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	4a5a      	ldr	r2, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003322:	e00f      	b.n	8003344 <HAL_RCC_OscConfig+0x378>
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd fd96 	bl	8000e7c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fd fd92 	bl	8000e7c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e140      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ed      	beq.n	8003354 <HAL_RCC_OscConfig+0x388>
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd fd7f 	bl	8000e7c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd fd7b 	bl	8000e7c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e129      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ed      	bne.n	8003382 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	4a34      	ldr	r2, [pc, #208]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01c      	beq.n	8003406 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d2:	4a2c      	ldr	r2, [pc, #176]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fd fd4e 	bl	8000e7c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e4:	f7fd fd4a 	bl	8000e7c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0fa      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x418>
 8003404:	e01b      	b.n	800343e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fd fd31 	bl	8000e7c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341e:	f7fd fd2d 	bl	8000e7c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0dd      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80d1 	beq.w	80035ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b0c      	cmp	r3, #12
 8003452:	f000 808b 	beq.w	800356c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d15e      	bne.n	800351c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fd fd07 	bl	8000e7c <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003470:	e00c      	b.n	800348c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fd fd03 	bl	8000e7c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d905      	bls.n	800348c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0b3      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ec      	bne.n	8003472 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x62c>)
 800349e:	4013      	ands	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a11      	ldr	r1, [r2, #32]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034b2:	0212      	lsls	r2, r2, #8
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0552      	lsls	r2, r2, #21
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c6:	0852      	lsrs	r2, r2, #1
 80034c8:	3a01      	subs	r2, #1
 80034ca:	0652      	lsls	r2, r2, #25
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034d2:	06d2      	lsls	r2, r2, #27
 80034d4:	430a      	orrs	r2, r1
 80034d6:	4947      	ldr	r1, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a44      	ldr	r2, [pc, #272]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e8:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fcc2 	bl	8000e7c <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fd fcbe 	bl	8000e7c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e06e      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x530>
 800351a:	e066      	b.n	80035ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800353a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fc9a 	bl	8000e7c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fd fc96 	bl	8000e7c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e046      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x580>
 800356a:	e03e      	b.n	80035ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e039      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCC_OscConfig+0x628>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	429a      	cmp	r2, r3
 800358a:	d12c      	bne.n	80035e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	3b01      	subs	r3, #1
 8003598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d123      	bne.n	80035e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d11b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d113      	bne.n	80035e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	3b01      	subs	r3, #1
 80035cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	3b01      	subs	r3, #1
 80035e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	019f800c 	.word	0x019f800c

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e11e      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b91      	ldr	r3, [pc, #580]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d910      	bls.n	8003644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b8e      	ldr	r3, [pc, #568]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 020f 	bic.w	r2, r3, #15
 800362a:	498c      	ldr	r1, [pc, #560]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b8a      	ldr	r3, [pc, #552]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e106      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d073      	beq.n	8003738 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d129      	bne.n	80036ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0f4      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003668:	f000 f966 	bl	8003938 <RCC_GetSysClockFreqFromPLLSource>
 800366c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4a7c      	ldr	r2, [pc, #496]	; (8003864 <HAL_RCC_ClockConfig+0x268>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d93f      	bls.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003676:	4b7a      	ldr	r3, [pc, #488]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800368a:	2b00      	cmp	r3, #0
 800368c:	d033      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d12f      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369e:	4a70      	ldr	r2, [pc, #448]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e024      	b.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0c6      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c4:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0be      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036d4:	f000 f8ce 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4a61      	ldr	r2, [pc, #388]	; (8003864 <HAL_RCC_ClockConfig+0x268>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d909      	bls.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036e2:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ea:	4a5d      	ldr	r2, [pc, #372]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4957      	ldr	r1, [pc, #348]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fd fbb8 	bl	8000e7c <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fd fbb4 	bl	8000e7c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e095      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a42      	ldr	r2, [pc, #264]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800375a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003768:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4936      	ldr	r1, [pc, #216]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
 800378a:	e008      	b.n	800379e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d105      	bne.n	800379e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003792:	4b33      	ldr	r3, [pc, #204]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379e:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d21d      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 020f 	bic.w	r2, r3, #15
 80037b4:	4929      	ldr	r1, [pc, #164]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037bc:	f7fd fb5e 	bl	8000e7c <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fd fb5a 	bl	8000e7c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e03b      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x260>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1ed      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4917      	ldr	r1, [pc, #92]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490f      	ldr	r1, [pc, #60]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003826:	f000 f825 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 800382a:	4602      	mov	r2, r0
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_RCC_ClockConfig+0x264>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	490c      	ldr	r1, [pc, #48]	; (8003868 <HAL_RCC_ClockConfig+0x26c>)
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd faca 	bl	8000de4 <HAL_InitTick>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	04c4b400 	.word	0x04c4b400
 8003868:	0800990c 	.word	0x0800990c
 800386c:	20000000 	.word	0x20000000
 8003870:	20000004 	.word	0x20000004

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b04      	cmp	r3, #4
 8003884:	d102      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003886:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e047      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d102      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	e03e      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d136      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3301      	adds	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d2:	68d2      	ldr	r2, [r2, #12]
 80038d4:	0a12      	lsrs	r2, r2, #8
 80038d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	617b      	str	r3, [r7, #20]
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038e2:	4a13      	ldr	r2, [pc, #76]	; (8003930 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	4a10      	ldr	r2, [pc, #64]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0a12      	lsrs	r2, r2, #8
 80038f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
      break;
 80038fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0e5b      	lsrs	r3, r3, #25
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e001      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800391c:	693b      	ldr	r3, [r7, #16]
}
 800391e:	4618      	mov	r0, r3
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d10c      	bne.n	8003976 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003966:	68d2      	ldr	r2, [r2, #12]
 8003968:	0a12      	lsrs	r2, r2, #8
 800396a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	617b      	str	r3, [r7, #20]
    break;
 8003974:	e00c      	b.n	8003990 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003976:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	0a12      	lsrs	r2, r2, #8
 8003984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]
    break;
 800398e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	0e5b      	lsrs	r3, r3, #25
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039aa:	687b      	ldr	r3, [r7, #4]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40021000 	.word	0x40021000
 80039bc:	007a1200 	.word	0x007a1200
 80039c0:	00f42400 	.word	0x00f42400

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d0:	2300      	movs	r3, #0
 80039d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8098 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b40      	ldr	r3, [pc, #256]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	4a3f      	ldr	r2, [pc, #252]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
 80039fe:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a0e:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a39      	ldr	r2, [pc, #228]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a1a:	f7fd fa2f 	bl	8000e7c <HAL_GetTick>
 8003a1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a20:	e009      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fd fa2b 	bl	8000e7c <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d902      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	74fb      	strb	r3, [r7, #19]
        break;
 8003a34:	e005      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a36:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ef      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d159      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01e      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d019      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a90:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd f9eb 	bl	8000e7c <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fd f9e7 	bl	8000e7c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d902      	bls.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ec      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	4903      	ldr	r1, [pc, #12]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aec:	e008      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	74bb      	strb	r3, [r7, #18]
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b00:	7c7b      	ldrb	r3, [r7, #17]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4ba6      	ldr	r3, [pc, #664]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	4aa5      	ldr	r2, [pc, #660]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b1e:	4ba0      	ldr	r3, [pc, #640]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f023 0203 	bic.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	499c      	ldr	r1, [pc, #624]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b40:	4b97      	ldr	r3, [pc, #604]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f023 020c 	bic.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4994      	ldr	r1, [pc, #592]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b62:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	498b      	ldr	r1, [pc, #556]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b84:	4b86      	ldr	r3, [pc, #536]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	4983      	ldr	r1, [pc, #524]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba6:	4b7e      	ldr	r3, [pc, #504]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	497a      	ldr	r1, [pc, #488]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc8:	4b75      	ldr	r3, [pc, #468]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	4972      	ldr	r1, [pc, #456]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4969      	ldr	r1, [pc, #420]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c0c:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4961      	ldr	r1, [pc, #388]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2e:	4b5c      	ldr	r3, [pc, #368]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	4958      	ldr	r1, [pc, #352]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c50:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	4950      	ldr	r1, [pc, #320]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c70:	4b4b      	ldr	r3, [pc, #300]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a4a      	ldr	r2, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c88:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4942      	ldr	r1, [pc, #264]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca8:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4934      	ldr	r1, [pc, #208]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a2e      	ldr	r2, [pc, #184]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	4926      	ldr	r1, [pc, #152]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	4918      	ldr	r1, [pc, #96]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	490a      	ldr	r1, [pc, #40]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e049      	b.n	8003e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc ff04 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fc40 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e04a      	b.n	8003f02 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d013      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d115      	bne.n	8003eec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d015      	beq.n	8003efe <HAL_TIM_Base_Start_IT+0xaa>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d011      	beq.n	8003efe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	e008      	b.n	8003efe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	00010007 	.word	0x00010007

08003f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e049      	b.n	8003fce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fc fd6a 	bl	8000a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fb7e 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_TIM_PWM_Start+0x24>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e03c      	b.n	8004076 <HAL_TIM_PWM_Start+0x9e>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d109      	bne.n	8004016 <HAL_TIM_PWM_Start+0x3e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e02f      	b.n	8004076 <HAL_TIM_PWM_Start+0x9e>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d109      	bne.n	8004030 <HAL_TIM_PWM_Start+0x58>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e022      	b.n	8004076 <HAL_TIM_PWM_Start+0x9e>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d109      	bne.n	800404a <HAL_TIM_PWM_Start+0x72>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e015      	b.n	8004076 <HAL_TIM_PWM_Start+0x9e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b10      	cmp	r3, #16
 800404e:	d109      	bne.n	8004064 <HAL_TIM_PWM_Start+0x8c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e008      	b.n	8004076 <HAL_TIM_PWM_Start+0x9e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e097      	b.n	80041ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xb6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	e023      	b.n	80040d6 <HAL_TIM_PWM_Start+0xfe>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b04      	cmp	r3, #4
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0xc6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	e01b      	b.n	80040d6 <HAL_TIM_PWM_Start+0xfe>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xd6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	e013      	b.n	80040d6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b0c      	cmp	r3, #12
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xe6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040bc:	e00b      	b.n	80040d6 <HAL_TIM_PWM_Start+0xfe>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0xf6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040cc:	e003      	b.n	80040d6 <HAL_TIM_PWM_Start+0xfe>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fe48 	bl	8004d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a33      	ldr	r2, [pc, #204]	; (80041b8 <HAL_TIM_PWM_Start+0x1e0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_TIM_PWM_Start+0x13e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a32      	ldr	r2, [pc, #200]	; (80041bc <HAL_TIM_PWM_Start+0x1e4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_TIM_PWM_Start+0x13e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <HAL_TIM_PWM_Start+0x1e8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_TIM_PWM_Start+0x13e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2f      	ldr	r2, [pc, #188]	; (80041c4 <HAL_TIM_PWM_Start+0x1ec>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIM_PWM_Start+0x13e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2d      	ldr	r2, [pc, #180]	; (80041c8 <HAL_TIM_PWM_Start+0x1f0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_Start+0x142>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_TIM_PWM_Start+0x144>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <HAL_TIM_PWM_Start+0x1e0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d018      	beq.n	800416c <HAL_TIM_PWM_Start+0x194>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d013      	beq.n	800416c <HAL_TIM_PWM_Start+0x194>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a20      	ldr	r2, [pc, #128]	; (80041cc <HAL_TIM_PWM_Start+0x1f4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIM_PWM_Start+0x194>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <HAL_TIM_PWM_Start+0x1f8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIM_PWM_Start+0x194>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a17      	ldr	r2, [pc, #92]	; (80041bc <HAL_TIM_PWM_Start+0x1e4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_PWM_Start+0x194>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <HAL_TIM_PWM_Start+0x1e8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d115      	bne.n	8004198 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_TIM_PWM_Start+0x1fc>)
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d015      	beq.n	80041aa <HAL_TIM_PWM_Start+0x1d2>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d011      	beq.n	80041aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e008      	b.n	80041aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e000      	b.n	80041ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40013400 	.word	0x40013400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	00010007 	.word	0x00010007

080041d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e097      	b.n	800431c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fc fc45 	bl	8000a90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800421c:	f023 0307 	bic.w	r3, r3, #7
 8004220:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f000 fa1b 	bl	8004668 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	4313      	orrs	r3, r2
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004278:	f023 030c 	bic.w	r3, r3, #12
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4313      	orrs	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	011a      	lsls	r2, r3, #4
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	031b      	lsls	r3, r3, #12
 80042a8:	4313      	orrs	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	4313      	orrs	r3, r2
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004334:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800433c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004344:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800434c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d102      	bne.n	8004360 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800435a:	7b7b      	ldrb	r3, [r7, #13]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d001      	beq.n	8004364 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e069      	b.n	8004438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004374:	e031      	b.n	80043da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d110      	bne.n	800439e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800437c:	7bbb      	ldrb	r3, [r7, #14]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d102      	bne.n	8004388 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004382:	7b3b      	ldrb	r3, [r7, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e055      	b.n	8004438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800439c:	e01d      	b.n	80043da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d108      	bne.n	80043b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043a4:	7bbb      	ldrb	r3, [r7, #14]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043aa:	7b7b      	ldrb	r3, [r7, #13]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043b0:	7b3b      	ldrb	r3, [r7, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e03e      	b.n	8004438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_TIM_Encoder_Start+0xc4>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d008      	beq.n	80043f8 <HAL_TIM_Encoder_Start+0xd4>
 80043e6:	e00f      	b.n	8004408 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fcbf 	bl	8004d74 <TIM_CCxChannelCmd>
      break;
 80043f6:	e016      	b.n	8004426 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2201      	movs	r2, #1
 80043fe:	2104      	movs	r1, #4
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fcb7 	bl	8004d74 <TIM_CCxChannelCmd>
      break;
 8004406:	e00e      	b.n	8004426 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fcaf 	bl	8004d74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	2104      	movs	r1, #4
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fca8 	bl	8004d74 <TIM_CCxChannelCmd>
      break;
 8004424:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800445a:	2302      	movs	r3, #2
 800445c:	e0ff      	b.n	800465e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b14      	cmp	r3, #20
 800446a:	f200 80f0 	bhi.w	800464e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044c9 	.word	0x080044c9
 8004478:	0800464f 	.word	0x0800464f
 800447c:	0800464f 	.word	0x0800464f
 8004480:	0800464f 	.word	0x0800464f
 8004484:	08004509 	.word	0x08004509
 8004488:	0800464f 	.word	0x0800464f
 800448c:	0800464f 	.word	0x0800464f
 8004490:	0800464f 	.word	0x0800464f
 8004494:	0800454b 	.word	0x0800454b
 8004498:	0800464f 	.word	0x0800464f
 800449c:	0800464f 	.word	0x0800464f
 80044a0:	0800464f 	.word	0x0800464f
 80044a4:	0800458b 	.word	0x0800458b
 80044a8:	0800464f 	.word	0x0800464f
 80044ac:	0800464f 	.word	0x0800464f
 80044b0:	0800464f 	.word	0x0800464f
 80044b4:	080045cd 	.word	0x080045cd
 80044b8:	0800464f 	.word	0x0800464f
 80044bc:	0800464f 	.word	0x0800464f
 80044c0:	0800464f 	.word	0x0800464f
 80044c4:	0800460d 	.word	0x0800460d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f95a 	bl	8004788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6999      	ldr	r1, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	619a      	str	r2, [r3, #24]
      break;
 8004506:	e0a5      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9ca 	bl	80048a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]
      break;
 8004548:	e084      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fa33 	bl	80049bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0208 	orr.w	r2, r2, #8
 8004564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0204 	bic.w	r2, r2, #4
 8004574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69d9      	ldr	r1, [r3, #28]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	61da      	str	r2, [r3, #28]
      break;
 8004588:	e064      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa9b 	bl	8004acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	61da      	str	r2, [r3, #28]
      break;
 80045ca:	e043      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb04 	bl	8004be0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800460a:	e023      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb48 	bl	8004ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004626:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004636:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800464c:	e002      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]
      break;
 8004652:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800465c:	7dfb      	ldrb	r3, [r7, #23]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3c      	ldr	r2, [pc, #240]	; (800476c <TIM_Base_SetConfig+0x104>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00f      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d00b      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a39      	ldr	r2, [pc, #228]	; (8004770 <TIM_Base_SetConfig+0x108>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d007      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a38      	ldr	r2, [pc, #224]	; (8004774 <TIM_Base_SetConfig+0x10c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a37      	ldr	r2, [pc, #220]	; (8004778 <TIM_Base_SetConfig+0x110>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d108      	bne.n	80046b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2d      	ldr	r2, [pc, #180]	; (800476c <TIM_Base_SetConfig+0x104>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01b      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d017      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <TIM_Base_SetConfig+0x108>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a29      	ldr	r2, [pc, #164]	; (8004774 <TIM_Base_SetConfig+0x10c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a28      	ldr	r2, [pc, #160]	; (8004778 <TIM_Base_SetConfig+0x110>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a27      	ldr	r2, [pc, #156]	; (800477c <TIM_Base_SetConfig+0x114>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <TIM_Base_SetConfig+0x118>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a25      	ldr	r2, [pc, #148]	; (8004784 <TIM_Base_SetConfig+0x11c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d108      	bne.n	8004704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a10      	ldr	r2, [pc, #64]	; (800476c <TIM_Base_SetConfig+0x104>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00f      	beq.n	8004750 <TIM_Base_SetConfig+0xe8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a11      	ldr	r2, [pc, #68]	; (8004778 <TIM_Base_SetConfig+0x110>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0xe8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <TIM_Base_SetConfig+0x114>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0xe8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <TIM_Base_SetConfig+0x118>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0xe8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a0e      	ldr	r2, [pc, #56]	; (8004784 <TIM_Base_SetConfig+0x11c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d103      	bne.n	8004758 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	615a      	str	r2, [r3, #20]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40013400 	.word	0x40013400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <TIM_OC1_SetConfig+0x10c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <TIM_OC1_SetConfig+0x110>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2a      	ldr	r2, [pc, #168]	; (800489c <TIM_OC1_SetConfig+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <TIM_OC1_SetConfig+0x118>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC1_SetConfig+0x80>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <TIM_OC1_SetConfig+0x11c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10c      	bne.n	8004822 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0308 	bic.w	r3, r3, #8
 800480e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <TIM_OC1_SetConfig+0x10c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00f      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <TIM_OC1_SetConfig+0x110>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <TIM_OC1_SetConfig+0x114>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <TIM_OC1_SetConfig+0x118>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC1_SetConfig+0xc2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a17      	ldr	r2, [pc, #92]	; (80048a4 <TIM_OC1_SetConfig+0x11c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d111      	bne.n	800486e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	621a      	str	r2, [r3, #32]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800

080048a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0210 	bic.w	r2, r3, #16
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <TIM_OC2_SetConfig+0x100>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC2_SetConfig+0x6c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a27      	ldr	r2, [pc, #156]	; (80049ac <TIM_OC2_SetConfig+0x104>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10d      	bne.n	8004930 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <TIM_OC2_SetConfig+0x100>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <TIM_OC2_SetConfig+0x104>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <TIM_OC2_SetConfig+0x108>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <TIM_OC2_SetConfig+0x10c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_OC2_SetConfig+0xb0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <TIM_OC2_SetConfig+0x110>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d113      	bne.n	8004980 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40013400 	.word	0x40013400
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800

080049bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <TIM_OC3_SetConfig+0xfc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_OC3_SetConfig+0x6a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a26      	ldr	r2, [pc, #152]	; (8004abc <TIM_OC3_SetConfig+0x100>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d10d      	bne.n	8004a42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <TIM_OC3_SetConfig+0xfc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00f      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <TIM_OC3_SetConfig+0x100>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <TIM_OC3_SetConfig+0x104>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <TIM_OC3_SetConfig+0x108>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC3_SetConfig+0xae>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <TIM_OC3_SetConfig+0x10c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d113      	bne.n	8004a92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <TIM_OC4_SetConfig+0x100>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC4_SetConfig+0x6c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <TIM_OC4_SetConfig+0x104>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10d      	bne.n	8004b54 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <TIM_OC4_SetConfig+0x100>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_OC4_SetConfig+0xb0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <TIM_OC4_SetConfig+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_OC4_SetConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <TIM_OC4_SetConfig+0x108>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_OC4_SetConfig+0xb0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <TIM_OC4_SetConfig+0x10c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_OC4_SetConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <TIM_OC4_SetConfig+0x110>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d113      	bne.n	8004ba4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	019b      	lsls	r3, r3, #6
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800

08004be0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <TIM_OC5_SetConfig+0xb4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <TIM_OC5_SetConfig+0xb8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <TIM_OC5_SetConfig+0xbc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <TIM_OC5_SetConfig+0xc0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_OC5_SetConfig+0x7a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <TIM_OC5_SetConfig+0xc4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d109      	bne.n	8004c6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	051b      	lsls	r3, r3, #20
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <TIM_OC6_SetConfig+0xb8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00f      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <TIM_OC6_SetConfig+0xbc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <TIM_OC6_SetConfig+0xc0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <TIM_OC6_SetConfig+0xc4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC6_SetConfig+0x7c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <TIM_OC6_SetConfig+0xc8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d109      	bne.n	8004d38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800

08004d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 031f 	and.w	r3, r3, #31
 8004d86:	2201      	movs	r2, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1a      	ldr	r2, [r3, #32]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1a      	ldr	r2, [r3, #32]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e065      	b.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d013      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a12      	ldr	r2, [pc, #72]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d10c      	bne.n	8004e92 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40013400 	.word	0x40013400
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40014000 	.word	0x40014000

08004ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e087      	b.n	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a25      	ldr	r2, [pc, #148]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1e      	ldr	r2, [pc, #120]	; (8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d126      	bne.n	8004fde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	051b      	lsls	r3, r3, #20
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d106      	bne.n	8004fde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40013400 	.word	0x40013400

08005004 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005014:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005018:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	b29a      	uxth	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800503a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800503e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	b29b      	uxth	r3, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	b29b      	uxth	r3, r3
 8005050:	4013      	ands	r3, r2
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005068:	b084      	sub	sp, #16
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	f107 0014 	add.w	r0, r7, #20
 8005076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	b004      	add	sp, #16
 80050a8:	4770      	bx	lr
	...

080050ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b09d      	sub	sp, #116	; 0x74
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	78db      	ldrb	r3, [r3, #3]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d81f      	bhi.n	800511e <USB_ActivateEndpoint+0x72>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <USB_ActivateEndpoint+0x38>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005127 	.word	0x08005127
 80050f0:	08005103 	.word	0x08005103
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005100:	e012      	b.n	8005128 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005102:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005106:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800510a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800510e:	e00b      	b.n	8005128 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005110:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005118:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800511c:	e004      	b.n	8005128 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005124:	e000      	b.n	8005128 <USB_ActivateEndpoint+0x7c>
      break;
 8005126:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	b21b      	sxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	b21a      	sxth	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b21b      	sxth	r3, r3
 800516a:	4313      	orrs	r3, r2
 800516c:	b21b      	sxth	r3, r3
 800516e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	7b1b      	ldrb	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 8149 	bne.w	8005430 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8084 	beq.w	80052b0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	4413      	add	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	00da      	lsls	r2, r3, #3
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	88db      	ldrh	r3, [r3, #6]
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	827b      	strh	r3, [r7, #18]
 80051ea:	8a7b      	ldrh	r3, [r7, #18]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <USB_ActivateEndpoint+0x180>
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	823b      	strh	r3, [r7, #16]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	8a3b      	ldrh	r3, [r7, #16]
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	78db      	ldrb	r3, [r3, #3]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d020      	beq.n	8005276 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524a:	81bb      	strh	r3, [r7, #12]
 800524c:	89bb      	ldrh	r3, [r7, #12]
 800524e:	f083 0320 	eor.w	r3, r3, #32
 8005252:	81bb      	strh	r3, [r7, #12]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	441a      	add	r2, r3
 800525e:	89bb      	ldrh	r3, [r7, #12]
 8005260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	b29b      	uxth	r3, r3
 8005272:	8013      	strh	r3, [r2, #0]
 8005274:	e2a6      	b.n	80057c4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528c:	81fb      	strh	r3, [r7, #14]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]
 80052ae:	e289      	b.n	80057c4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	4413      	add	r3, r2
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	00da      	lsls	r2, r3, #3
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	88db      	ldrh	r3, [r3, #6]
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	b29b      	uxth	r3, r3
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	4413      	add	r3, r2
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	00da      	lsls	r2, r3, #3
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	4413      	add	r3, r2
 8005302:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2b3e      	cmp	r3, #62	; 0x3e
 800530e:	d918      	bls.n	8005342 <USB_ActivateEndpoint+0x296>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	66bb      	str	r3, [r7, #104]	; 0x68
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <USB_ActivateEndpoint+0x27e>
 8005324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005326:	3b01      	subs	r3, #1
 8005328:	66bb      	str	r3, [r7, #104]	; 0x68
 800532a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800532c:	b29b      	uxth	r3, r3
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	b29b      	uxth	r3, r3
 8005332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533a:	b29a      	uxth	r2, r3
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e029      	b.n	8005396 <USB_ActivateEndpoint+0x2ea>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d112      	bne.n	8005370 <USB_ActivateEndpoint+0x2c4>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005354:	b29a      	uxth	r2, r3
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005368:	b29a      	uxth	r2, r3
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e012      	b.n	8005396 <USB_ActivateEndpoint+0x2ea>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	66bb      	str	r3, [r7, #104]	; 0x68
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <USB_ActivateEndpoint+0x2de>
 8005384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005386:	3301      	adds	r3, #1
 8005388:	66bb      	str	r3, [r7, #104]	; 0x68
 800538a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800538c:	b29b      	uxth	r3, r3
 800538e:	029b      	lsls	r3, r3, #10
 8005390:	b29a      	uxth	r2, r3
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80053a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <USB_ActivateEndpoint+0x33a>
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	843b      	strh	r3, [r7, #32]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	8c3b      	ldrh	r3, [r7, #32]
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fc:	83fb      	strh	r3, [r7, #30]
 80053fe:	8bfb      	ldrh	r3, [r7, #30]
 8005400:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005404:	83fb      	strh	r3, [r7, #30]
 8005406:	8bfb      	ldrh	r3, [r7, #30]
 8005408:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800540c:	83fb      	strh	r3, [r7, #30]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8bfb      	ldrh	r3, [r7, #30]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
 800542e:	e1c9      	b.n	80057c4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	78db      	ldrb	r3, [r3, #3]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d11e      	bne.n	8005476 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005468:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800546c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005470:	b29b      	uxth	r3, r3
 8005472:	8013      	strh	r3, [r2, #0]
 8005474:	e01d      	b.n	80054b2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c2:	4413      	add	r3, r2
 80054c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	00da      	lsls	r2, r3, #3
 80054cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	891b      	ldrh	r3, [r3, #8]
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	b29b      	uxth	r3, r3
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f6:	4413      	add	r3, r2
 80054f8:	657b      	str	r3, [r7, #84]	; 0x54
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	00da      	lsls	r2, r3, #3
 8005500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005502:	4413      	add	r3, r2
 8005504:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005508:	653b      	str	r3, [r7, #80]	; 0x50
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	895b      	ldrh	r3, [r3, #10]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	b29b      	uxth	r3, r3
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005518:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 8093 	bne.w	800564a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005534:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <USB_ActivateEndpoint+0x4cc>
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005586:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <USB_ActivateEndpoint+0x51c>
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	873b      	strh	r3, [r7, #56]	; 0x38
 80055e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80055e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005626:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
 8005648:	e0bc      	b.n	80057c4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800565a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800565e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01d      	beq.n	80056a2 <USB_ActivateEndpoint+0x5f6>
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800569a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01d      	beq.n	80056fa <USB_ActivateEndpoint+0x64e>
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	78db      	ldrb	r3, [r3, #3]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d024      	beq.n	800574c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005718:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800571c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005720:	f083 0320 	eor.w	r3, r3, #32
 8005724:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	e01d      	b.n	8005788 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005762:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80057c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3774      	adds	r7, #116	; 0x74
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b08d      	sub	sp, #52	; 0x34
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	7b1b      	ldrb	r3, [r3, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 808e 	bne.w	8005904 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d044      	beq.n	800587a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	81bb      	strh	r3, [r7, #12]
 80057fe:	89bb      	ldrh	r3, [r7, #12]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <USB_DeactivateEndpoint+0x6c>
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	817b      	strh	r3, [r7, #10]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	897b      	ldrh	r3, [r7, #10]
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005838:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005856:	813b      	strh	r3, [r7, #8]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	893b      	ldrh	r3, [r7, #8]
 8005864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005874:	b29b      	uxth	r3, r3
 8005876:	8013      	strh	r3, [r2, #0]
 8005878:	e192      	b.n	8005ba0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	827b      	strh	r3, [r7, #18]
 8005888:	8a7b      	ldrh	r3, [r7, #18]
 800588a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01b      	beq.n	80058ca <USB_DeactivateEndpoint+0xf6>
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a8:	823b      	strh	r3, [r7, #16]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	8a3b      	ldrh	r3, [r7, #16]
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	81fb      	strh	r3, [r7, #14]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	441a      	add	r2, r3
 80058ec:	89fb      	ldrh	r3, [r7, #14]
 80058ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8013      	strh	r3, [r2, #0]
 8005902:	e14d      	b.n	8005ba0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f040 80a5 	bne.w	8005a58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	843b      	strh	r3, [r7, #32]
 800591c:	8c3b      	ldrh	r3, [r7, #32]
 800591e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01b      	beq.n	800595e <USB_DeactivateEndpoint+0x18a>
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	83fb      	strh	r3, [r7, #30]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	8bfb      	ldrh	r3, [r7, #30]
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	83bb      	strh	r3, [r7, #28]
 800596c:	8bbb      	ldrh	r3, [r7, #28]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01b      	beq.n	80059ae <USB_DeactivateEndpoint+0x1da>
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	837b      	strh	r3, [r7, #26]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	8b7b      	ldrh	r3, [r7, #26]
 800599a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c4:	833b      	strh	r3, [r7, #24]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	8b3b      	ldrh	r3, [r7, #24]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	82fb      	strh	r3, [r7, #22]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	8afb      	ldrh	r3, [r7, #22]
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a34:	82bb      	strh	r3, [r7, #20]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	8abb      	ldrh	r3, [r7, #20]
 8005a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	8013      	strh	r3, [r2, #0]
 8005a56:	e0a3      	b.n	8005ba0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <USB_DeactivateEndpoint+0x2d4>
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	441a      	add	r2, r3
 8005a92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ab6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <USB_DeactivateEndpoint+0x324>
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3734      	adds	r7, #52	; 0x34
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b0c2      	sub	sp, #264	; 0x108
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbc:	6018      	str	r0, [r3, #0]
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	f040 867b 	bne.w	80068d0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d908      	bls.n	8005c08 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c06:	e007      	b.n	8005c18 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	7b1b      	ldrb	r3, [r3, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d13a      	bne.n	8005c9e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6959      	ldr	r1, [r3, #20]
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	88da      	ldrh	r2, [r3, #6]
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c4e:	6800      	ldr	r0, [r0, #0]
 8005c50:	f001 fc1d 	bl	800748e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	00da      	lsls	r2, r3, #3
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	f000 bde3 	b.w	8006864 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	f040 843a 	bne.w	8006524 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	f240 83b7 	bls.w	800643c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 81b3 	beq.w	80060d6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d16d      	bne.n	8005e68 <USB_EPStartXfer+0x2ba>
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	4413      	add	r3, r2
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	00da      	lsls	r2, r3, #3
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005dce:	d91c      	bls.n	8005e0a <USB_EPStartXfer+0x25c>
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <USB_EPStartXfer+0x242>
 8005de6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dea:	3b01      	subs	r3, #1
 8005dec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005df0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	029b      	lsls	r3, r3, #10
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e053      	b.n	8005eb2 <USB_EPStartXfer+0x304>
 8005e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d112      	bne.n	8005e38 <USB_EPStartXfer+0x28a>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e03c      	b.n	8005eb2 <USB_EPStartXfer+0x304>
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <USB_EPStartXfer+0x2aa>
 8005e4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e52:	3301      	adds	r3, #1
 8005e54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e024      	b.n	8005eb2 <USB_EPStartXfer+0x304>
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d11c      	bne.n	8005eb2 <USB_EPStartXfer+0x304>
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	4413      	add	r3, r2
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	895b      	ldrh	r3, [r3, #10]
 8005ebe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6959      	ldr	r1, [r3, #20]
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ed8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005edc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ee0:	6800      	ldr	r0, [r0, #0]
 8005ee2:	f001 fad4 	bl	800748e <USB_WritePMA>
            ep->xfer_buff += len;
 8005ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef6:	441a      	add	r2, r3
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d90f      	bls.n	8005f40 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	1ad2      	subs	r2, r2, r3
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	621a      	str	r2, [r3, #32]
 8005f3e:	e00e      	b.n	8005f5e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d16d      	bne.n	800604a <USB_EPStartXfer+0x49c>
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	4413      	add	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	00da      	lsls	r2, r3, #3
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fae:	2b3e      	cmp	r3, #62	; 0x3e
 8005fb0:	d91c      	bls.n	8005fec <USB_EPStartXfer+0x43e>
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <USB_EPStartXfer+0x424>
 8005fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	029b      	lsls	r3, r3, #10
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e059      	b.n	80060a0 <USB_EPStartXfer+0x4f2>
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d112      	bne.n	800601a <USB_EPStartXfer+0x46c>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006012:	b29a      	uxth	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e042      	b.n	80060a0 <USB_EPStartXfer+0x4f2>
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <USB_EPStartXfer+0x48c>
 8006030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006034:	3301      	adds	r3, #1
 8006036:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800603a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800603e:	b29b      	uxth	r3, r3
 8006040:	029b      	lsls	r3, r3, #10
 8006042:	b29a      	uxth	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e02a      	b.n	80060a0 <USB_EPStartXfer+0x4f2>
 800604a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d122      	bne.n	80060a0 <USB_EPStartXfer+0x4f2>
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	623b      	str	r3, [r7, #32]
 8006066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006074:	b29b      	uxth	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	4413      	add	r3, r2
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	00da      	lsls	r2, r3, #3
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	4413      	add	r3, r2
 8006090:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	b29a      	uxth	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	891b      	ldrh	r3, [r3, #8]
 80060ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6959      	ldr	r1, [r3, #20]
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060ce:	6800      	ldr	r0, [r0, #0]
 80060d0:	f001 f9dd 	bl	800748e <USB_WritePMA>
 80060d4:	e3c6      	b.n	8006864 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d16d      	bne.n	80061c2 <USB_EPStartXfer+0x614>
 80060e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006106:	4413      	add	r3, r2
 8006108:	64bb      	str	r3, [r7, #72]	; 0x48
 800610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	00da      	lsls	r2, r3, #3
 8006118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611a:	4413      	add	r3, r2
 800611c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006120:	647b      	str	r3, [r7, #68]	; 0x44
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006126:	2b3e      	cmp	r3, #62	; 0x3e
 8006128:	d91c      	bls.n	8006164 <USB_EPStartXfer+0x5b6>
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <USB_EPStartXfer+0x59c>
 8006140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006144:	3b01      	subs	r3, #1
 8006146:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800614a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29b      	uxth	r3, r3
 8006154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615c:	b29a      	uxth	r2, r3
 800615e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e059      	b.n	8006218 <USB_EPStartXfer+0x66a>
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	2b00      	cmp	r3, #0
 800616a:	d112      	bne.n	8006192 <USB_EPStartXfer+0x5e4>
 800616c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006176:	b29a      	uxth	r2, r3
 8006178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618a:	b29a      	uxth	r2, r3
 800618c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e042      	b.n	8006218 <USB_EPStartXfer+0x66a>
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <USB_EPStartXfer+0x604>
 80061a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ac:	3301      	adds	r3, #1
 80061ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e02a      	b.n	8006218 <USB_EPStartXfer+0x66a>
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d122      	bne.n	8006218 <USB_EPStartXfer+0x66a>
 80061d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	653b      	str	r3, [r7, #80]	; 0x50
 80061de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f2:	4413      	add	r3, r2
 80061f4:	653b      	str	r3, [r7, #80]	; 0x50
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	00da      	lsls	r2, r3, #3
 8006204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006206:	4413      	add	r3, r2
 8006208:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800620c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006212:	b29a      	uxth	r2, r3
 8006214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006216:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	891b      	ldrh	r3, [r3, #8]
 8006224:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6959      	ldr	r1, [r3, #20]
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	b29b      	uxth	r3, r3
 800623a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800623e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006242:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006246:	6800      	ldr	r0, [r0, #0]
 8006248:	f001 f921 	bl	800748e <USB_WritePMA>
            ep->xfer_buff += len;
 800624c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	441a      	add	r2, r3
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	429a      	cmp	r2, r3
 8006284:	d90f      	bls.n	80062a6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	621a      	str	r2, [r3, #32]
 80062a4:	e00e      	b.n	80062c4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80062a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	643b      	str	r3, [r7, #64]	; 0x40
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d16d      	bne.n	80063bc <USB_EPStartXfer+0x80e>
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	4413      	add	r3, r2
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
 8006304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	00da      	lsls	r2, r3, #3
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	4413      	add	r3, r2
 8006316:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006320:	2b3e      	cmp	r3, #62	; 0x3e
 8006322:	d91c      	bls.n	800635e <USB_EPStartXfer+0x7b0>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <USB_EPStartXfer+0x796>
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633e:	3b01      	subs	r3, #1
 8006340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	b29b      	uxth	r3, r3
 800634a:	029b      	lsls	r3, r3, #10
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e053      	b.n	8006406 <USB_EPStartXfer+0x858>
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006362:	2b00      	cmp	r3, #0
 8006364:	d112      	bne.n	800638c <USB_EPStartXfer+0x7de>
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006370:	b29a      	uxth	r2, r3
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006384:	b29a      	uxth	r2, r3
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	e03c      	b.n	8006406 <USB_EPStartXfer+0x858>
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <USB_EPStartXfer+0x7fe>
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a6:	3301      	adds	r3, #1
 80063a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e024      	b.n	8006406 <USB_EPStartXfer+0x858>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d11c      	bne.n	8006406 <USB_EPStartXfer+0x858>
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e0:	4413      	add	r3, r2
 80063e2:	643b      	str	r3, [r7, #64]	; 0x40
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	00da      	lsls	r2, r3, #3
 80063f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	b29a      	uxth	r2, r3
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	895b      	ldrh	r3, [r3, #10]
 8006412:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6959      	ldr	r1, [r3, #20]
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	b29b      	uxth	r3, r3
 8006428:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800642c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006430:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006434:	6800      	ldr	r0, [r0, #0]
 8006436:	f001 f82a 	bl	800748e <USB_WritePMA>
 800643a:	e213      	b.n	8006864 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	441a      	add	r2, r3
 8006490:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c8:	4413      	add	r3, r2
 80064ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00da      	lsls	r2, r3, #3
 80064da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	891b      	ldrh	r3, [r3, #8]
 80064fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6959      	ldr	r1, [r3, #20]
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	b29b      	uxth	r3, r3
 8006510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006514:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006518:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f000 ffb6 	bl	800748e <USB_WritePMA>
 8006522:	e19f      	b.n	8006864 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80bc 	beq.w	80066e2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	673b      	str	r3, [r7, #112]	; 0x70
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d16d      	bne.n	8006662 <USB_EPStartXfer+0xab4>
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	66bb      	str	r3, [r7, #104]	; 0x68
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a6:	4413      	add	r3, r2
 80065a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	00da      	lsls	r2, r3, #3
 80065b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065ba:	4413      	add	r3, r2
 80065bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065c0:	667b      	str	r3, [r7, #100]	; 0x64
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c6:	2b3e      	cmp	r3, #62	; 0x3e
 80065c8:	d91c      	bls.n	8006604 <USB_EPStartXfer+0xa56>
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <USB_EPStartXfer+0xa3c>
 80065e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065e4:	3b01      	subs	r3, #1
 80065e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	029b      	lsls	r3, r3, #10
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e053      	b.n	80066ac <USB_EPStartXfer+0xafe>
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006608:	2b00      	cmp	r3, #0
 800660a:	d112      	bne.n	8006632 <USB_EPStartXfer+0xa84>
 800660c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006616:	b29a      	uxth	r2, r3
 8006618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e03c      	b.n	80066ac <USB_EPStartXfer+0xafe>
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <USB_EPStartXfer+0xaa4>
 8006648:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006652:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006656:	b29b      	uxth	r3, r3
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	b29a      	uxth	r2, r3
 800665c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e024      	b.n	80066ac <USB_EPStartXfer+0xafe>
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d11c      	bne.n	80066ac <USB_EPStartXfer+0xafe>
 8006672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006686:	4413      	add	r3, r2
 8006688:	673b      	str	r3, [r7, #112]	; 0x70
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	00da      	lsls	r2, r3, #3
 8006698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800669a:	4413      	add	r3, r2
 800669c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	895b      	ldrh	r3, [r3, #10]
 80066b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6959      	ldr	r1, [r3, #20]
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	f000 fed7 	bl	800748e <USB_WritePMA>
 80066e0:	e0c0      	b.n	8006864 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d16d      	bne.n	80067ce <USB_EPStartXfer+0xc20>
 80066f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670c:	b29b      	uxth	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006712:	4413      	add	r3, r2
 8006714:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	00da      	lsls	r2, r3, #3
 8006724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006726:	4413      	add	r3, r2
 8006728:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006732:	2b3e      	cmp	r3, #62	; 0x3e
 8006734:	d91c      	bls.n	8006770 <USB_EPStartXfer+0xbc2>
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <USB_EPStartXfer+0xba8>
 800674c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006750:	3b01      	subs	r3, #1
 8006752:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006768:	b29a      	uxth	r2, r3
 800676a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e05f      	b.n	8006830 <USB_EPStartXfer+0xc82>
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006774:	2b00      	cmp	r3, #0
 8006776:	d112      	bne.n	800679e <USB_EPStartXfer+0xbf0>
 8006778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006782:	b29a      	uxth	r2, r3
 8006784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006796:	b29a      	uxth	r2, r3
 8006798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e048      	b.n	8006830 <USB_EPStartXfer+0xc82>
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <USB_EPStartXfer+0xc10>
 80067b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067b8:	3301      	adds	r3, #1
 80067ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	e030      	b.n	8006830 <USB_EPStartXfer+0xc82>
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d128      	bne.n	8006830 <USB_EPStartXfer+0xc82>
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006802:	4413      	add	r3, r2
 8006804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	00da      	lsls	r2, r3, #3
 8006816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800681a:	4413      	add	r3, r2
 800681c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800682e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	891b      	ldrh	r3, [r3, #8]
 800683c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6959      	ldr	r1, [r3, #20]
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006850:	b29b      	uxth	r3, r3
 8006852:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006856:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800685a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800685e:	6800      	ldr	r0, [r0, #0]
 8006860:	f000 fe15 	bl	800748e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688a:	817b      	strh	r3, [r7, #10]
 800688c:	897b      	ldrh	r3, [r7, #10]
 800688e:	f083 0310 	eor.w	r3, r3, #16
 8006892:	817b      	strh	r3, [r7, #10]
 8006894:	897b      	ldrh	r3, [r7, #10]
 8006896:	f083 0320 	eor.w	r3, r3, #32
 800689a:	817b      	strh	r3, [r7, #10]
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]
 80068cc:	f000 bc9f 	b.w	800720e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	7b1b      	ldrb	r3, [r3, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 80ae 	bne.w	8006a3e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d917      	bls.n	800692e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	619a      	str	r2, [r3, #24]
 800692c:	e00e      	b.n	800694c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006968:	b29b      	uxth	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006970:	4413      	add	r3, r2
 8006972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	00da      	lsls	r2, r3, #3
 8006984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006988:	4413      	add	r3, r2
 800698a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800698e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	2b3e      	cmp	r3, #62	; 0x3e
 8006998:	d91d      	bls.n	80069d6 <USB_EPStartXfer+0xe28>
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <USB_EPStartXfer+0xe0c>
 80069b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069b4:	3b01      	subs	r3, #1
 80069b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069be:	b29b      	uxth	r3, r3
 80069c0:	029b      	lsls	r3, r3, #10
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e3e1      	b.n	800719a <USB_EPStartXfer+0x15ec>
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d116      	bne.n	8006a0c <USB_EPStartXfer+0xe5e>
 80069de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	e3c6      	b.n	800719a <USB_EPStartXfer+0x15ec>
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <USB_EPStartXfer+0xe7e>
 8006a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a26:	3301      	adds	r3, #1
 8006a28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e3ad      	b.n	800719a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	78db      	ldrb	r3, [r3, #3]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	f040 8200 	bne.w	8006e50 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 8091 	bne.w	8006b84 <USB_EPStartXfer+0xfd6>
 8006a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a86:	4413      	add	r3, r2
 8006a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	00da      	lsls	r2, r3, #3
 8006a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab6:	d925      	bls.n	8006b04 <USB_EPStartXfer+0xf56>
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <USB_EPStartXfer+0xf3a>
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e074      	b.n	8006bee <USB_EPStartXfer+0x1040>
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d116      	bne.n	8006b42 <USB_EPStartXfer+0xf94>
 8006b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	e055      	b.n	8006bee <USB_EPStartXfer+0x1040>
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <USB_EPStartXfer+0xfc4>
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	029b      	lsls	r3, r3, #10
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b80:	801a      	strh	r2, [r3, #0]
 8006b82:	e034      	b.n	8006bee <USB_EPStartXfer+0x1040>
 8006b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d12c      	bne.n	8006bee <USB_EPStartXfer+0x1040>
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bb8:	4413      	add	r3, r2
 8006bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	00da      	lsls	r2, r3, #3
 8006bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bec:	801a      	strh	r2, [r3, #0]
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f040 8091 	bne.w	8006d30 <USB_EPStartXfer+0x1182>
 8006c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c32:	4413      	add	r3, r2
 8006c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	00da      	lsls	r2, r3, #3
 8006c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b3e      	cmp	r3, #62	; 0x3e
 8006c62:	d925      	bls.n	8006cb0 <USB_EPStartXfer+0x1102>
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <USB_EPStartXfer+0x10e6>
 8006c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	029b      	lsls	r3, r3, #10
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	e06d      	b.n	8006d8c <USB_EPStartXfer+0x11de>
 8006cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d116      	bne.n	8006cee <USB_EPStartXfer+0x1140>
 8006cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd2:	801a      	strh	r2, [r3, #0]
 8006cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	e04e      	b.n	8006d8c <USB_EPStartXfer+0x11de>
 8006cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <USB_EPStartXfer+0x1170>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	029b      	lsls	r3, r3, #10
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e02d      	b.n	8006d8c <USB_EPStartXfer+0x11de>
 8006d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d125      	bne.n	8006d8c <USB_EPStartXfer+0x11de>
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d56:	4413      	add	r3, r2
 8006d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	00da      	lsls	r2, r3, #3
 8006d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d8a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 81fe 	beq.w	800719a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006dbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <USB_EPStartXfer+0x1228>
 8006dca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006dd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 81db 	bne.w	800719a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006de4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 81d4 	bne.w	800719a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	8013      	strh	r3, [r2, #0]
 8006e4e:	e1a4      	b.n	800719a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	78db      	ldrb	r3, [r3, #3]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 819a 	bne.w	8007196 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d917      	bls.n	8006eae <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	619a      	str	r2, [r3, #24]
 8006eac:	e00e      	b.n	8006ecc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d178      	bne.n	8006fce <USB_EPStartXfer+0x1420>
 8006edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f00:	4413      	add	r3, r2
 8006f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	00da      	lsls	r2, r3, #3
 8006f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f18:	4413      	add	r3, r2
 8006f1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f26:	2b3e      	cmp	r3, #62	; 0x3e
 8006f28:	d91d      	bls.n	8006f66 <USB_EPStartXfer+0x13b8>
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f38:	f003 031f 	and.w	r3, r3, #31
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <USB_EPStartXfer+0x139c>
 8006f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f44:	3b01      	subs	r3, #1
 8006f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	029b      	lsls	r3, r3, #10
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e064      	b.n	8007030 <USB_EPStartXfer+0x1482>
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <USB_EPStartXfer+0x13ee>
 8006f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e049      	b.n	8007030 <USB_EPStartXfer+0x1482>
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <USB_EPStartXfer+0x140e>
 8006fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e030      	b.n	8007030 <USB_EPStartXfer+0x1482>
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d128      	bne.n	8007030 <USB_EPStartXfer+0x1482>
 8006fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007002:	4413      	add	r3, r2
 8007004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	00da      	lsls	r2, r3, #3
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701a:	4413      	add	r3, r2
 800701c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d178      	bne.n	8007140 <USB_EPStartXfer+0x1592>
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800706a:	b29b      	uxth	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007072:	4413      	add	r3, r2
 8007074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00da      	lsls	r2, r3, #3
 8007086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800708a:	4413      	add	r3, r2
 800708c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007098:	2b3e      	cmp	r3, #62	; 0x3e
 800709a:	d91d      	bls.n	80070d8 <USB_EPStartXfer+0x152a>
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <USB_EPStartXfer+0x150e>
 80070b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b6:	3b01      	subs	r3, #1
 80070b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e060      	b.n	800719a <USB_EPStartXfer+0x15ec>
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d116      	bne.n	800710e <USB_EPStartXfer+0x1560>
 80070e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007104:	b29a      	uxth	r2, r3
 8007106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	e045      	b.n	800719a <USB_EPStartXfer+0x15ec>
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <USB_EPStartXfer+0x1580>
 8007124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007128:	3301      	adds	r3, #1
 800712a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800712e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007132:	b29b      	uxth	r3, r3
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	b29a      	uxth	r2, r3
 8007138:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e02c      	b.n	800719a <USB_EPStartXfer+0x15ec>
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d124      	bne.n	800719a <USB_EPStartXfer+0x15ec>
 8007150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007166:	4413      	add	r3, r2
 8007168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	00da      	lsls	r2, r3, #3
 800717a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800717e:	4413      	add	r3, r2
 8007180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e001      	b.n	800719a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e03a      	b.n	8007210 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800719a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	441a      	add	r2, r3
 80071f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d020      	beq.n	800726e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007242:	81bb      	strh	r3, [r7, #12]
 8007244:	89bb      	ldrh	r3, [r7, #12]
 8007246:	f083 0310 	eor.w	r3, r3, #16
 800724a:	81bb      	strh	r3, [r7, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	89bb      	ldrh	r3, [r7, #12]
 8007258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007268:	b29b      	uxth	r3, r3
 800726a:	8013      	strh	r3, [r2, #0]
 800726c:	e01f      	b.n	80072ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	81fb      	strh	r3, [r7, #14]
 8007286:	89fb      	ldrh	r3, [r7, #14]
 8007288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800728c:	81fb      	strh	r3, [r7, #14]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	7b1b      	ldrb	r3, [r3, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 809d 	bne.w	800740a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d04c      	beq.n	8007372 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	823b      	strh	r3, [r7, #16]
 80072e6:	8a3b      	ldrh	r3, [r7, #16]
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01b      	beq.n	8007328 <USB_EPClearStall+0x6c>
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	81fb      	strh	r3, [r7, #14]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	89fb      	ldrh	r3, [r7, #14]
 8007314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007324:	b29b      	uxth	r3, r3
 8007326:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	78db      	ldrb	r3, [r3, #3]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d06c      	beq.n	800740a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007346:	81bb      	strh	r3, [r7, #12]
 8007348:	89bb      	ldrh	r3, [r7, #12]
 800734a:	f083 0320 	eor.w	r3, r3, #32
 800734e:	81bb      	strh	r3, [r7, #12]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	89bb      	ldrh	r3, [r7, #12]
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]
 8007370:	e04b      	b.n	800740a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	82fb      	strh	r3, [r7, #22]
 8007380:	8afb      	ldrh	r3, [r7, #22]
 8007382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01b      	beq.n	80073c2 <USB_EPClearStall+0x106>
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	82bb      	strh	r3, [r7, #20]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	8abb      	ldrh	r3, [r7, #20]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	827b      	strh	r3, [r7, #18]
 80073da:	8a7b      	ldrh	r3, [r7, #18]
 80073dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073e0:	827b      	strh	r3, [r7, #18]
 80073e2:	8a7b      	ldrh	r3, [r7, #18]
 80073e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073e8:	827b      	strh	r3, [r7, #18]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	8a7b      	ldrh	r3, [r7, #18]
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2280      	movs	r2, #128	; 0x80
 800742e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800744e:	b29b      	uxth	r3, r3
 8007450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800747c:	b29b      	uxth	r3, r3
 800747e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007480:	68fb      	ldr	r3, [r7, #12]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800748e:	b480      	push	{r7}
 8007490:	b08d      	sub	sp, #52	; 0x34
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	4611      	mov	r1, r2
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	80fb      	strh	r3, [r7, #6]
 80074a0:	4613      	mov	r3, r2
 80074a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80074a4:	88bb      	ldrh	r3, [r7, #4]
 80074a6:	3301      	adds	r3, #1
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074c4:	e01b      	b.n	80074fe <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	3301      	adds	r3, #1
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	b29b      	uxth	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	3302      	adds	r3, #2
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	3301      	adds	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	3b01      	subs	r3, #1
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e0      	bne.n	80074c6 <USB_WritePMA+0x38>
  }
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	3734      	adds	r7, #52	; 0x34
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007512:	b480      	push	{r7}
 8007514:	b08b      	sub	sp, #44	; 0x2c
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	4611      	mov	r1, r2
 800751e:	461a      	mov	r2, r3
 8007520:	460b      	mov	r3, r1
 8007522:	80fb      	strh	r3, [r7, #6]
 8007524:	4613      	mov	r3, r2
 8007526:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007528:	88bb      	ldrh	r3, [r7, #4]
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	b29b      	uxth	r3, r3
 800752e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007542:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
 8007548:	e018      	b.n	800757c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	3302      	adds	r3, #2
 8007556:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	b2da      	uxtb	r2, r3
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3301      	adds	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	b2da      	uxtb	r2, r3
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	3301      	adds	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	3b01      	subs	r3, #1
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e3      	bne.n	800754a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007582:	88bb      	ldrh	r3, [r7, #4]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	701a      	strb	r2, [r3, #0]
  }
}
 800759e:	bf00      	nop
 80075a0:	372c      	adds	r7, #44	; 0x2c
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	460b      	mov	r3, r1
 80075b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075ba:	f002 f901 	bl	80097c0 <USBD_static_malloc>
 80075be:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80075ce:	2302      	movs	r3, #2
 80075d0:	e066      	b.n	80076a0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7c1b      	ldrb	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d119      	bne.n	8007616 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e6:	2202      	movs	r2, #2
 80075e8:	2181      	movs	r1, #129	; 0x81
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 ff8d 	bl	800950a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075fa:	2202      	movs	r2, #2
 80075fc:	2101      	movs	r1, #1
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 ff83 	bl	800950a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2210      	movs	r2, #16
 8007610:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007614:	e016      	b.n	8007644 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007616:	2340      	movs	r3, #64	; 0x40
 8007618:	2202      	movs	r2, #2
 800761a:	2181      	movs	r1, #129	; 0x81
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 ff74 	bl	800950a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007628:	2340      	movs	r3, #64	; 0x40
 800762a:	2202      	movs	r2, #2
 800762c:	2101      	movs	r1, #1
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 ff6b 	bl	800950a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2210      	movs	r2, #16
 8007640:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007644:	2308      	movs	r3, #8
 8007646:	2203      	movs	r2, #3
 8007648:	2182      	movs	r1, #130	; 0x82
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 ff5d 	bl	800950a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7c1b      	ldrb	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007684:	2101      	movs	r1, #1
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f002 f82f 	bl	80096ea <USBD_LL_PrepareReceive>
 800768c:	e007      	b.n	800769e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007694:	2340      	movs	r3, #64	; 0x40
 8007696:	2101      	movs	r1, #1
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f002 f826 	bl	80096ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80076b4:	2181      	movs	r1, #129	; 0x81
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 ff4d 	bl	8009556 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076c2:	2101      	movs	r1, #1
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 ff46 	bl	8009556 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076d2:	2182      	movs	r1, #130	; 0x82
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 ff3e 	bl	8009556 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00e      	beq.n	8007712 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007704:	4618      	mov	r0, r3
 8007706:	f002 f869 	bl	80097dc <USBD_static_free>
    pdev->pClassData = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800772c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	e0af      	b.n	80078a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03f      	beq.n	80077d0 <USBD_CDC_Setup+0xb4>
 8007750:	2b20      	cmp	r3, #32
 8007752:	f040 809f 	bne.w	8007894 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02e      	beq.n	80077bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b25b      	sxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	da16      	bge.n	8007796 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007774:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	88d2      	ldrh	r2, [r2, #6]
 800777a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	88db      	ldrh	r3, [r3, #6]
 8007780:	2b07      	cmp	r3, #7
 8007782:	bf28      	it	cs
 8007784:	2307      	movcs	r3, #7
 8007786:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	89fa      	ldrh	r2, [r7, #14]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 facf 	bl	8008d32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007794:	e085      	b.n	80078a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	785a      	ldrb	r2, [r3, #1]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	88db      	ldrh	r3, [r3, #6]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80077ac:	6939      	ldr	r1, [r7, #16]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 fae8 	bl	8008d8a <USBD_CtlPrepareRx>
      break;
 80077ba:	e072      	b.n	80078a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	7850      	ldrb	r0, [r2, #1]
 80077c8:	2200      	movs	r2, #0
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	4798      	blx	r3
      break;
 80077ce:	e068      	b.n	80078a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	785b      	ldrb	r3, [r3, #1]
 80077d4:	2b0b      	cmp	r3, #11
 80077d6:	d852      	bhi.n	800787e <USBD_CDC_Setup+0x162>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBD_CDC_Setup+0xc4>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	08007811 	.word	0x08007811
 80077e4:	0800788d 	.word	0x0800788d
 80077e8:	0800787f 	.word	0x0800787f
 80077ec:	0800787f 	.word	0x0800787f
 80077f0:	0800787f 	.word	0x0800787f
 80077f4:	0800787f 	.word	0x0800787f
 80077f8:	0800787f 	.word	0x0800787f
 80077fc:	0800787f 	.word	0x0800787f
 8007800:	0800787f 	.word	0x0800787f
 8007804:	0800787f 	.word	0x0800787f
 8007808:	0800783b 	.word	0x0800783b
 800780c:	08007865 	.word	0x08007865
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d107      	bne.n	800782c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800781c:	f107 030a 	add.w	r3, r7, #10
 8007820:	2202      	movs	r2, #2
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fa84 	bl	8008d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800782a:	e032      	b.n	8007892 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fa0e 	bl	8008c50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	75fb      	strb	r3, [r7, #23]
          break;
 8007838:	e02b      	b.n	8007892 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d107      	bne.n	8007856 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007846:	f107 030d 	add.w	r3, r7, #13
 800784a:	2201      	movs	r2, #1
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fa6f 	bl	8008d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007854:	e01d      	b.n	8007892 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f9f9 	bl	8008c50 <USBD_CtlError>
            ret = USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	75fb      	strb	r3, [r7, #23]
          break;
 8007862:	e016      	b.n	8007892 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b03      	cmp	r3, #3
 800786e:	d00f      	beq.n	8007890 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f9ec 	bl	8008c50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800787c:	e008      	b.n	8007890 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 f9e5 	bl	8008c50 <USBD_CtlError>
          ret = USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	75fb      	strb	r3, [r7, #23]
          break;
 800788a:	e002      	b.n	8007892 <USBD_CDC_Setup+0x176>
          break;
 800788c:	bf00      	nop
 800788e:	e008      	b.n	80078a2 <USBD_CDC_Setup+0x186>
          break;
 8007890:	bf00      	nop
      }
      break;
 8007892:	e006      	b.n	80078a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 f9da 	bl	8008c50 <USBD_CtlError>
      ret = USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	75fb      	strb	r3, [r7, #23]
      break;
 80078a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e04f      	b.n	800796e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	3318      	adds	r3, #24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d029      	beq.n	8007940 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	3318      	adds	r3, #24
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	78f9      	ldrb	r1, [r7, #3]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	460b      	mov	r3, r1
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	440b      	add	r3, r1
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	4403      	add	r3, r0
 800790c:	3338      	adds	r3, #56	; 0x38
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	fbb2 f1f3 	udiv	r1, r2, r3
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800791a:	2b00      	cmp	r3, #0
 800791c:	d110      	bne.n	8007940 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	3318      	adds	r3, #24
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007932:	78f9      	ldrb	r1, [r7, #3]
 8007934:	2300      	movs	r3, #0
 8007936:	2200      	movs	r2, #0
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 feb5 	bl	80096a8 <USBD_LL_Transmit>
 800793e:	e015      	b.n	800796c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007988:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007994:	2303      	movs	r3, #3
 8007996:	e015      	b.n	80079c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fec5 	bl	800972c <USBD_LL_GetRxDataSize>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079be:	4611      	mov	r1, r2
 80079c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e01b      	b.n	8007a1e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d015      	beq.n	8007a1c <USBD_CDC_EP0_RxReady+0x50>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079f6:	2bff      	cmp	r3, #255	; 0xff
 80079f8:	d010      	beq.n	8007a1c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007a08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a10:	b292      	uxth	r2, r2
 8007a12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	22ff      	movs	r2, #255	; 0xff
 8007a18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2243      	movs	r2, #67	; 0x43
 8007a34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007a36:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	20000094 	.word	0x20000094

08007a48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2243      	movs	r2, #67	; 0x43
 8007a54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007a56:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	20000050 	.word	0x20000050

08007a68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2243      	movs	r2, #67	; 0x43
 8007a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	200000d8 	.word	0x200000d8

08007a88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	220a      	movs	r2, #10
 8007a94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	2000000c 	.word	0x2000000c

08007aa8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e004      	b.n	8007ac6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e008      	b.n	8007b02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e004      	b.n	8007b34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e01a      	b.n	8007b98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d114      	bne.n	8007b96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b8a:	2181      	movs	r1, #129	; 0x81
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fd8b 	bl	80096a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e016      	b.n	8007bec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7c1b      	ldrb	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fd89 	bl	80096ea <USBD_LL_PrepareReceive>
 8007bd8:	e007      	b.n	8007bea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	2101      	movs	r1, #1
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fd80 	bl	80096ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e01f      	b.n	8007c4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	79fa      	ldrb	r2, [r7, #7]
 8007c3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f001 fbe7 	bl	8009414 <USBD_LL_Init>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e016      	b.n	8007c9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	f107 020e 	add.w	r2, r7, #14
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fc12 	bl	80094d4 <USBD_LL_Start>
 8007cb0:	4603      	mov	r3, r0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
  }

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 ff46 	bl	8008bdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d01a      	beq.n	8007daa <USBD_LL_SetupStage+0x72>
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d822      	bhi.n	8007dbe <USBD_LL_SetupStage+0x86>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <USBD_LL_SetupStage+0x4a>
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d00a      	beq.n	8007d96 <USBD_LL_SetupStage+0x5e>
 8007d80:	e01d      	b.n	8007dbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9ee 	bl	800816c <USBD_StdDevReq>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	e020      	b.n	8007dd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa52 	bl	8008248 <USBD_StdItfReq>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
      break;
 8007da8:	e016      	b.n	8007dd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa91 	bl	80082da <USBD_StdEPReq>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]
      break;
 8007dbc:	e00c      	b.n	8007dd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fbe1 	bl	8009594 <USBD_LL_StallEP>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd6:	bf00      	nop
  }

  return ret;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b086      	sub	sp, #24
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	460b      	mov	r3, r1
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d138      	bne.n	8007e68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d14a      	bne.n	8007e9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d913      	bls.n	8007e3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	1ad2      	subs	r2, r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	bf28      	it	cs
 8007e2e:	4613      	movcs	r3, r2
 8007e30:	461a      	mov	r2, r3
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 ffc5 	bl	8008dc4 <USBD_CtlContinueRx>
 8007e3a:	e030      	b.n	8007e9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d10b      	bne.n	8007e60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 ffc0 	bl	8008de6 <USBD_CtlSendStatus>
 8007e66:	e01a      	b.n	8007e9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d114      	bne.n	8007e9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00e      	beq.n	8007e9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	7afa      	ldrb	r2, [r7, #11]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	4798      	blx	r3
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	e000      	b.n	8007ea0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d16b      	bne.n	8007f94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d156      	bne.n	8007f7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d914      	bls.n	8007f02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	1ad2      	subs	r2, r2, r3
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 ff3a 	bl	8008d68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f001 fbf5 	bl	80096ea <USBD_LL_PrepareReceive>
 8007f00:	e03b      	b.n	8007f7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d11c      	bne.n	8007f48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d316      	bcc.n	8007f48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d20f      	bcs.n	8007f48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 ff1b 	bl	8008d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2100      	movs	r1, #0
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 fbd2 	bl	80096ea <USBD_LL_PrepareReceive>
 8007f46:	e018      	b.n	8007f7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d10b      	bne.n	8007f6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f6c:	2180      	movs	r1, #128	; 0x80
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f001 fb10 	bl	8009594 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 ff49 	bl	8008e0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d122      	bne.n	8007fca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fe98 	bl	8007cba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f92:	e01a      	b.n	8007fca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d114      	bne.n	8007fca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00e      	beq.n	8007fca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	7afa      	ldrb	r2, [r7, #11]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	4798      	blx	r3
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	e000      	b.n	8007fcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	e02f      	b.n	8008068 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6852      	ldr	r2, [r2, #4]
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	4611      	mov	r1, r2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fa66 	bl	800950a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2240      	movs	r2, #64	; 0x40
 800804a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	2200      	movs	r2, #0
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 fa58 	bl	800950a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2240      	movs	r2, #64	; 0x40
 8008064:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2204      	movs	r2, #4
 80080aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d106      	bne.n	80080de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	e012      	b.n	8008128 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b03      	cmp	r3, #3
 800810c:	d10b      	bne.n	8008126 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	3301      	adds	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800814e:	8a3b      	ldrh	r3, [r7, #16]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	b21a      	sxth	r2, r3
 8008154:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008158:	4313      	orrs	r3, r2
 800815a:	b21b      	sxth	r3, r3
 800815c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800815e:	89fb      	ldrh	r3, [r7, #14]
}
 8008160:	4618      	mov	r0, r3
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d005      	beq.n	8008192 <USBD_StdDevReq+0x26>
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d853      	bhi.n	8008232 <USBD_StdDevReq+0xc6>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <USBD_StdDevReq+0x3a>
 800818e:	2b20      	cmp	r3, #32
 8008190:	d14f      	bne.n	8008232 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
      break;
 80081a4:	e04a      	b.n	800823c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	785b      	ldrb	r3, [r3, #1]
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	d83b      	bhi.n	8008226 <USBD_StdDevReq+0xba>
 80081ae:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <USBD_StdDevReq+0x48>)
 80081b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b4:	08008209 	.word	0x08008209
 80081b8:	0800821d 	.word	0x0800821d
 80081bc:	08008227 	.word	0x08008227
 80081c0:	08008213 	.word	0x08008213
 80081c4:	08008227 	.word	0x08008227
 80081c8:	080081e7 	.word	0x080081e7
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	08008227 	.word	0x08008227
 80081d4:	080081ff 	.word	0x080081ff
 80081d8:	080081f1 	.word	0x080081f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9de 	bl	80085a0 <USBD_GetDescriptor>
          break;
 80081e4:	e024      	b.n	8008230 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb6d 	bl	80088c8 <USBD_SetAddress>
          break;
 80081ee:	e01f      	b.n	8008230 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fbac 	bl	8008950 <USBD_SetConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
          break;
 80081fc:	e018      	b.n	8008230 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc4b 	bl	8008a9c <USBD_GetConfig>
          break;
 8008206:	e013      	b.n	8008230 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc7c 	bl	8008b08 <USBD_GetStatus>
          break;
 8008210:	e00e      	b.n	8008230 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fcab 	bl	8008b70 <USBD_SetFeature>
          break;
 800821a:	e009      	b.n	8008230 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fcba 	bl	8008b98 <USBD_ClrFeature>
          break;
 8008224:	e004      	b.n	8008230 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fd11 	bl	8008c50 <USBD_CtlError>
          break;
 800822e:	bf00      	nop
      }
      break;
 8008230:	e004      	b.n	800823c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd0b 	bl	8008c50 <USBD_CtlError>
      break;
 800823a:	bf00      	nop
  }

  return ret;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop

08008248 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d005      	beq.n	800826e <USBD_StdItfReq+0x26>
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	d82f      	bhi.n	80082c6 <USBD_StdItfReq+0x7e>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <USBD_StdItfReq+0x26>
 800826a:	2b20      	cmp	r3, #32
 800826c:	d12b      	bne.n	80082c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008274:	b2db      	uxtb	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	2b02      	cmp	r3, #2
 800827a:	d81d      	bhi.n	80082b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	889b      	ldrh	r3, [r3, #4]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d813      	bhi.n	80082ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	4798      	blx	r3
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	88db      	ldrh	r3, [r3, #6]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d110      	bne.n	80082c2 <USBD_StdItfReq+0x7a>
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10d      	bne.n	80082c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fd9d 	bl	8008de6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082ac:	e009      	b.n	80082c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fccd 	bl	8008c50 <USBD_CtlError>
          break;
 80082b6:	e004      	b.n	80082c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fcc8 	bl	8008c50 <USBD_CtlError>
          break;
 80082c0:	e000      	b.n	80082c4 <USBD_StdItfReq+0x7c>
          break;
 80082c2:	bf00      	nop
      }
      break;
 80082c4:	e004      	b.n	80082d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fcc1 	bl	8008c50 <USBD_CtlError>
      break;
 80082ce:	bf00      	nop
  }

  return ret;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	889b      	ldrh	r3, [r3, #4]
 80082ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d007      	beq.n	800830a <USBD_StdEPReq+0x30>
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	f200 8145 	bhi.w	800858a <USBD_StdEPReq+0x2b0>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <USBD_StdEPReq+0x44>
 8008304:	2b20      	cmp	r3, #32
 8008306:	f040 8140 	bne.w	800858a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]
      break;
 800831c:	e13a      	b.n	8008594 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b03      	cmp	r3, #3
 8008324:	d007      	beq.n	8008336 <USBD_StdEPReq+0x5c>
 8008326:	2b03      	cmp	r3, #3
 8008328:	f300 8129 	bgt.w	800857e <USBD_StdEPReq+0x2a4>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d07f      	beq.n	8008430 <USBD_StdEPReq+0x156>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d03c      	beq.n	80083ae <USBD_StdEPReq+0xd4>
 8008334:	e123      	b.n	800857e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d002      	beq.n	8008348 <USBD_StdEPReq+0x6e>
 8008342:	2b03      	cmp	r3, #3
 8008344:	d016      	beq.n	8008374 <USBD_StdEPReq+0x9a>
 8008346:	e02c      	b.n	80083a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00d      	beq.n	800836a <USBD_StdEPReq+0x90>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d00a      	beq.n	800836a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f91b 	bl	8009594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800835e:	2180      	movs	r1, #128	; 0x80
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f917 	bl	8009594 <USBD_LL_StallEP>
 8008366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008368:	e020      	b.n	80083ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc6f 	bl	8008c50 <USBD_CtlError>
              break;
 8008372:	e01b      	b.n	80083ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10e      	bne.n	800839a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <USBD_StdEPReq+0xc0>
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b80      	cmp	r3, #128	; 0x80
 8008386:	d008      	beq.n	800839a <USBD_StdEPReq+0xc0>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	88db      	ldrh	r3, [r3, #6]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d104      	bne.n	800839a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f8fd 	bl	8009594 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fd23 	bl	8008de6 <USBD_CtlSendStatus>

              break;
 80083a0:	e004      	b.n	80083ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fc53 	bl	8008c50 <USBD_CtlError>
              break;
 80083aa:	bf00      	nop
          }
          break;
 80083ac:	e0ec      	b.n	8008588 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d002      	beq.n	80083c0 <USBD_StdEPReq+0xe6>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d016      	beq.n	80083ec <USBD_StdEPReq+0x112>
 80083be:	e030      	b.n	8008422 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <USBD_StdEPReq+0x108>
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b80      	cmp	r3, #128	; 0x80
 80083ca:	d00a      	beq.n	80083e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f8df 	bl	8009594 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f8db 	bl	8009594 <USBD_LL_StallEP>
 80083de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e0:	e025      	b.n	800842e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc33 	bl	8008c50 <USBD_CtlError>
              break;
 80083ea:	e020      	b.n	800842e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	885b      	ldrh	r3, [r3, #2]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d11b      	bne.n	800842c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d004      	beq.n	8008408 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 f8e5 	bl	80095d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fcec 	bl	8008de6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008420:	e004      	b.n	800842c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc13 	bl	8008c50 <USBD_CtlError>
              break;
 800842a:	e000      	b.n	800842e <USBD_StdEPReq+0x154>
              break;
 800842c:	bf00      	nop
          }
          break;
 800842e:	e0ab      	b.n	8008588 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d002      	beq.n	8008442 <USBD_StdEPReq+0x168>
 800843c:	2b03      	cmp	r3, #3
 800843e:	d032      	beq.n	80084a6 <USBD_StdEPReq+0x1cc>
 8008440:	e097      	b.n	8008572 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <USBD_StdEPReq+0x17e>
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d004      	beq.n	8008458 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fbfd 	bl	8008c50 <USBD_CtlError>
                break;
 8008456:	e091      	b.n	800857c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800845c:	2b00      	cmp	r3, #0
 800845e:	da0b      	bge.n	8008478 <USBD_StdEPReq+0x19e>
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	3310      	adds	r3, #16
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	3304      	adds	r3, #4
 8008476:	e00b      	b.n	8008490 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	3304      	adds	r3, #4
 8008490:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2202      	movs	r2, #2
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fc47 	bl	8008d32 <USBD_CtlSendData>
              break;
 80084a4:	e06a      	b.n	800857c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da11      	bge.n	80084d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	f003 020f 	and.w	r2, r3, #15
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	3324      	adds	r3, #36	; 0x24
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d117      	bne.n	80084f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fbc0 	bl	8008c50 <USBD_CtlError>
                  break;
 80084d0:	e054      	b.n	800857c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fbad 	bl	8008c50 <USBD_CtlError>
                  break;
 80084f6:	e041      	b.n	800857c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da0b      	bge.n	8008518 <USBD_StdEPReq+0x23e>
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	3310      	adds	r3, #16
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	3304      	adds	r3, #4
 8008516:	e00b      	b.n	8008530 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	3304      	adds	r3, #4
 8008530:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <USBD_StdEPReq+0x264>
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	2b80      	cmp	r3, #128	; 0x80
 800853c:	d103      	bne.n	8008546 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e00e      	b.n	8008564 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 f860 	bl	8009610 <USBD_LL_IsStallEP>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2201      	movs	r2, #1
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e002      	b.n	8008564 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2202      	movs	r2, #2
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fbe1 	bl	8008d32 <USBD_CtlSendData>
              break;
 8008570:	e004      	b.n	800857c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fb6b 	bl	8008c50 <USBD_CtlError>
              break;
 800857a:	bf00      	nop
          }
          break;
 800857c:	e004      	b.n	8008588 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fb65 	bl	8008c50 <USBD_CtlError>
          break;
 8008586:	bf00      	nop
      }
      break;
 8008588:	e004      	b.n	8008594 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb5f 	bl	8008c50 <USBD_CtlError>
      break;
 8008592:	bf00      	nop
  }

  return ret;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	885b      	ldrh	r3, [r3, #2]
 80085ba:	0a1b      	lsrs	r3, r3, #8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	2b0e      	cmp	r3, #14
 80085c2:	f200 8152 	bhi.w	800886a <USBD_GetDescriptor+0x2ca>
 80085c6:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <USBD_GetDescriptor+0x2c>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	0800863d 	.word	0x0800863d
 80085d0:	08008655 	.word	0x08008655
 80085d4:	08008695 	.word	0x08008695
 80085d8:	0800886b 	.word	0x0800886b
 80085dc:	0800886b 	.word	0x0800886b
 80085e0:	0800880b 	.word	0x0800880b
 80085e4:	08008837 	.word	0x08008837
 80085e8:	0800886b 	.word	0x0800886b
 80085ec:	0800886b 	.word	0x0800886b
 80085f0:	0800886b 	.word	0x0800886b
 80085f4:	0800886b 	.word	0x0800886b
 80085f8:	0800886b 	.word	0x0800886b
 80085fc:	0800886b 	.word	0x0800886b
 8008600:	0800886b 	.word	0x0800886b
 8008604:	08008609 	.word	0x08008609
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7c12      	ldrb	r2, [r2, #16]
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800862a:	e126      	b.n	800887a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fb0e 	bl	8008c50 <USBD_CtlError>
        err++;
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	3301      	adds	r3, #1
 8008638:	72fb      	strb	r3, [r7, #11]
      break;
 800863a:	e11e      	b.n	800887a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	7c12      	ldrb	r2, [r2, #16]
 8008648:	f107 0108 	add.w	r1, r7, #8
 800864c:	4610      	mov	r0, r2
 800864e:	4798      	blx	r3
 8008650:	60f8      	str	r0, [r7, #12]
      break;
 8008652:	e112      	b.n	800887a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7c1b      	ldrb	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10d      	bne.n	8008678 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	f107 0208 	add.w	r2, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	2202      	movs	r2, #2
 8008674:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008676:	e100      	b.n	800887a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	f107 0208 	add.w	r2, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	2202      	movs	r2, #2
 8008690:	701a      	strb	r2, [r3, #0]
      break;
 8008692:	e0f2      	b.n	800887a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	885b      	ldrh	r3, [r3, #2]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b05      	cmp	r3, #5
 800869c:	f200 80ac 	bhi.w	80087f8 <USBD_GetDescriptor+0x258>
 80086a0:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <USBD_GetDescriptor+0x108>)
 80086a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a6:	bf00      	nop
 80086a8:	080086c1 	.word	0x080086c1
 80086ac:	080086f5 	.word	0x080086f5
 80086b0:	08008729 	.word	0x08008729
 80086b4:	0800875d 	.word	0x0800875d
 80086b8:	08008791 	.word	0x08008791
 80086bc:	080087c5 	.word	0x080087c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e091      	b.n	8008808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fab2 	bl	8008c50 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e089      	b.n	8008808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e077      	b.n	8008808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa98 	bl	8008c50 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e06f      	b.n	8008808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	f107 0108 	add.w	r1, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874a:	e05d      	b.n	8008808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa7e 	bl	8008c50 <USBD_CtlError>
            err++;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	3301      	adds	r3, #1
 8008758:	72fb      	strb	r3, [r7, #11]
          break;
 800875a:	e055      	b.n	8008808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	7c12      	ldrb	r2, [r2, #16]
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	4610      	mov	r0, r2
 800877a:	4798      	blx	r3
 800877c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800877e:	e043      	b.n	8008808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa64 	bl	8008c50 <USBD_CtlError>
            err++;
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	3301      	adds	r3, #1
 800878c:	72fb      	strb	r3, [r7, #11]
          break;
 800878e:	e03b      	b.n	8008808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b2:	e029      	b.n	8008808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa4a 	bl	8008c50 <USBD_CtlError>
            err++;
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	3301      	adds	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
          break;
 80087c2:	e021      	b.n	8008808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	7c12      	ldrb	r2, [r2, #16]
 80087dc:	f107 0108 	add.w	r1, r7, #8
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
 80087e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087e6:	e00f      	b.n	8008808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fa30 	bl	8008c50 <USBD_CtlError>
            err++;
 80087f0:	7afb      	ldrb	r3, [r7, #11]
 80087f2:	3301      	adds	r3, #1
 80087f4:	72fb      	strb	r3, [r7, #11]
          break;
 80087f6:	e007      	b.n	8008808 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa28 	bl	8008c50 <USBD_CtlError>
          err++;
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	3301      	adds	r3, #1
 8008804:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e037      	b.n	800887a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7c1b      	ldrb	r3, [r3, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	f107 0208 	add.w	r2, r7, #8
 800881e:	4610      	mov	r0, r2
 8008820:	4798      	blx	r3
 8008822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008824:	e029      	b.n	800887a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fa11 	bl	8008c50 <USBD_CtlError>
        err++;
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	3301      	adds	r3, #1
 8008832:	72fb      	strb	r3, [r7, #11]
      break;
 8008834:	e021      	b.n	800887a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7c1b      	ldrb	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10d      	bne.n	800885a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f107 0208 	add.w	r2, r7, #8
 800884a:	4610      	mov	r0, r2
 800884c:	4798      	blx	r3
 800884e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	2207      	movs	r2, #7
 8008856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008858:	e00f      	b.n	800887a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f9f7 	bl	8008c50 <USBD_CtlError>
        err++;
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	3301      	adds	r3, #1
 8008866:	72fb      	strb	r3, [r7, #11]
      break;
 8008868:	e007      	b.n	800887a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f9ef 	bl	8008c50 <USBD_CtlError>
      err++;
 8008872:	7afb      	ldrb	r3, [r7, #11]
 8008874:	3301      	adds	r3, #1
 8008876:	72fb      	strb	r3, [r7, #11]
      break;
 8008878:	bf00      	nop
  }

  if (err != 0U)
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d11e      	bne.n	80088be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	88db      	ldrh	r3, [r3, #6]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d016      	beq.n	80088b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008888:	893b      	ldrh	r3, [r7, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00e      	beq.n	80088ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	88da      	ldrh	r2, [r3, #6]
 8008892:	893b      	ldrh	r3, [r7, #8]
 8008894:	4293      	cmp	r3, r2
 8008896:	bf28      	it	cs
 8008898:	4613      	movcs	r3, r2
 800889a:	b29b      	uxth	r3, r3
 800889c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800889e:	893b      	ldrh	r3, [r7, #8]
 80088a0:	461a      	mov	r2, r3
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fa44 	bl	8008d32 <USBD_CtlSendData>
 80088aa:	e009      	b.n	80088c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f9ce 	bl	8008c50 <USBD_CtlError>
 80088b4:	e004      	b.n	80088c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fa95 	bl	8008de6 <USBD_CtlSendStatus>
 80088bc:	e000      	b.n	80088c0 <USBD_GetDescriptor+0x320>
    return;
 80088be:	bf00      	nop
  }
}
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop

080088c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d131      	bne.n	800893e <USBD_SetAddress+0x76>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	88db      	ldrh	r3, [r3, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d12d      	bne.n	800893e <USBD_SetAddress+0x76>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	885b      	ldrh	r3, [r3, #2]
 80088e6:	2b7f      	cmp	r3, #127	; 0x7f
 80088e8:	d829      	bhi.n	800893e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	885b      	ldrh	r3, [r3, #2]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d104      	bne.n	800890c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f9a3 	bl	8008c50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890a:	e01d      	b.n	8008948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	7bfa      	ldrb	r2, [r7, #15]
 8008910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fea6 	bl	800966a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa61 	bl	8008de6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008932:	e009      	b.n	8008948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893c:	e004      	b.n	8008948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f985 	bl	8008c50 <USBD_CtlError>
  }
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	885b      	ldrh	r3, [r3, #2]
 8008962:	b2da      	uxtb	r2, r3
 8008964:	4b4c      	ldr	r3, [pc, #304]	; (8008a98 <USBD_SetConfig+0x148>)
 8008966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008968:	4b4b      	ldr	r3, [pc, #300]	; (8008a98 <USBD_SetConfig+0x148>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d905      	bls.n	800897c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f96c 	bl	8008c50 <USBD_CtlError>
    return USBD_FAIL;
 8008978:	2303      	movs	r3, #3
 800897a:	e088      	b.n	8008a8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d002      	beq.n	800898e <USBD_SetConfig+0x3e>
 8008988:	2b03      	cmp	r3, #3
 800898a:	d025      	beq.n	80089d8 <USBD_SetConfig+0x88>
 800898c:	e071      	b.n	8008a72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800898e:	4b42      	ldr	r3, [pc, #264]	; (8008a98 <USBD_SetConfig+0x148>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01c      	beq.n	80089d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008996:	4b40      	ldr	r3, [pc, #256]	; (8008a98 <USBD_SetConfig+0x148>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089a0:	4b3d      	ldr	r3, [pc, #244]	; (8008a98 <USBD_SetConfig+0x148>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff f992 	bl	8007cd0 <USBD_SetClassConfig>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d004      	beq.n	80089c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f949 	bl	8008c50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089be:	e065      	b.n	8008a8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fa10 	bl	8008de6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2203      	movs	r2, #3
 80089ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089ce:	e05d      	b.n	8008a8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fa08 	bl	8008de6 <USBD_CtlSendStatus>
      break;
 80089d6:	e059      	b.n	8008a8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089d8:	4b2f      	ldr	r3, [pc, #188]	; (8008a98 <USBD_SetConfig+0x148>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d112      	bne.n	8008a06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80089e8:	4b2b      	ldr	r3, [pc, #172]	; (8008a98 <USBD_SetConfig+0x148>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089f2:	4b29      	ldr	r3, [pc, #164]	; (8008a98 <USBD_SetConfig+0x148>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff f985 	bl	8007d08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f9f1 	bl	8008de6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a04:	e042      	b.n	8008a8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a06:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <USBD_SetConfig+0x148>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d02a      	beq.n	8008a6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff f973 	bl	8007d08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a22:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <USBD_SetConfig+0x148>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a2c:	4b1a      	ldr	r3, [pc, #104]	; (8008a98 <USBD_SetConfig+0x148>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff f94c 	bl	8007cd0 <USBD_SetClassConfig>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00f      	beq.n	8008a62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f903 	bl	8008c50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff f958 	bl	8007d08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a60:	e014      	b.n	8008a8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f9bf 	bl	8008de6 <USBD_CtlSendStatus>
      break;
 8008a68:	e010      	b.n	8008a8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9bb 	bl	8008de6 <USBD_CtlSendStatus>
      break;
 8008a70:	e00c      	b.n	8008a8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8eb 	bl	8008c50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <USBD_SetConfig+0x148>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff f941 	bl	8007d08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a86:	2303      	movs	r3, #3
 8008a88:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8a:	bf00      	nop
  }

  return ret;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	2000039c 	.word	0x2000039c

08008a9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	88db      	ldrh	r3, [r3, #6]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d004      	beq.n	8008ab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f8cd 	bl	8008c50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ab6:	e023      	b.n	8008b00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	dc02      	bgt.n	8008aca <USBD_GetConfig+0x2e>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dc03      	bgt.n	8008ad0 <USBD_GetConfig+0x34>
 8008ac8:	e015      	b.n	8008af6 <USBD_GetConfig+0x5a>
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d00b      	beq.n	8008ae6 <USBD_GetConfig+0x4a>
 8008ace:	e012      	b.n	8008af6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	2201      	movs	r2, #1
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f927 	bl	8008d32 <USBD_CtlSendData>
        break;
 8008ae4:	e00c      	b.n	8008b00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	2201      	movs	r2, #1
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f91f 	bl	8008d32 <USBD_CtlSendData>
        break;
 8008af4:	e004      	b.n	8008b00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f8a9 	bl	8008c50 <USBD_CtlError>
        break;
 8008afe:	bf00      	nop
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d81e      	bhi.n	8008b5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	88db      	ldrh	r3, [r3, #6]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d004      	beq.n	8008b32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f890 	bl	8008c50 <USBD_CtlError>
        break;
 8008b30:	e01a      	b.n	8008b68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f043 0202 	orr.w	r2, r3, #2
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	330c      	adds	r3, #12
 8008b52:	2202      	movs	r2, #2
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f8eb 	bl	8008d32 <USBD_CtlSendData>
      break;
 8008b5c:	e004      	b.n	8008b68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f875 	bl	8008c50 <USBD_CtlError>
      break;
 8008b66:	bf00      	nop
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d106      	bne.n	8008b90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f92b 	bl	8008de6 <USBD_CtlSendStatus>
  }
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d80b      	bhi.n	8008bc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	885b      	ldrh	r3, [r3, #2]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10c      	bne.n	8008bd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f910 	bl	8008de6 <USBD_CtlSendStatus>
      }
      break;
 8008bc6:	e004      	b.n	8008bd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f840 	bl	8008c50 <USBD_CtlError>
      break;
 8008bd0:	e000      	b.n	8008bd4 <USBD_ClrFeature+0x3c>
      break;
 8008bd2:	bf00      	nop
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3301      	adds	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff fa92 	bl	8008130 <SWAPBYTE>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff fa85 	bl	8008130 <SWAPBYTE>
 8008c26:	4603      	mov	r3, r0
 8008c28:	461a      	mov	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3301      	adds	r3, #1
 8008c32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff fa78 	bl	8008130 <SWAPBYTE>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	80da      	strh	r2, [r3, #6]
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5a:	2180      	movs	r1, #128	; 0x80
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc99 	bl	8009594 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c62:	2100      	movs	r1, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc95 	bl	8009594 <USBD_LL_StallEP>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d036      	beq.n	8008cf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c8c:	6938      	ldr	r0, [r7, #16]
 8008c8e:	f000 f836 	bl	8008cfe <USBD_GetLen>
 8008c92:	4603      	mov	r3, r0
 8008c94:	3301      	adds	r3, #1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	7812      	ldrb	r2, [r2, #0]
 8008caa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	2203      	movs	r2, #3
 8008cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008cc2:	e013      	b.n	8008cec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	4413      	add	r3, r2
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	613b      	str	r3, [r7, #16]
    idx++;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e7      	bne.n	8008cc4 <USBD_GetString+0x52>
 8008cf4:	e000      	b.n	8008cf8 <USBD_GetString+0x86>
    return;
 8008cf6:	bf00      	nop
  }
}
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d0e:	e005      	b.n	8008d1c <USBD_GetLen+0x1e>
  {
    len++;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	3301      	adds	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f5      	bne.n	8008d10 <USBD_GetLen+0x12>
  }

  return len;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2202      	movs	r2, #2
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	2100      	movs	r1, #0
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fca5 	bl	80096a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fc94 	bl	80096a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2203      	movs	r2, #3
 8008d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	2100      	movs	r1, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fc98 	bl	80096ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fc87 	bl	80096ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008df6:	2300      	movs	r3, #0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc53 	bl	80096a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2205      	movs	r2, #5
 8008e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fc61 	bl	80096ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4912      	ldr	r1, [pc, #72]	; (8008e84 <MX_USB_Device_Init+0x50>)
 8008e3c:	4812      	ldr	r0, [pc, #72]	; (8008e88 <MX_USB_Device_Init+0x54>)
 8008e3e:	f7fe fed9 	bl	8007bf4 <USBD_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008e48:	f7f7 fdc4 	bl	80009d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008e4c:	490f      	ldr	r1, [pc, #60]	; (8008e8c <MX_USB_Device_Init+0x58>)
 8008e4e:	480e      	ldr	r0, [pc, #56]	; (8008e88 <MX_USB_Device_Init+0x54>)
 8008e50:	f7fe ff00 	bl	8007c54 <USBD_RegisterClass>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008e5a:	f7f7 fdbb 	bl	80009d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008e5e:	490c      	ldr	r1, [pc, #48]	; (8008e90 <MX_USB_Device_Init+0x5c>)
 8008e60:	4809      	ldr	r0, [pc, #36]	; (8008e88 <MX_USB_Device_Init+0x54>)
 8008e62:	f7fe fe21 	bl	8007aa8 <USBD_CDC_RegisterInterface>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008e6c:	f7f7 fdb2 	bl	80009d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008e70:	4805      	ldr	r0, [pc, #20]	; (8008e88 <MX_USB_Device_Init+0x54>)
 8008e72:	f7fe ff16 	bl	8007ca2 <USBD_Start>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008e7c:	f7f7 fdaa 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008e80:	bf00      	nop
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	20000130 	.word	0x20000130
 8008e88:	200003a0 	.word	0x200003a0
 8008e8c:	20000018 	.word	0x20000018
 8008e90:	2000011c 	.word	0x2000011c

08008e94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4905      	ldr	r1, [pc, #20]	; (8008eb0 <CDC_Init_FS+0x1c>)
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <CDC_Init_FS+0x20>)
 8008e9e:	f7fe fe18 	bl	8007ad2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ea2:	4905      	ldr	r1, [pc, #20]	; (8008eb8 <CDC_Init_FS+0x24>)
 8008ea4:	4803      	ldr	r0, [pc, #12]	; (8008eb4 <CDC_Init_FS+0x20>)
 8008ea6:	f7fe fe32 	bl	8007b0e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008eaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000a58 	.word	0x20000a58
 8008eb4:	200003a0 	.word	0x200003a0
 8008eb8:	20000670 	.word	0x20000670

08008ebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8008ec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	2b23      	cmp	r3, #35	; 0x23
 8008ee0:	d84a      	bhi.n	8008f78 <CDC_Control_FS+0xac>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <CDC_Control_FS+0x1c>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f79 	.word	0x08008f79
 8008eec:	08008f79 	.word	0x08008f79
 8008ef0:	08008f79 	.word	0x08008f79
 8008ef4:	08008f79 	.word	0x08008f79
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f79 	.word	0x08008f79
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f79 	.word	0x08008f79
 8008f1c:	08008f79 	.word	0x08008f79
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f79 	.word	0x08008f79
 8008f28:	08008f79 	.word	0x08008f79
 8008f2c:	08008f79 	.word	0x08008f79
 8008f30:	08008f79 	.word	0x08008f79
 8008f34:	08008f79 	.word	0x08008f79
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f79 	.word	0x08008f79
 8008f44:	08008f79 	.word	0x08008f79
 8008f48:	08008f79 	.word	0x08008f79
 8008f4c:	08008f79 	.word	0x08008f79
 8008f50:	08008f79 	.word	0x08008f79
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f79 	.word	0x08008f79
 8008f5c:	08008f79 	.word	0x08008f79
 8008f60:	08008f79 	.word	0x08008f79
 8008f64:	08008f79 	.word	0x08008f79
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f79 	.word	0x08008f79
 8008f70:	08008f79 	.word	0x08008f79
 8008f74:	08008f79 	.word	0x08008f79
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008f78:	bf00      	nop
	}

	return (USBD_OK);
 8008f7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7f7 f93f 	bl	8000218 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <CDC_Receive_FS+0x2c>)
 8008f9e:	f7fe fdb6 	bl	8007b0e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fa2:	4804      	ldr	r0, [pc, #16]	; (8008fb4 <CDC_Receive_FS+0x2c>)
 8008fa4:	f7fe fdfc 	bl	8007ba0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008fa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200003a0 	.word	0x200003a0

08008fb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <CDC_Transmit_FS+0x48>)
 8008fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fce:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e00b      	b.n	8008ff6 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fde:	887b      	ldrh	r3, [r7, #2]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4806      	ldr	r0, [pc, #24]	; (8009000 <CDC_Transmit_FS+0x48>)
 8008fe6:	f7fe fd74 	bl	8007ad2 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fea:	4805      	ldr	r0, [pc, #20]	; (8009000 <CDC_Transmit_FS+0x48>)
 8008fec:	f7fe fda8 	bl	8007b40 <USBD_CDC_TransmitPacket>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200003a0 	.word	0x200003a0

08009004 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800901a:	4618      	mov	r0, r3
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2212      	movs	r2, #18
 8009038:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800903a:	4b03      	ldr	r3, [pc, #12]	; (8009048 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	20000150 	.word	0x20000150

0800904c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2204      	movs	r2, #4
 800905c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800905e:	4b03      	ldr	r3, [pc, #12]	; (800906c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20000164 	.word	0x20000164

08009070 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4907      	ldr	r1, [pc, #28]	; (80090a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009086:	4808      	ldr	r0, [pc, #32]	; (80090a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009088:	f7ff fdf3 	bl	8008c72 <USBD_GetString>
 800908c:	e004      	b.n	8009098 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4904      	ldr	r1, [pc, #16]	; (80090a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009092:	4805      	ldr	r0, [pc, #20]	; (80090a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009094:	f7ff fded 	bl	8008c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009098:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000e40 	.word	0x20000e40
 80090a8:	080098c4 	.word	0x080098c4

080090ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	6039      	str	r1, [r7, #0]
 80090b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	4904      	ldr	r1, [pc, #16]	; (80090cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80090bc:	4804      	ldr	r0, [pc, #16]	; (80090d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80090be:	f7ff fdd8 	bl	8008c72 <USBD_GetString>
  return USBD_StrDesc;
 80090c2:	4b02      	ldr	r3, [pc, #8]	; (80090cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20000e40 	.word	0x20000e40
 80090d0:	080098dc 	.word	0x080098dc

080090d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	221a      	movs	r2, #26
 80090e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090e6:	f000 f843 	bl	8009170 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80090ea:	4b02      	ldr	r3, [pc, #8]	; (80090f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000168 	.word	0x20000168

080090f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4907      	ldr	r1, [pc, #28]	; (800912c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800910e:	4808      	ldr	r0, [pc, #32]	; (8009130 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009110:	f7ff fdaf 	bl	8008c72 <USBD_GetString>
 8009114:	e004      	b.n	8009120 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4904      	ldr	r1, [pc, #16]	; (800912c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800911a:	4805      	ldr	r0, [pc, #20]	; (8009130 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800911c:	f7ff fda9 	bl	8008c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20000e40 	.word	0x20000e40
 8009130:	080098f0 	.word	0x080098f0

08009134 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d105      	bne.n	8009152 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	4907      	ldr	r1, [pc, #28]	; (8009168 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800914a:	4808      	ldr	r0, [pc, #32]	; (800916c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800914c:	f7ff fd91 	bl	8008c72 <USBD_GetString>
 8009150:	e004      	b.n	800915c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4904      	ldr	r1, [pc, #16]	; (8009168 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009156:	4805      	ldr	r0, [pc, #20]	; (800916c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009158:	f7ff fd8b 	bl	8008c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800915c:	4b02      	ldr	r3, [pc, #8]	; (8009168 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000e40 	.word	0x20000e40
 800916c:	080098fc 	.word	0x080098fc

08009170 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009176:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <Get_SerialNum+0x44>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800917c:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <Get_SerialNum+0x48>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009182:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <Get_SerialNum+0x4c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4413      	add	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d009      	beq.n	80091aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009196:	2208      	movs	r2, #8
 8009198:	4909      	ldr	r1, [pc, #36]	; (80091c0 <Get_SerialNum+0x50>)
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f814 	bl	80091c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091a0:	2204      	movs	r2, #4
 80091a2:	4908      	ldr	r1, [pc, #32]	; (80091c4 <Get_SerialNum+0x54>)
 80091a4:	68b8      	ldr	r0, [r7, #8]
 80091a6:	f000 f80f 	bl	80091c8 <IntToUnicode>
  }
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	1fff7590 	.word	0x1fff7590
 80091b8:	1fff7594 	.word	0x1fff7594
 80091bc:	1fff7598 	.word	0x1fff7598
 80091c0:	2000016a 	.word	0x2000016a
 80091c4:	2000017a 	.word	0x2000017a

080091c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]
 80091de:	e027      	b.n	8009230 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	0f1b      	lsrs	r3, r3, #28
 80091e4:	2b09      	cmp	r3, #9
 80091e6:	d80b      	bhi.n	8009200 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	0f1b      	lsrs	r3, r3, #28
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	4619      	mov	r1, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	440b      	add	r3, r1
 80091f8:	3230      	adds	r2, #48	; 0x30
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	e00a      	b.n	8009216 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	0f1b      	lsrs	r3, r3, #28
 8009204:	b2da      	uxtb	r2, r3
 8009206:	7dfb      	ldrb	r3, [r7, #23]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	4619      	mov	r1, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	440b      	add	r3, r1
 8009210:	3237      	adds	r2, #55	; 0x37
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	3301      	adds	r3, #1
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4413      	add	r3, r2
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	3301      	adds	r3, #1
 800922e:	75fb      	strb	r3, [r7, #23]
 8009230:	7dfa      	ldrb	r2, [r7, #23]
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	429a      	cmp	r2, r3
 8009236:	d3d3      	bcc.n	80091e0 <IntToUnicode+0x18>
  }
}
 8009238:	bf00      	nop
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b094      	sub	sp, #80	; 0x50
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	2244      	movs	r2, #68	; 0x44
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fb1f 	bl	800989c <memset>
  if(pcdHandle->Instance==USB)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <HAL_PCD_MspInit+0x70>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d123      	bne.n	80092b0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800926c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800926e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009272:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009274:	f107 030c 	add.w	r3, r7, #12
 8009278:	4618      	mov	r0, r3
 800927a:	f7fa fba3 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009284:	f7f7 fba6 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009288:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <HAL_PCD_MspInit+0x74>)
 800928a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928c:	4a0b      	ldr	r2, [pc, #44]	; (80092bc <HAL_PCD_MspInit+0x74>)
 800928e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009292:	6593      	str	r3, [r2, #88]	; 0x58
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <HAL_PCD_MspInit+0x74>)
 8009296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800929c:	60bb      	str	r3, [r7, #8]
 800929e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80092a0:	2200      	movs	r2, #0
 80092a2:	2100      	movs	r1, #0
 80092a4:	2014      	movs	r0, #20
 80092a6:	f7f7 fed0 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80092aa:	2014      	movs	r0, #20
 80092ac:	f7f7 fee7 	bl	800107e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092b0:	bf00      	nop
 80092b2:	3750      	adds	r7, #80	; 0x50
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	40005c00 	.word	0x40005c00
 80092bc:	40021000 	.word	0x40021000

080092c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f7fe fd2e 	bl	8007d38 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	6879      	ldr	r1, [r7, #4]
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	440b      	add	r3, r1
 8009304:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	4619      	mov	r1, r3
 800930e:	f7fe fd68 	bl	8007de2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	440b      	add	r3, r1
 800933a:	333c      	adds	r3, #60	; 0x3c
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	4619      	mov	r1, r3
 8009342:	f7fe fdb1 	bl	8007ea8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fec5 	bl	80080ec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009372:	2301      	movs	r3, #1
 8009374:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d001      	beq.n	8009382 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800937e:	f7f7 fb29 	bl	80009d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009388:	7bfa      	ldrb	r2, [r7, #15]
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe fe6f 	bl	8008070 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe fe1b 	bl	8007fd4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fe6a 	bl	8008090 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c4:	4b04      	ldr	r3, [pc, #16]	; (80093d8 <HAL_PCD_SuspendCallback+0x30>)
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	4a03      	ldr	r2, [pc, #12]	; (80093d8 <HAL_PCD_SuspendCallback+0x30>)
 80093ca:	f043 0306 	orr.w	r3, r3, #6
 80093ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	e000ed00 	.word	0xe000ed00

080093dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <HAL_PCD_ResumeCallback+0x34>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	4a07      	ldr	r2, [pc, #28]	; (8009410 <HAL_PCD_ResumeCallback+0x34>)
 80093f2:	f023 0306 	bic.w	r3, r3, #6
 80093f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80093f8:	f000 f9fa 	bl	80097f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fe5a 	bl	80080bc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	e000ed00 	.word	0xe000ed00

08009414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800941c:	4a2b      	ldr	r2, [pc, #172]	; (80094cc <USBD_LL_Init+0xb8>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a29      	ldr	r2, [pc, #164]	; (80094cc <USBD_LL_Init+0xb8>)
 8009428:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800942c:	4b27      	ldr	r3, [pc, #156]	; (80094cc <USBD_LL_Init+0xb8>)
 800942e:	4a28      	ldr	r2, [pc, #160]	; (80094d0 <USBD_LL_Init+0xbc>)
 8009430:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009432:	4b26      	ldr	r3, [pc, #152]	; (80094cc <USBD_LL_Init+0xb8>)
 8009434:	2208      	movs	r2, #8
 8009436:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009438:	4b24      	ldr	r3, [pc, #144]	; (80094cc <USBD_LL_Init+0xb8>)
 800943a:	2202      	movs	r2, #2
 800943c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800943e:	4b23      	ldr	r3, [pc, #140]	; (80094cc <USBD_LL_Init+0xb8>)
 8009440:	2202      	movs	r2, #2
 8009442:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009444:	4b21      	ldr	r3, [pc, #132]	; (80094cc <USBD_LL_Init+0xb8>)
 8009446:	2200      	movs	r2, #0
 8009448:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800944a:	4b20      	ldr	r3, [pc, #128]	; (80094cc <USBD_LL_Init+0xb8>)
 800944c:	2200      	movs	r2, #0
 800944e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009450:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <USBD_LL_Init+0xb8>)
 8009452:	2200      	movs	r2, #0
 8009454:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009456:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <USBD_LL_Init+0xb8>)
 8009458:	2200      	movs	r2, #0
 800945a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800945c:	481b      	ldr	r0, [pc, #108]	; (80094cc <USBD_LL_Init+0xb8>)
 800945e:	f7f7 ffdd 	bl	800141c <HAL_PCD_Init>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009468:	f7f7 fab4 	bl	80009d4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009472:	2318      	movs	r3, #24
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	f7f9 fc96 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009482:	2358      	movs	r3, #88	; 0x58
 8009484:	2200      	movs	r2, #0
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	f7f9 fc8e 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009492:	23c0      	movs	r3, #192	; 0xc0
 8009494:	2200      	movs	r2, #0
 8009496:	2181      	movs	r1, #129	; 0x81
 8009498:	f7f9 fc86 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80094a6:	2200      	movs	r2, #0
 80094a8:	2101      	movs	r1, #1
 80094aa:	f7f9 fc7d 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094b8:	2200      	movs	r2, #0
 80094ba:	2182      	movs	r1, #130	; 0x82
 80094bc:	f7f9 fc74 	bl	8002da8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20001040 	.word	0x20001040
 80094d0:	40005c00 	.word	0x40005c00

080094d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7f8 f87b 	bl	80015e6 <HAL_PCD_Start>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f980 	bl	80097fc <USBD_Get_USB_Status>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009500:	7bbb      	ldrb	r3, [r7, #14]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	4608      	mov	r0, r1
 8009514:	4611      	mov	r1, r2
 8009516:	461a      	mov	r2, r3
 8009518:	4603      	mov	r3, r0
 800951a:	70fb      	strb	r3, [r7, #3]
 800951c:	460b      	mov	r3, r1
 800951e:	70bb      	strb	r3, [r7, #2]
 8009520:	4613      	mov	r3, r2
 8009522:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009532:	78bb      	ldrb	r3, [r7, #2]
 8009534:	883a      	ldrh	r2, [r7, #0]
 8009536:	78f9      	ldrb	r1, [r7, #3]
 8009538:	f7f8 f9c3 	bl	80018c2 <HAL_PCD_EP_Open>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 f95a 	bl	80097fc <USBD_Get_USB_Status>
 8009548:	4603      	mov	r3, r0
 800954a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954c:	7bbb      	ldrb	r3, [r7, #14]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	4611      	mov	r1, r2
 8009574:	4618      	mov	r0, r3
 8009576:	f7f8 fa0a 	bl	800198e <HAL_PCD_EP_Close>
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 f93b 	bl	80097fc <USBD_Get_USB_Status>
 8009586:	4603      	mov	r3, r0
 8009588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958a:	7bbb      	ldrb	r3, [r7, #14]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7f8 facb 	bl	8001b4e <HAL_PCD_EP_SetStall>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f91c 	bl	80097fc <USBD_Get_USB_Status>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	4611      	mov	r1, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f8 fafe 	bl	8001bf2 <HAL_PCD_EP_ClrStall>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f8fd 	bl	80097fc <USBD_Get_USB_Status>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009606:	7bbb      	ldrb	r3, [r7, #14]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009622:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009628:	2b00      	cmp	r3, #0
 800962a:	da0c      	bge.n	8009646 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	440b      	add	r3, r1
 8009640:	3302      	adds	r3, #2
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	e00b      	b.n	800965e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800964c:	68f9      	ldr	r1, [r7, #12]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	440b      	add	r3, r1
 8009658:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800965c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f7f8 f8f5 	bl	8001878 <HAL_PCD_SetAddress>
 800968e:	4603      	mov	r3, r0
 8009690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 f8b1 	bl	80097fc <USBD_Get_USB_Status>
 800969a:	4603      	mov	r3, r0
 800969c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969e:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	460b      	mov	r3, r1
 80096b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096c6:	7af9      	ldrb	r1, [r7, #11]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	f7f8 f9fc 	bl	8001ac8 <HAL_PCD_EP_Transmit>
 80096d0:	4603      	mov	r3, r0
 80096d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f890 	bl	80097fc <USBD_Get_USB_Status>
 80096dc:	4603      	mov	r3, r0
 80096de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b086      	sub	sp, #24
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
 80096f6:	460b      	mov	r3, r1
 80096f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009708:	7af9      	ldrb	r1, [r7, #11]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	f7f8 f986 	bl	8001a1e <HAL_PCD_EP_Receive>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f86f 	bl	80097fc <USBD_Get_USB_Status>
 800971e:	4603      	mov	r3, r0
 8009720:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009722:	7dbb      	ldrb	r3, [r7, #22]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7f8 f9a8 	bl	8001a98 <HAL_PCD_EP_GetRxCount>
 8009748:	4603      	mov	r3, r0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_PCDEx_LPM_Callback+0x18>
 8009766:	2b01      	cmp	r3, #1
 8009768:	d013      	beq.n	8009792 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800976a:	e023      	b.n	80097b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d007      	beq.n	8009784 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009774:	f000 f83c 	bl	80097f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009778:	4b10      	ldr	r3, [pc, #64]	; (80097bc <HAL_PCDEx_LPM_Callback+0x68>)
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	4a0f      	ldr	r2, [pc, #60]	; (80097bc <HAL_PCDEx_LPM_Callback+0x68>)
 800977e:	f023 0306 	bic.w	r3, r3, #6
 8009782:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fc96 	bl	80080bc <USBD_LL_Resume>
    break;
 8009790:	e010      	b.n	80097b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009798:	4618      	mov	r0, r3
 800979a:	f7fe fc79 	bl	8008090 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <HAL_PCDEx_LPM_Callback+0x68>)
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	4a04      	ldr	r2, [pc, #16]	; (80097bc <HAL_PCDEx_LPM_Callback+0x68>)
 80097ac:	f043 0306 	orr.w	r3, r3, #6
 80097b0:	6113      	str	r3, [r2, #16]
    break;
 80097b2:	bf00      	nop
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	e000ed00 	.word	0xe000ed00

080097c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097c8:	4b03      	ldr	r3, [pc, #12]	; (80097d8 <USBD_static_malloc+0x18>)
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	20001334 	.word	0x20001334

080097dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]

}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80097f4:	f7f6 fd9a 	bl	800032c <SystemClock_Config>
}
 80097f8:	bf00      	nop
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	2b03      	cmp	r3, #3
 800980e:	d817      	bhi.n	8009840 <USBD_Get_USB_Status+0x44>
 8009810:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <USBD_Get_USB_Status+0x1c>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	08009829 	.word	0x08009829
 800981c:	0800982f 	.word	0x0800982f
 8009820:	08009835 	.word	0x08009835
 8009824:	0800983b 	.word	0x0800983b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	e00b      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	e008      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
    break;
 8009838:	e005      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800983a:	2303      	movs	r3, #3
 800983c:	73fb      	strb	r3, [r7, #15]
    break;
 800983e:	e002      	b.n	8009846 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	73fb      	strb	r3, [r7, #15]
    break;
 8009844:	bf00      	nop
  }
  return usb_status;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4d0d      	ldr	r5, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1b64      	subs	r4, r4, r5
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2600      	movs	r6, #0
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4d0b      	ldr	r5, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f000 f820 	bl	80098ac <_init>
 800986c:	1b64      	subs	r4, r4, r5
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2600      	movs	r6, #0
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800991c 	.word	0x0800991c
 8009890:	0800991c 	.word	0x0800991c
 8009894:	0800991c 	.word	0x0800991c
 8009898:	08009920 	.word	0x08009920

0800989c <memset>:
 800989c:	4402      	add	r2, r0
 800989e:	4603      	mov	r3, r0
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d100      	bne.n	80098a6 <memset+0xa>
 80098a4:	4770      	bx	lr
 80098a6:	f803 1b01 	strb.w	r1, [r3], #1
 80098aa:	e7f9      	b.n	80098a0 <memset+0x4>

080098ac <_init>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr

080098b8 <_fini>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr
