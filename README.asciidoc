= %placeholder% 

This is where we're going to write down what we've done so far.

Mechanics link: https://a360.co/3SYDOoi

== Members
* Timo Jairus - programming
* Artur SalumÃ¤e - electronics
* Jens Olaf Kukk - mechanics

== Repositories
* Mechanics: https://a360.co/3SYDOoi

== Programming

> What libraries did you use (and for what purposes)?

* numba - used JIT to speed up our line detection
* numpy - arrays, operations related to image processor
* opencv_python - used for the camera
* pyrealsense2 - used for the camera
* pyPS4Controller - using a DualShock 4 controller for remote control purposes
* pyserial - used for serial connection with the mainboard
* tomli - used for .toml configuration files to easily access and modify configurable variables
* websocket_client - using websockets for getting referee commands
* random - randomize some choices to make the game more interesting
* time - get the current time in order to compare it to a previous time, mainly used for timeouts. Uses sleep in remote control for waiting.
* math - used for PI and trigonometric functions in movement calculation code
* struct - used to encode the movement speeds to send them to the mainboard
* enum - used for enums to make the code cleaner and less error-prone
* json - used for converting the referee command data into an easily parseable format
* multiprocessing - used to run the referee command at the same time as the rest of the code
* queue - to check whether the multiprocessing queue is empty
* logging - used to print pretty logs to terminal and save them to a file
* datetime - get the current time in a pretty format, used for log file names
* os - checking whether directories exist and making them
* pathlib - checking if a file exists and if not, then making it. This could've been done with "os" too, but I used pathlib for some reason.
* typing - prettier function declarations for lists/tuples, shows what type it wants
* threading - used to run the remote control code at the same time as the rest of the code
* _pickle - serializing python objects
* segment - C library from the example code, used for fast colour thresholding


> A brief description of your game logic and overall code structure.

> A block diagram of your game logic.

> A short analysis of what was good and bad in your code and how to improve.



== Electronics
TODO

== Mechanics
TODO

== Personal comments

=== Timo
> On which parts of the robot did you work on?

I mainly worked on the software side of things - programming. My job was to get the robot moving and actually compete with others. I also had to sometimes deal with mechanics ane electronics related things. I think I've disassembled the robot more times than the mechanic and electronic combined.

> What did you learn?

I learned more about state machines, Python features that I hadn't used before, such as enums and overall tips on how to keep my code somewhat readable and functional. I also learned how to actually make a three wheeled robot move. I had some experience with image detection before, but I definitely gained some new knowledge on that. I had never used a depth camera before, so that was also a learning experience.

> What would you do differently next time?

I would pester the mechanic and electronic more, so we could actually get a robot finished in time. We somehow qualified for the first test competition, even though we got a thrower 3 days before the competition, and got it attached to the robot properly only a day before the competition. We barely had any time to test how well it actually works. The same thing happened with Delta X - we got our robot assembled with old electronics only hours before the competition, which meant that I had no time to test and find any low hanging issues, such as the robot sending speeds that are too small. They were things that could've come out during testing, but I didn't have any time for that.

> What did you like/did not like about the course/building a robot?

I liked when I wrote code that actually made the robot behave in the way I intended. It was fun making something that could actually compete with other groups robots, even though we only had 3 members. I did not like having mechanical issues - wheels falling off, the thrower falling off etc. I was a programmer, yet I had to deal with reattaching wheels countless times. At least for Delta X we finally got a robot that seemed to stay in one piece. 

About the course itself, I feel like some planning could've been better. The date for Delta X shouldn't have had to be changed later on. There were also times when we got conflicting information from instructors and related parties regarding the event. There definitely were some communication issues somewhere.

> Suggestions for next year students.

Try to get mechanics and electronics complete as soon as possible. Having new mechanics can change a lot how the robot behaves, so code needs to be adapted for that. Having new electronics would change it even more, most likely requiring rewrites in the code. We never got that far, though.

> Suggestions for instructors.

The course was fine, the instructors were helpful.

=== Artur

> On which parts of the robot did you work on?

TODO

> What did you learn?

TODO

> What would you do differently next time?

TODO

> What did you like/did not like about the course/building a robot?

TODO

> Suggestions for next year students.

TODO

> Suggestions for instructors.

TODO

=== Jens

> On which parts of the robot did you work on?

TODO

> What did you learn?

TODO

> What would you do differently next time?

TODO

> What did you like/did not like about the course/building a robot?

TODO

> Suggestions for next year students.

TODO

> Suggestions for instructors.

TODO

== Blog

* 8.09.2022 - *Timo:* Creating the blog file, writing code to read response from mainboard and adding `robot.py` to GitHub. (2h)
* 11.09.2022 - *Artur:* Assembling the test robot mechanics. (4h)
* 12.09.2022 - *Timo:* Updating `robot.py` to switch to `while` loop, testing wheel moving. (3h)
* 12.09.2022 - *Jens:* Debugging, helping with electronics. Found out why one of the motors didn't work - bolts were too long. (3h)
* 13.09.2022 - *Artur:* Drilled a big hole for cable management. (1h)
* 15.09.2022 - *Artur:* Debugged why one motor was not driving backwards. (1.5h)
* 19.09.2022 - *Artur:* Finished debugging, turns out some isolation scraped off and it was getting shorted out in the backwards direction. (2.5h)
* 19.09.2022 - *Timo:* Presented the project. (2h)
* 22.09.2022 - *Artur:* Debugged thrower problems, turns out mainboard voltage regulator was broken, so no signal passed from the isolator to the thrower. (4h)
* 22.09.2022 - *Timo:* Testing different remote control solutions to find the best one for our use case. (2h)
* 26.09.2022 - *Artur:* Redid the robot wiring to fit the batteries better, and got the battery training. (2.5h)
* 26.09.2022 - *Timo:* SSH setup, to control the computer remotely. (2h)
* 03.10.2022 - *Timo:* Testing robot, doing the presentation. (2h)
* 03.10.2022 - *Artur:* Testing robot, doing the presentation, debugging. (2h)
* 06.10.2022 - *Timo:* More SSH setup, can now see camera via SSH. Screwed in some bolts so the robot wouldn't fall apart (2h)
* 13.10.2022 - *Timo:* Movement code, DualShock 4 support (6h)
* 14.10.2022 - *Timo:* Debugging movement, looking into camera code. (1.5h)
* 15.10.2022 - *Timo:* Movement testing, rewriting controller code, putting wheels back on the robot. (2.5h)
* 15.10.2022 - *Artur:* Checking robot MAC address, importing libraries, creating missing components, getting familiarised with Altium Designer. (5h)
* 16.10.2022 - *Artur:* Working on the schematic, browsing through datasheets. (4h)
* 16.10.2022 - *Jens:* Started work on thrower. (1.5h)
* 17.10.2022 - *Artur:* Working on the schematic, browsing throught some more datasheets. (3.5h)
* 17.10.2022 - *Jens:* Researched thrower design. (0.5h)
* 17.10.2022 - *Timo:* Fixed one of the wheels falling off. (0.5h)
* 17.10.2022 - *Jens:* Fixed one of the wheels falling off. (0.5h)
* 18.10.2022 - *Timo:* Cleaned up and improved DS4 control code. (1.5h)
* 24.10.2022 - *Timo:* Looking into camera stuff. (1.5h)
* 28.10.2022 - *Jens:* Print out test parts. (3h)
* 30.10.2022 - *Artur:* Fixing schematic issues. (6h)
* 31.10.2022 - *Artur:* Starting with PCB design, debugging library footprint issues + resoldered a lot of the electronics. (8.5h)
* 01.11.2022 - *Timo:* Fixing deadzone issues with DS4 controller. Fixed the basic autonomous code. Added mode switching to controller. Started work on a state machine. (3h)
* 02.11.2022 - *Timo:* State machine fixes. (2h)
* 03.11.2022 - *Jens:* Make millable design (3h)
* 03.11.2022 - *Timo:* Code cleanup and fixes. (6h)
* 03.11.2022 - *Artur:* Resoldered some more stuff, did some PCB design. (4h)
* 04.11.2022 - *Timo:* Documenting functions and removing unused stuff. (1h)
* 05.11.2022 - *Timo:* Working on robot code. (6h)
* 05.11.2022 - *Artur:* Designed PCB, helped with robot software. (9h)
* 06.11.2022 - *Artur:* Helped with robot software. (6h)
* 06.11.2022 - *Timo:* Working on state machine. (6.5h)
* 06.11.2022 - *Jens:* Fix designs (2h)
* 07.11.2022 - *Jens:* Milling and assembling thrower (3h)
* 07.11.2022 - *Timo:* Thrower testing. (2h)
* 08.11.2022 - *Artur:* Redid the PCB, fixed PCB issues, did thrower regression. (8h)
* 08.11.2022 - *Timo:* Thrower testing, gathering data and cleaning up code. (5h)
* 09.11.2022 - *Timo:* Thrower testing, improving robot driving. (4h)
* 09.11.2022 - *Jens:* Fixes (2h)
* 10.11.2022 - *Timo:* Finally getting the robot code in a competitive state, qualifying and taking part of test competition. (10h)
* 10.11.2022 - *Artur:* Helped with software, participated in the test competition. (4h)
* 12.11.2022 - *Artur:* Fixed PCB issues, created PCB issues. (2h)
* 14.11.2022 - *Timo:* Testing referee code. (1h)
* 17.11.2022 - *Timo:* Testing movement, adding in more screws. (2h)
* 18.11.2022 - *Timo:* Improved search function and ball detection. (3h)
* 19.11.2022 - *Timo:* Code cleanup and switching referee code to multiprocessing. (2h)
* 20.11.2022 - *Timo:* More code cleanup and fixes. (1h)
* 21.11.2022 - *Timo:* Programming. (2h)
* 22.11.2022 - *Timo:* More programming. (4h)
* 23.11.2022 - *Timo:* Code cleanup, fixes, fixing mechanical problems, implementing logging. (7h)
* 24.11.2022 - *Timo:* "Improving" code, taking part in test competition. (8h)
* 24.11.2022 - *Artur:* Taking part in test competition. (3h)
* 25.11.2022 - *Jens:* Made new baseplate design, new thrower design, etc (5h)
* 28.11.2022 - *Artur:* Soldering the PCB, presentation. (7h)
* 28.11.2022 - *Timo:* Bug fixes, presentation. (5h)
* 30.11.2022 - *Artur:* Soldering the PCB. (1h)
* 01.12.2022 - *Timo:* Code cleanup and fixes, getting code approved. (2h)
* 01.12.2022 - *Artur:* Soldering the PCB, debugging stuff. (5h)
* 02.12.2022 - *Timo:* Code cleanup. (2.5h)
* 03.12.2022 - *Timo:* Fixes, code to hopefully save the robot when balls get stuck. (2.5h)
* 04.12.2022 - *Jens:* Mechanics design and fixing issues (5h)
* 04.12.2022 - *Timo:* Programming, fixing basket escape logic. (7h)
* 05.12.2022 - *Timo:* Code adjustment and fixed orbiting with the help of Akustav. (4h)
* 05.12.2022 - *Artur:* Debug the PCB, fix electronics solders. (4h)
* 06.12.2022 - *Timo:* Variable adjusting, making use of white pixels in line detection. (3h)
* 07.12.2022 - *Timo:* Calibrated thrower, cleaned the wheels, drilled a hole to attach rear wheel, attempts at improving basket distance detection. (7.5h)
* 08.12.2022 - *Timo:* Adjusted some screws, code cleanup, won the test competition. (5h)
* 08.12.2022 - *Artur:* Finished debugging PCB, started writing firmware. (5h)
* 09.12.2022 - *Timo:* Minor code cleanup and experimenting with basket color detection. (1h)
* 10.12.2022 - *Jens:* CAM design (2h)
* 11.12.2022 - *Artur:* Did firmware, added a hack connection to PCB. (2h)
* 12.12.2022 - *Timo:*  Improved throwing by implementing better logic for basket distance detection and presenting. (3h)
* 13.12.2022 - *Timo:*  Minor bug and regression fixes. (1h)
* 14.12.2022 - *Timo:*  Gathering ideas, assembling some of the robot, helping Kivipallur JÃ¼rto by reinstalling the OS on their NUC, minor code adjustments. (10h)
* 15.12.2022 - 16.12.2022 - *Timo:*  Switching to old electronics, made code work with the new robot, assembled robot and customized the look of it and got 3rd place in Delta X. (24h)
* 17.12.2022 - *Timo:* Attempt to switch electronics, try to somehow salvage the code enough to not lose right away, qualified and got some place at "we have Delta X at home" competition. (11h)
